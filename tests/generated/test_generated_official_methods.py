
# This file is automatically generated by the pipeline. Do not edit directly.
# Unit tests for all Unified API methods of the 'official' source.
import os
import json
from enum import Enum
from unittest.mock import MagicMock
import pytest
from pydantic import BaseModel
from hypothesis import given, settings, HealthCheck
from hypothesis_jsonschema import from_schema
from code_generation.shared.utils import camel_to_snake
from tests.utilities import normalize_for_comparison
from multiconn_archicad.unified_api.official.addon import AddonCommands as OfficialAddonCommands
from multiconn_archicad.unified_api.official.attribute import AttributeCommands as OfficialAttributeCommands
from multiconn_archicad.unified_api.official.basic import BasicCommands as OfficialBasicCommands
from multiconn_archicad.unified_api.official.classification import ClassificationCommands as OfficialClassificationCommands
from multiconn_archicad.unified_api.official.component import ComponentCommands as OfficialComponentCommands
from multiconn_archicad.unified_api.official.element_geometry import ElementGeometryCommands as OfficialElementGeometryCommands
from multiconn_archicad.unified_api.official.element_listing import ElementListingCommands as OfficialElementListingCommands
from multiconn_archicad.unified_api.official.element_relation import ElementRelationCommands as OfficialElementRelationCommands
from multiconn_archicad.unified_api.official.layout_book import LayoutBookCommands as OfficialLayoutBookCommands
from multiconn_archicad.unified_api.official.navigator_tree import NavigatorTreeCommands as OfficialNavigatorTreeCommands
from multiconn_archicad.unified_api.official.property import PropertyCommands as OfficialPropertyCommands
from multiconn_archicad.unified_api.official.view_map import ViewMapCommands as OfficialViewMapCommands
from multiconn_archicad.models.official import commands, types
NUM_EXAMPLES = int(os.getenv("HYPOTHESIS_NUM_EXAMPLES", 1))
settings.register_profile("ci", max_examples=NUM_EXAMPLES, suppress_health_check=[HealthCheck.too_slow], deadline=None)
settings.load_profile("ci")
pytestmark = pytest.mark.generated_methods


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CloneProjectMapItemToViewMapParameters":{"type":"object","properties":{"projectMapNavigatorItemId":{"description":"The ID of the navigator item to be cloned. Only navigator items from the project map can be cloned.","$ref":"#/$defs/NavigatorItemId"},"parentNavigatorItemId":{"description":"The ID of the navigator item below which the new view will be inserted. Only navigator items from the view map are allowed.","$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["projectMapNavigatorItemId","parentNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CloneProjectMapItemToViewMapParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CloneProjectMapItemToViewMapResult":{"type":"object","properties":{"createdNavigatorItemId":{"description":"The ID of the new navigator item in view map.","$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["createdNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CloneProjectMapItemToViewMapResult"}')))
def test_clone_project_map_item_to_view_map_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialViewMapCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.clone_project_map_item_to_view_map(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.CloneProjectMapItemToViewMap'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['createdNavigatorItemId']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateAttributeFoldersParameters":{"type":"object","properties":{"attributeFolders":{"type":"array","items":{"$ref":"#/$defs/AttributeFolderCreationParameters"}}},"additionalProperties":false,"required":["attributeFolders"]},"AttributeFolderCreationParameters":{"type":"object","description":"Used to create an attribute folder. The folder type and it\'s path needs to be provided.","properties":{"attributeType":{"$ref":"#/$defs/AttributeType"},"path":{"$ref":"#/$defs/AttributeFolderPath"}},"additionalProperties":false,"required":["attributeType","path"]},"AttributeType":{"type":"string","description":"The type of an attribute.","enum":["BuildingMaterial","Composite","Fill","Layer","LayerCombination","Line","PenTable","Profile","Surface","ZoneCategory"]},"AttributeFolderPath":{"type":"array","description":"A list of attribute folder names. May be empty.","items":{"$ref":"#/$defs/AttributeFolderName"}},"AttributeFolderName":{"type":"string","description":"The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.","minLength":1}},"$ref":"#/$defs/CreateAttributeFoldersParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateAttributeFoldersResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/CreateAttributeFoldersResult"}')))
def test_create_attribute_folders_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_attribute_folders(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.CreateAttributeFolders'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateLayoutParameters":{"type":"object","properties":{"layoutName":{"type":"string","description":"The name of the layout.","minLength":1},"layoutParameters":{"$ref":"#/$defs/LayoutParameters"},"masterNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"parentNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["layoutName","layoutParameters","masterNavigatorItemId","parentNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"LayoutParameters":{"type":"object","description":"The parameters of the layout.","properties":{"horizontalSize":{"type":"number","description":"The horizontal size of the layout in millimeters."},"verticalSize":{"type":"number","description":"The vertical size of the layout in millimeters."},"leftMargin":{"type":"number","description":"The layout margin from the left side of the paper."},"topMargin":{"type":"number","description":"The layout margin from the top side of the paper."},"rightMargin":{"type":"number","description":"The layout margin from the right side of the paper."},"bottomMargin":{"type":"number","description":"The layout margin from the bottom side of the paper."},"customLayoutNumber":{"type":"string","description":"The custom ID."},"customLayoutNumbering":{"type":"boolean","description":"Defines whether a unique ID is used for the current layout or not."},"doNotIncludeInNumbering":{"type":"boolean","description":"Defines whether this layout is included in automatic ID assignment or not."},"displayMasterLayoutBelow":{"type":"boolean","description":"Defines whether to display the master layout above or below the layout."},"layoutPageNumber":{"type":"integer","description":"The page number of layout when this layout contains multi-page drawings."},"actPageIndex":{"type":"integer","description":"The actual index of layout inside the multi-page layout."},"currentRevisionId":{"type":"string","description":"The ID of the current document revision of the layout."},"currentFinalRevisionId":{"type":"string","description":"The ID with optional suffix of the current document revision of the layout."},"hasIssuedRevision":{"type":"boolean","description":"Defines whether one or more issued document revisions have already been created for the layout or not."},"hasActualRevision":{"type":"boolean","description":"Defines whether an open document revision exists for the layout or not."}},"additionalProperties":false,"required":["horizontalSize","verticalSize","leftMargin","topMargin","rightMargin","bottomMargin","customLayoutNumber","customLayoutNumbering","doNotIncludeInNumbering","displayMasterLayoutBelow","layoutPageNumber","actPageIndex","currentRevisionId","currentFinalRevisionId","hasIssuedRevision","hasActualRevision"]}},"$ref":"#/$defs/CreateLayoutParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateLayoutResult":{"type":"object","properties":{"createdNavigatorItemId":{"description":"The ID of the new layout navigator item in the layout book.","$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["createdNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateLayoutResult"}')))
def test_create_layout_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialLayoutBookCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_layout(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.CreateLayout'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['createdNavigatorItemId']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateLayoutSubsetParameters":{"type":"object","properties":{"subsetParameters":{"$ref":"#/$defs/Subset"},"parentNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["subsetParameters","parentNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"Subset":{"type":"object","description":"A set of options used to assign IDs to the layouts contained in the subset.","properties":{"name":{"type":"string","description":"The name for the layout subset.","minLength":1},"includeToIDSequence":{"type":"boolean","description":"Defines whether this subset is included in automatic ID assignment or not."},"customNumbering":{"type":"boolean","description":"Defines whether the IDs are generated automatically or a custom numbering is used."},"continueNumbering":{"type":"boolean","description":"Defines whether to continue using the ID assignment of the upper levels or not. If \'true\', layouts within this subset are going to be assigned IDs as if they were not within this subset, but part of the level above. In this case you only use the Subset as a logical grouping which has no effect on IDs."},"useUpperPrefix":{"type":"boolean","description":"Defines whether to use the prefix and ID of the upper levels or not. If \'true\', layouts in this subset will be assigned IDs based on the previous layout in the layout book structure."},"addOwnPrefix":{"type":"boolean","description":"Defines whether to add own prefix to the subset or not."},"customNumber":{"type":"string","description":"The custom subset ID."},"autoNumber":{"type":"string","description":"The automatic subset ID."},"numberingStyle":{"$ref":"#/$defs/NumberingStyle","description":"The style of the ID formatting."},"startAt":{"type":"integer","description":"The starting value of the numbering."},"ownPrefix":{"type":"string","description":"The custom prefix for the subset."}},"additionalProperties":false,"required":["name","includeToIDSequence","customNumbering","continueNumbering","useUpperPrefix","addOwnPrefix","customNumber","autoNumber","numberingStyle","startAt","ownPrefix"]},"NumberingStyle":{"type":"string","description":"A supported numbering style.","enum":["Undefined","abc","ABC","1","01","001","0001","noID"]}},"$ref":"#/$defs/CreateLayoutSubsetParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateLayoutSubsetResult":{"type":"object","properties":{"createdSubsetId":{"description":"The ID of the new subset navigator item in the layout book.","$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["createdSubsetId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateLayoutSubsetResult"}')))
def test_create_layout_subset_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialLayoutBookCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_layout_subset(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.CreateLayoutSubset'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['createdSubsetId']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateViewMapFolderParameters":{"type":"object","properties":{"folderParameters":{"$ref":"#/$defs/FolderParameters","description":"This is the name of the new folder."},"parentNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId","description":"The newly created folder will be placed under this parent item. If this parameter is not given the folder will be created as the first item in the View Map list."},"previousNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId","description":"The newly created folder will be placed after this sibling item. If this parameter is not given the folder will be created as the first item under the parent."}},"additionalProperties":false,"required":["folderParameters"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"FolderParameters":{"type":"object","description":"The parameters of a folder.","properties":{"name":{"type":"string","description":"The name of the folder."}},"additionalProperties":false,"required":["name"]}},"$ref":"#/$defs/CreateViewMapFolderParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateViewMapFolderResult":{"type":"object","properties":{"createdFolderNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["createdFolderNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateViewMapFolderResult"}')))
def test_create_view_map_folder_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialViewMapCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_view_map_folder(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.CreateViewMapFolder'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['createdFolderNavigatorItemId']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteAttributeFoldersParameters":{"type":"object","properties":{"attributeFolderIds":{"$ref":"#/$defs/AttributeFolderIds"}},"additionalProperties":false,"required":["attributeFolderIds"]},"AttributeFolderIds":{"type":"array","description":"A list of attribute folder identifiers.","items":{"$ref":"#/$defs/AttributeFolderIdWrapperItem"}},"AttributeFolderIdWrapperItem":{"type":"object","properties":{"attributeFolderId":{"$ref":"#/$defs/AttributeFolderId"}},"additionalProperties":false,"required":["attributeFolderId"]},"AttributeFolderId":{"type":"object","description":"The identifier of an attribute folder.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/DeleteAttributeFoldersParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteAttributeFoldersResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/DeleteAttributeFoldersResult"}')))
def test_delete_attribute_folders_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.delete_attribute_folders(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.DeleteAttributeFolders'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/DeleteAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteAttributesResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/DeleteAttributesResult"}')))
def test_delete_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.delete_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.DeleteAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/DeleteNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteNavigatorItemsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/DeleteNavigatorItemsResult"}')))
def test_delete_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.delete_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.DeleteNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ExecuteAddOnCommandParameters":{"type":"object","properties":{"addOnCommandId":{"$ref":"#/$defs/AddOnCommandId"},"addOnCommandParameters":{"$ref":"#/$defs/AddOnCommandParameters"}},"additionalProperties":false,"required":["addOnCommandId"]},"AddOnCommandId":{"type":"object","description":"The identifier of an Add-On command.","properties":{"commandNamespace":{"type":"string","description":"The namespace of the Add-On command.","minLength":1},"commandName":{"type":"string","description":"The name of the Add-On command.","minLength":1}},"additionalProperties":false,"required":["commandNamespace","commandName"]},"AddOnCommandParameters":{"type":"object","description":"The input parameters of an Add-On command.","additionalProperties":true}},"$ref":"#/$defs/ExecuteAddOnCommandParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ExecuteAddOnCommandResult":{"type":"object","properties":{"addOnCommandResponse":{"$ref":"#/$defs/AddOnCommandResponse"}},"additionalProperties":false,"required":["addOnCommandResponse"]},"AddOnCommandResponse":{"type":"object","description":"The response returned by an Add-On command.","additionalProperties":true}},"$ref":"#/$defs/ExecuteAddOnCommandResult"}')))
def test_execute_add_on_command_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAddonCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.execute_add_on_command(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.ExecuteAddOnCommand'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['addOnCommandResponse']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"Get2DBoundingBoxesParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/Get2DBoundingBoxesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"Get2DBoundingBoxesResult":{"type":"object","properties":{"boundingBoxes2D":{"$ref":"#/$defs/BoundingBoxes2D"}},"additionalProperties":false,"required":["boundingBoxes2D"]},"BoundingBoxes2D":{"type":"array","description":"A list of 2D bounding boxes.","items":{"$ref":"#/$defs/BoundingBox2DOrError"}},"BoundingBox2DOrError":{"type":"object","description":"A 2D bounding box or an error.","oneOf":[{"title":"boundingBox2D","properties":{"boundingBox2D":{"$ref":"#/$defs/BoundingBox2D"}},"additionalProperties":false,"required":["boundingBox2D"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"BoundingBox2D":{"type":"object","description":"The 2D bounding box of an element.","properties":{"xMin":{"type":"number","description":"The minimum X value of the bounding box."},"yMin":{"type":"number","description":"The minimum Y value of the bounding box."},"xMax":{"type":"number","description":"The maximum X value of the bounding box."},"yMax":{"type":"number","description":"The maximum Y value of the bounding box."}},"additionalProperties":false,"required":["xMin","yMin","xMax","yMax"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/Get2DBoundingBoxesResult"}')))
def test_get_2d_bounding_boxes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementGeometryCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_2d_bounding_boxes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.Get2DBoundingBoxes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['boundingBoxes2D']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"Get3DBoundingBoxesParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/Get3DBoundingBoxesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"Get3DBoundingBoxesResult":{"type":"object","properties":{"boundingBoxes3D":{"$ref":"#/$defs/BoundingBoxes3D"}},"additionalProperties":false,"required":["boundingBoxes3D"]},"BoundingBoxes3D":{"type":"array","description":"A list of 3D bounding boxes.","items":{"$ref":"#/$defs/BoundingBox3DOrError"}},"BoundingBox3DOrError":{"type":"object","description":"A 3D bounding box or an error.","oneOf":[{"title":"boundingBox3D","properties":{"boundingBox3D":{"$ref":"#/$defs/BoundingBox3D"}},"additionalProperties":false,"required":["boundingBox3D"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"BoundingBox3D":{"type":"object","description":"A 3D bounding box of an element.","properties":{"xMin":{"type":"number","description":"The minimum X value of the bounding box."},"yMin":{"type":"number","description":"The minimum Y value of the bounding box."},"zMin":{"type":"number","description":"The minimum Z value of the bounding box."},"xMax":{"type":"number","description":"The maximum X value of the bounding box."},"yMax":{"type":"number","description":"The maximum Y value of the bounding box."},"zMax":{"type":"number","description":"The maximum Z value of the bounding box."}},"additionalProperties":false,"required":["xMin","yMin","zMin","xMax","yMax","zMax"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/Get3DBoundingBoxesResult"}')))
def test_get_3d_bounding_boxes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementGeometryCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_3d_bounding_boxes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.Get3DBoundingBoxes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['boundingBoxes3D']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllClassificationsInSystemParameters":{"type":"object","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAllClassificationsInSystemParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllClassificationsInSystemResult":{"type":"object","properties":{"classificationItems":{"$ref":"#/$defs/ClassificationItems"}},"additionalProperties":false,"required":["classificationItems"]},"ClassificationItems":{"type":"array","description":"A list of classification items.","items":{"$ref":"#/$defs/ClassificationItemArrayItem"}},"ClassificationItemArrayItem":{"type":"object","properties":{"classificationItem":{"$ref":"#/$defs/ClassificationItemInTree"}},"additionalProperties":false,"required":["classificationItem"]},"ClassificationItemInTree":{"type":"object","description":"The details of a classification item.","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"},"id":{"type":"string","description":"The unique identifier of the classification item as specified by the user."},"name":{"type":"string","description":"The display name of the classification item."},"description":{"type":"string","description":"The description of the classification item."}},"additionalProperties":false,"required":["classificationItemId","id","name","description"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAllClassificationsInSystemResult"}')))
def test_get_all_classifications_in_system_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_all_classifications_in_system(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAllClassificationsInSystem'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['classificationItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertyGroupIdsParameters":{"type":"object","properties":{"propertyType":{"$ref":"#/$defs/PropertyType"}},"additionalProperties":false},"PropertyType":{"type":"string","description":"The type of a property group or a property definition.","enum":["UserDefined","BuiltIn"]}},"$ref":"#/$defs/GetAllPropertyGroupIdsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertyGroupIdsResult":{"type":"object","properties":{"propertyGroupIds":{"$ref":"#/$defs/PropertyGroupIds"}},"additionalProperties":false,"required":["propertyGroupIds"]},"PropertyGroupIds":{"type":"array","description":"A list of property group identifiers.","items":{"$ref":"#/$defs/PropertyGroupIdArrayItem"}},"PropertyGroupIdArrayItem":{"type":"object","properties":{"propertyGroupId":{"$ref":"#/$defs/PropertyGroupId"}},"additionalProperties":false,"required":["propertyGroupId"]},"PropertyGroupId":{"type":"object","description":"The identifier of a property group.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAllPropertyGroupIdsResult"}')))
def test_get_all_property_group_ids_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_all_property_group_ids(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAllPropertyGroupIds'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyGroupIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertyIdsOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"propertyType":{"$ref":"#/$defs/PropertyType"}},"additionalProperties":false,"required":["elements"]},"PropertyType":{"type":"string","description":"The type of a property group or a property definition.","enum":["UserDefined","BuiltIn"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAllPropertyIdsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertyIdsOfElementsResult":{"type":"object","properties":{"propertyIdsOfElements":{"$ref":"#/$defs/PropertyIdsOfElementOrErrorArray"}},"additionalProperties":false,"required":["propertyIdsOfElements"]},"PropertyIdsOfElementOrErrorArray":{"type":"array","description":"A list of property identifiers of elements or errors.","items":{"$ref":"#/$defs/PropertyIdsOfElementOrError"}},"PropertyIdsOfElementOrError":{"type":"object","description":"A list property identifiers of an owner element or an error.","oneOf":[{"title":"propertyIdsOfElement","properties":{"propertyIdsOfElement":{"$ref":"#/$defs/PropertyIdsOfElement"}},"additionalProperties":false,"required":["propertyIdsOfElement"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyIdsOfElement":{"type":"object","description":"A list property identifiers of an owner element.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"propertyIds":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["elementId","propertyIds"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetAllPropertyIdsOfElementsResult"}')))
def test_get_all_property_ids_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_all_property_ids_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAllPropertyIdsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyIdsOfElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertyIdsParameters":{"type":"object","properties":{"propertyType":{"$ref":"#/$defs/PropertyType"}},"additionalProperties":false},"PropertyType":{"type":"string","description":"The type of a property group or a property definition.","enum":["UserDefined","BuiltIn"]}},"$ref":"#/$defs/GetAllPropertyIdsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertyIdsResult":{"type":"object","properties":{"propertyIds":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["propertyIds"]},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAllPropertyIdsResult"}')))
def test_get_all_property_ids_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_all_property_ids(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAllPropertyIds'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributeFolderStructureParameters":{"type":"object","properties":{"attributeType":{"$ref":"#/$defs/AttributeType"},"path":{"$ref":"#/$defs/AttributeFolderPath"}},"additionalProperties":false,"required":["attributeType"]},"AttributeType":{"type":"string","description":"The type of an attribute.","enum":["BuildingMaterial","Composite","Fill","Layer","LayerCombination","Line","PenTable","Profile","Surface","ZoneCategory"]},"AttributeFolderPath":{"type":"array","description":"A list of attribute folder names. May be empty.","items":{"$ref":"#/$defs/AttributeFolderName"}},"AttributeFolderName":{"type":"string","description":"The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.","minLength":1}},"$ref":"#/$defs/GetAttributeFolderStructureParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributeFolderStructureResult":{"type":"object","properties":{"attributeFolder":{"$ref":"#/$defs/AttributeFolderStructure"}},"additionalProperties":false,"required":["attributeFolder"]},"AttributeFolderStructure":{"type":"object","description":"The details of an attribute folder structure.","properties":{"attributeFolderId":{"$ref":"#/$defs/AttributeFolderId"},"name":{"$ref":"#/$defs/AttributeFolderName"},"attributes":{"$ref":"#/$defs/AttributeHeaders","description":"The names and identifiers of the attributes contained in this folder."}},"additionalProperties":false,"required":["attributeFolderId","name"]},"AttributeFolderId":{"type":"object","description":"The identifier of an attribute folder.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"AttributeHeaders":{"type":"array","description":"A list of attribute headers.","items":{"$ref":"#/$defs/AttributeHeaderArrayItem"}},"AttributeHeaderArrayItem":{"type":"object","properties":{"attribute":{"$ref":"#/$defs/AttributeHeader"}},"additionalProperties":false,"required":["attribute"]},"AttributeHeader":{"type":"object","description":"The header object of an attribute.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"}},"additionalProperties":false,"required":["attributeId","name"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"AttributeFolderName":{"type":"string","description":"The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.","minLength":1}},"$ref":"#/$defs/GetAttributeFolderStructureResult"}')))
def test_get_attribute_folder_structure_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_attribute_folder_structure(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAttributeFolderStructure'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeFolder']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributeFoldersParameters":{"type":"object","properties":{"attributeFolderIds":{"$ref":"#/$defs/AttributeFolderIds"}},"additionalProperties":false,"required":["attributeFolderIds"]},"AttributeFolderIds":{"type":"array","description":"A list of attribute folder identifiers.","items":{"$ref":"#/$defs/AttributeFolderIdWrapperItem"}},"AttributeFolderIdWrapperItem":{"type":"object","properties":{"attributeFolderId":{"$ref":"#/$defs/AttributeFolderId"}},"additionalProperties":false,"required":["attributeFolderId"]},"AttributeFolderId":{"type":"object","description":"The identifier of an attribute folder.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAttributeFoldersParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributeFoldersResult":{"type":"object","properties":{"attributeFolders":{"$ref":"#/$defs/AttributeFolders"}},"additionalProperties":false,"required":["attributeFolders"]},"AttributeFolders":{"type":"array","description":"A list of attribute folders.","items":{"$ref":"#/$defs/AttributeFolderOrError"}},"AttributeFolderOrError":{"type":"object","description":"An attribute folder or an error.","oneOf":[{"title":"AttributeFolder","properties":{"attributeFolder":{"$ref":"#/$defs/AttributeFolder"}},"additionalProperties":false,"required":["attributeFolder"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"AttributeFolder":{"type":"object","description":"Identifies an attribute folder. The path of the root folder is repesented by empty array.","properties":{"attributeType":{"$ref":"#/$defs/AttributeType"},"path":{"$ref":"#/$defs/AttributeFolderPath"},"attributeFolderId":{"$ref":"#/$defs/AttributeFolderId"},"attributeIds":{"$ref":"#/$defs/AttributeIds"},"attributeFolderIds":{"$ref":"#/$defs/AttributeFolderIds"}},"additionalProperties":false,"required":["attributeType","path","attributeFolderId","attributeIds","attributeFolderIds"]},"AttributeType":{"type":"string","description":"The type of an attribute.","enum":["BuildingMaterial","Composite","Fill","Layer","LayerCombination","Line","PenTable","Profile","Surface","ZoneCategory"]},"AttributeFolderPath":{"type":"array","description":"A list of attribute folder names. May be empty.","items":{"$ref":"#/$defs/AttributeFolderName"}},"AttributeFolderName":{"type":"string","description":"The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.","minLength":1},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"AttributeFolderId":{"type":"object","description":"The identifier of an attribute folder.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"AttributeFolderIds":{"type":"array","description":"A list of attribute folder identifiers.","items":{"$ref":"#/$defs/AttributeFolderIdWrapperItem"}},"AttributeFolderIdWrapperItem":{"type":"object","properties":{"attributeFolderId":{"$ref":"#/$defs/AttributeFolderId"}},"additionalProperties":false,"required":["attributeFolderId"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetAttributeFoldersResult"}')))
def test_get_attribute_folders_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_attribute_folders(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAttributeFolders'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeFolders']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributesByTypeParameters":{"type":"object","properties":{"attributeType":{"$ref":"#/$defs/AttributeType"}},"additionalProperties":false,"required":["attributeType"]},"AttributeType":{"type":"string","description":"The type of an attribute.","enum":["BuildingMaterial","Composite","Fill","Layer","LayerCombination","Line","PenTable","Profile","Surface","ZoneCategory"]}},"$ref":"#/$defs/GetAttributesByTypeParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributesByTypeResult":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAttributesByTypeResult"}')))
def test_get_attributes_by_type_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_attributes_by_type(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAttributesByType'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributesIndicesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAttributesIndicesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributesIndicesResult":{"type":"object","properties":{"attributeIndicesAndGuids":{"$ref":"#/$defs/AttributeIndicesAndGuids"}},"additionalProperties":false,"required":["attributeIndicesAndGuids"]},"AttributeIndicesAndGuids":{"type":"array","description":"A list of complete attribute identifiers.","items":{"$ref":"#/$defs/AttributeIndexAndGuidOrError"}},"AttributeIndexAndGuidOrError":{"type":"object","description":"The attribute\'s identifier or an error.","oneOf":[{"title":"attributeIndexAndGuid","$ref":"#/$defs/AttributeIndexAndGuidWrapperItem"},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"AttributeIndexAndGuidWrapperItem":{"type":"object","properties":{"attributeIndexAndGuid":{"$ref":"#/$defs/AttributeIndexAndGuid"}},"additionalProperties":false,"required":["attributeIndexAndGuid"]},"AttributeIndexAndGuid":{"type":"object","description":"The complete identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"},"index":{"$ref":"#/$defs/AttributeIndex"}},"additionalProperties":false,"required":["guid","index"]},"AttributeIndex":{"type":"number","description":"The index of an attribute.","minimum":1},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetAttributesIndicesResult"}')))
def test_get_attributes_indices_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_attributes_indices(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetAttributesIndices'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeIndicesAndGuids']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetBuildingMaterialAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetBuildingMaterialAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetBuildingMaterialAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/BuildingMaterialAttributes"}},"additionalProperties":false,"required":["attributes"]},"BuildingMaterialAttributes":{"type":"array","description":"A list of building material attributes and potential errors.","items":{"$ref":"#/$defs/BuildingMaterialAttributeOrError"}},"BuildingMaterialAttributeOrError":{"type":"object","description":"A building material attribute or an error.","oneOf":[{"title":"BuildingMaterialAttribute","properties":{"buildingMaterialAttribute":{"$ref":"#/$defs/BuildingMaterialAttribute"}},"additionalProperties":false,"required":["buildingMaterialAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"BuildingMaterialAttribute":{"type":"object","description":"A building material attribute","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"id":{"type":"string","description":"The id of the building material."},"connectionPriority":{"type":"integer","description":"The connection priority of the building material."},"cutFillId":{"$ref":"#/$defs/AttributeIdOrError","description":"The identifier of the building material attribute\'s fill component."},"cutFillPenIndex":{"$ref":"#/$defs/PenIndex","description":"The cut fill pen index of the building material."},"cutSurfaceId":{"$ref":"#/$defs/AttributeIdOrError","description":"The identifier of the building material attribute\'s surface component."}},"additionalProperties":false,"required":["attributeId","name","id","connectionPriority","cutFillId","cutFillPenIndex","cutSurfaceId"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"PenIndex":{"type":"integer","description":"The index number of a pen.","minimum":0,"maximum":255},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"AttributeIdOrError":{"type":"object","description":"The attribute\'s identifier or an error.","oneOf":[{"title":"attributeId","$ref":"#/$defs/AttributeIdWrapperItem"},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]}},"$ref":"#/$defs/GetBuildingMaterialAttributesResult"}')))
def test_get_building_material_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_building_material_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetBuildingMaterialAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetBuiltInContainerNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetBuiltInContainerNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetBuiltInContainerNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/BuiltInContainerNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"BuiltInContainerNavigatorItems":{"type":"array","description":"A list of built-in container navigator items.","items":{"$ref":"#/$defs/BuiltInContainerNavigatorItemOrError"}},"BuiltInContainerNavigatorItemOrError":{"type":"object","description":"Contains a built-in container navigator item or an error.","oneOf":[{"title":"WorksheetNavigatorItem","properties":{"builtInContainerNavigatorItem":{"$ref":"#/$defs/BuiltInContainerNavigatorItem"}},"additionalProperties":false,"required":["builtInContainerNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"BuiltInContainerNavigatorItem":{"type":"object","description":"The details of a built-in container navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."},"contentIds":{"$ref":"#/$defs/NavigatorItemIds","description":"The identifiers of the navigator items inside the container navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name","contentIds"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetBuiltInContainerNavigatorItemsResult"}')))
def test_get_built_in_container_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_built_in_container_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetBuiltInContainerNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationItemAvailabilityParameters":{"type":"object","properties":{"classificationItemIds":{"$ref":"#/$defs/ClassificationItemIds"}},"additionalProperties":false,"required":["classificationItemIds"]},"ClassificationItemIds":{"type":"array","description":"A list of classification item identifiers.","items":{"$ref":"#/$defs/ClassificationItemIdArrayItem"}},"ClassificationItemIdArrayItem":{"type":"object","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"}},"additionalProperties":false,"required":["classificationItemId"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetClassificationItemAvailabilityParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationItemAvailabilityResult":{"type":"object","properties":{"classificationItemAvailabilityList":{"$ref":"#/$defs/ClassificationItemAvailabilityList"}},"additionalProperties":false,"required":["classificationItemAvailabilityList"]},"ClassificationItemAvailabilityList":{"type":"array","description":"A list of classification item avalabilities.","items":{"$ref":"#/$defs/ClassificationItemAvailabilityOrError"}},"ClassificationItemAvailabilityOrError":{"type":"object","description":"Contains the ids of property definitions available for the given classification item or error.","oneOf":[{"title":"classificationItemAvailability","properties":{"classificationItemAvailability":{"$ref":"#/$defs/ClassificationItemAvailability"}},"additionalProperties":false,"required":["classificationItemAvailability"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ClassificationItemAvailability":{"type":"object","description":"Contains the ids of property definitions available for the given classification item.","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"},"availableProperties":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["classificationItemId","availableProperties"]},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetClassificationItemAvailabilityResult"}')))
def test_get_classification_item_availability_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_classification_item_availability(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetClassificationItemAvailability'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['classificationItemAvailabilityList']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationSystemsParameters":{"type":"object","properties":{"classificationSystemIds":{"$ref":"#/$defs/ClassificationSystemIds"}},"additionalProperties":false,"required":["classificationSystemIds"]},"ClassificationSystemIds":{"type":"array","description":"A list of classification system identifiers.","items":{"$ref":"#/$defs/ClassificationSystemIdArrayItem"}},"ClassificationSystemIdArrayItem":{"type":"object","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetClassificationSystemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationSystemsResult":{"type":"object","properties":{"classificationSystems":{"$ref":"#/$defs/ClassificationSystemsOrErrors"}},"additionalProperties":false,"required":["classificationSystems"]},"ClassificationSystemsOrErrors":{"type":"array","description":"A list of classification systems or errors.","items":{"$ref":"#/$defs/ClassificationSystemOrError"}},"ClassificationSystemOrError":{"type":"object","description":"Contains a classification system or error.","oneOf":[{"title":"classificationSystem","properties":{"classificationSystem":{"$ref":"#/$defs/ClassificationSystem"}},"additionalProperties":false,"required":["classificationSystem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ClassificationSystem":{"type":"object","description":"The details of a classification system.","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"},"name":{"type":"string","description":"The display name of the classification system."},"description":{"type":"string","description":"The description of the classification system."},"source":{"type":"string","description":"The source of the classification system (e.g. URL to a classification system standard)."},"version":{"type":"string","description":"The version of the classification system."},"date":{"$ref":"#/$defs/Date","description":"The release date of the classification system\'s current version."}},"additionalProperties":false,"required":["classificationSystemId","name","description","source","version","date"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"Date":{"type":"string","description":"A date in its string representation as defined in ISO 8601: YYYY-MM-DD.","pattern":"^[0-9]{4}-[0-9]{2}-[0-9]{2}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetClassificationSystemsResult"}')))
def test_get_classification_systems_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_classification_systems(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetClassificationSystems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['classificationSystems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationsOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"classificationSystemIds":{"$ref":"#/$defs/ClassificationSystemIds"}},"additionalProperties":false,"required":["elements","classificationSystemIds"]},"ClassificationSystemIds":{"type":"array","description":"A list of classification system identifiers.","items":{"$ref":"#/$defs/ClassificationSystemIdArrayItem"}},"ClassificationSystemIdArrayItem":{"type":"object","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetClassificationsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationsOfElementsResult":{"type":"object","properties":{"elementClassifications":{"description":"The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects.","$ref":"#/$defs/ElementClassificationsOrErrors"}},"additionalProperties":false,"required":["elementClassifications"]},"ElementClassificationsOrErrors":{"type":"array","description":"A list of element classification identifiers or errors.","items":{"$ref":"#/$defs/ElementClassificationOrError"}},"ElementClassificationOrError":{"type":"object","description":"Element classification identifiers or errors.","oneOf":[{"title":"classificationIds","properties":{"classificationIds":{"$ref":"#/$defs/ClassificationIdsOrErrors"}},"additionalProperties":false,"required":["classificationIds"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ClassificationIdsOrErrors":{"type":"array","description":"A list of element classification identifiers or errors.","items":{"$ref":"#/$defs/ClassificationIdOrError"}},"ClassificationIdOrError":{"type":"object","description":"A classification identifier or an error.","oneOf":[{"title":"classificationId","properties":{"classificationId":{"$ref":"#/$defs/ClassificationId"}},"additionalProperties":false,"required":["classificationId"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ClassificationId":{"type":"object","description":"The element classification identifier.","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"},"classificationItemId":{"$ref":"#/$defs/ClassificationItemId","description":"The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetClassificationsOfElementsResult"}')))
def test_get_classifications_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_classifications_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetClassificationsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elementClassifications']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetComponentsOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetComponentsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetComponentsOfElementsResult":{"type":"object","properties":{"componentsOfElements":{"$ref":"#/$defs/ElementComponentsOrErrorArray"}},"additionalProperties":false,"required":["componentsOfElements"]},"ElementComponentsOrErrorArray":{"type":"array","description":"Array of component list or error.","items":{"$ref":"#/$defs/ElementComponentsOrError"}},"ElementComponentsOrError":{"type":"object","description":"List of components or error.","oneOf":[{"$ref":"#/$defs/ElementComponentsWrapper"},{"$ref":"#/$defs/ErrorItem"}]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"ElementComponentsWrapper":{"type":"object","description":"List of components.","properties":{"elementComponents":{"$ref":"#/$defs/ElementComponents"}},"additionalProperties":false,"required":["elementComponents"]},"ElementComponents":{"type":"array","description":"List of components of elements.","items":{"$ref":"#/$defs/ElementComponentIdArrayItem"}},"ElementComponentIdArrayItem":{"type":"object","description":"An item of a component array.","properties":{"elementComponentId":{"$ref":"#/$defs/ElementComponentId"}},"additionalProperties":false,"required":["elementComponentId"]},"ElementComponentId":{"type":"object","description":"The identifier of an element\'s component.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"componentId":{"$ref":"#/$defs/ComponentId"}},"additionalProperties":false,"required":["elementId","componentId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ComponentId":{"type":"object","description":"The identifier of a component.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetComponentsOfElementsResult"}')))
def test_get_components_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialComponentCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_components_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetComponentsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['componentsOfElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCompositeAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetCompositeAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCompositeAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/CompositeAttributes"}},"additionalProperties":false,"required":["attributes"]},"CompositeAttributes":{"type":"array","description":"A list of the composite attributes and potential errors.","items":{"$ref":"#/$defs/CompositeAttributeOrError"}},"CompositeAttributeOrError":{"type":"object","description":"A composite attribute or an error.","oneOf":[{"title":"compositeAttribute","properties":{"compositeAttribute":{"$ref":"#/$defs/CompositeAttribute"}},"additionalProperties":false,"required":["compositeAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"CompositeAttribute":{"type":"object","description":"A composite attribute.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"totalThickness":{"type":"number","description":"The total thickness of the composite."},"compositeSkins":{"$ref":"#/$defs/CompositeSkinList","description":"The skins of the composite attribute."},"compositeLines":{"$ref":"#/$defs/CompositeLineList","description":"The contour and separator lines of the composite attribute."},"useWith":{"$ref":"#/$defs/ElementTypes","description":"The list of element types for which this composite is available."}},"additionalProperties":false,"required":["attributeId","name","totalThickness","compositeSkins","compositeLines","useWith"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"CompositeLineList":{"type":"array","description":"A list of contour/separator lines for the composite.","items":{"$ref":"#/$defs/CompositeLineListItem"}},"CompositeLineListItem":{"type":"object","properties":{"compositeLine":{"$ref":"#/$defs/CompositeLine"}},"additionalProperties":false,"required":["compositeLine"]},"CompositeLine":{"type":"object","description":"A contour or separator line component for a composite attribute.","properties":{"lineId":{"$ref":"#/$defs/AttributeIdOrError"},"linePenIndex":{"$ref":"#/$defs/PenIndex","description":"The index of the line pen."}},"additionalProperties":false,"required":["lineId"]},"PenIndex":{"type":"integer","description":"The index number of a pen.","minimum":0,"maximum":255},"AttributeIdOrError":{"type":"object","description":"The attribute\'s identifier or an error.","oneOf":[{"title":"attributeId","$ref":"#/$defs/AttributeIdWrapperItem"},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"ElementTypes":{"type":"array","description":"A list of element types.","items":{"$ref":"#/$defs/ElementType"}},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Zone","CurtainWall","Shell","Skylight","Morph","Stair","Railing","Opening"]},"CompositeSkinList":{"type":"array","description":"A list of composite skins.","items":{"$ref":"#/$defs/CompositeSkinListItem"}},"CompositeSkinListItem":{"type":"object","properties":{"compositeSkin":{"$ref":"#/$defs/CompositeSkin"}},"additionalProperties":false,"required":["compositeSkin"]},"CompositeSkin":{"type":"object","description":"A skin component for a composite attribute.","properties":{"buildingMaterialId":{"$ref":"#/$defs/AttributeIdOrError"},"framePenIndex":{"$ref":"#/$defs/PenIndex","description":"The index of the frame pen."},"thickness":{"type":"number","description":"The thickness of the composite skin."},"isCore":{"type":"boolean","description":"Defines whether the composite skin is part of the core or not."},"isFinish":{"type":"boolean","description":"Defines whether the composite skin is part of the finish or not."}},"additionalProperties":false,"required":["buildingMaterialId","thickness","isCore","isFinish"]}},"$ref":"#/$defs/GetCompositeAttributesResult"}')))
def test_get_composite_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_composite_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetCompositeAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetDetailNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/DetailNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"DetailNavigatorItems":{"type":"array","description":"A list of detail navigator items.","items":{"$ref":"#/$defs/DetailNavigatorItemOrError"}},"DetailNavigatorItemOrError":{"type":"object","description":"Contains a detail navigator item or an error.","oneOf":[{"title":"DetailNavigatorItem","properties":{"detailNavigatorItem":{"$ref":"#/$defs/DetailNavigatorItem"}},"additionalProperties":false,"required":["detailNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"DetailNavigatorItem":{"type":"object","description":"The details of a detail navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetDetailNavigatorItemsResult"}')))
def test_get_detail_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_detail_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetDetailNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailsOfClassificationItemsParameters":{"type":"object","properties":{"classificationItemIds":{"$ref":"#/$defs/ClassificationItemIds"}},"additionalProperties":false,"required":["classificationItemIds"]},"ClassificationItemIds":{"type":"array","description":"A list of classification item identifiers.","items":{"$ref":"#/$defs/ClassificationItemIdArrayItem"}},"ClassificationItemIdArrayItem":{"type":"object","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"}},"additionalProperties":false,"required":["classificationItemId"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetDetailsOfClassificationItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailsOfClassificationItemsResult":{"type":"object","properties":{"classificationItems":{"$ref":"#/$defs/ClassificationItemsOrErrors"}},"additionalProperties":false,"required":["classificationItems"]},"ClassificationItemsOrErrors":{"type":"array","description":"A list of classification items or errors.","items":{"$ref":"#/$defs/ClassificationItemOrError"}},"ClassificationItemOrError":{"type":"object","description":"A classification item or an error.","oneOf":[{"title":"classificationItem","properties":{"classificationItem":{"$ref":"#/$defs/ClassificationItemDetails"}},"additionalProperties":false,"required":["classificationItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ClassificationItemDetails":{"type":"object","description":"The details of a classification item.","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"},"id":{"type":"string","description":"The unique identifier of the classification item as specified by the user."},"name":{"type":"string","description":"The display name of the classification item."},"description":{"type":"string","description":"The description of the classification item."}},"additionalProperties":false,"required":["classificationItemId","id","name","description"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetDetailsOfClassificationItemsResult"}')))
def test_get_details_of_classification_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_details_of_classification_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetDetailsOfClassificationItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['classificationItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailsOfPropertiesParameters":{"type":"object","properties":{"properties":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["properties"]},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetDetailsOfPropertiesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailsOfPropertiesResult":{"type":"object","properties":{"propertyDefinitions":{"$ref":"#/$defs/PropertyDefinitionsOrErrors"}},"additionalProperties":false,"required":["propertyDefinitions"]},"PropertyDefinitionsOrErrors":{"type":"array","description":"A list of property definitions or errors.","items":{"$ref":"#/$defs/PropertyDefinitionOrError"}},"PropertyDefinitionOrError":{"type":"object","description":"A property definition or an error.","oneOf":[{"title":"propertyDefinition","properties":{"propertyDefinition":{"$ref":"#/$defs/PropertyDefinition"}},"additionalProperties":false,"required":["propertyDefinition"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyDefinition":{"type":"object","description":"A property definition. The default value of a property appears if and only if it is a custom property and is not an expression type property. (This may change in the future.)","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"},"group":{"$ref":"#/$defs/PropertyGroup"},"name":{"type":"string","description":"The localized name of the property."},"description":{"type":"string","description":"The description of the property."},"isEditable":{"type":"boolean","description":"Defines whether the property is editable or not."},"type":{"type":"string","description":"Defines the type of the property\'s value."},"possibleEnumValues":{"$ref":"#/$defs/PossibleEnumValues","description":"The possible enum values of the property when the property type is enumeration."},"defaultValue":{"$ref":"#/$defs/PropertyDefaultValue"}},"additionalProperties":false,"required":["group","name","description","isEditable","type"]},"PropertyGroup":{"type":"object","description":"A property group.","properties":{"propertyGroupId":{"$ref":"#/$defs/PropertyGroupId"},"name":{"type":"string","description":"The property group name."}},"additionalProperties":false,"required":["propertyGroupId","name"]},"PropertyGroupId":{"type":"object","description":"The identifier of a property group.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"PropertyDefaultValue":{"type":"object","description":"Default value of the property.","oneOf":[{"$ref":"#/$defs/PropertyBasicDefaultValue"}]},"PropertyBasicDefaultValue":{"type":"object","properties":{"basicDefaultValue":{"$ref":"#/$defs/PropertyValue"}},"description":"Default value of the property in case of a basic property value (ie. not an expression).","additionalProperties":false,"required":["basicDefaultValue"]},"PropertyValue":{"type":"object","description":"A normal, userUndefined, notAvailable or notEvaluated property value.","oneOf":[{"$ref":"#/$defs/NormalOrUserUndefinedPropertyValue"},{"$ref":"#/$defs/NotAvailablePropertyValue"},{"$ref":"#/$defs/NotEvaluatedPropertyValue"}]},"NotEvaluatedPropertyValue":{"type":"object","description":"A notEvaluated value means that the property could not be evaluated for the property owner for some reason.","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["notEvaluated"]}},"additionalProperties":false,"required":["type","status"]},"PropertyValueType":{"type":"string","enum":["number","integer","string","boolean","length","area","volume","angle","numberList","integerList","stringList","booleanList","lengthList","areaList","volumeList","angleList","singleEnum","multiEnum"]},"NormalOrUserUndefinedPropertyValue":{"type":"object","description":"A normal or a userUndefined property value.","oneOf":[{"$ref":"#/$defs/NormalNumberPropertyValue"},{"$ref":"#/$defs/NormalIntegerPropertyValue"},{"$ref":"#/$defs/NormalStringPropertyValue"},{"$ref":"#/$defs/NormalBooleanPropertyValue"},{"$ref":"#/$defs/NormalLengthPropertyValue"},{"$ref":"#/$defs/NormalAreaPropertyValue"},{"$ref":"#/$defs/NormalVolumePropertyValue"},{"$ref":"#/$defs/NormalAnglePropertyValue"},{"$ref":"#/$defs/NormalNumberListPropertyValue"},{"$ref":"#/$defs/NormalIntegerListPropertyValue"},{"$ref":"#/$defs/NormalStringListPropertyValue"},{"$ref":"#/$defs/NormalBooleanListPropertyValue"},{"$ref":"#/$defs/NormalLengthListPropertyValue"},{"$ref":"#/$defs/NormalAreaListPropertyValue"},{"$ref":"#/$defs/NormalVolumeListPropertyValue"},{"$ref":"#/$defs/NormalAngleListPropertyValue"},{"$ref":"#/$defs/NormalSingleEnumPropertyValue"},{"$ref":"#/$defs/NormalMultiEnumPropertyValue"},{"$ref":"#/$defs/UserUndefinedPropertyValue"}]},"NormalNumberListPropertyValue":{"type":"object","description":"A number list property value containing numbers in an array.","properties":{"type":{"type":"string","enum":["numberList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalSingleEnumPropertyValue":{"type":"object","description":"A single enumeration property value containing the ID of the selected enum value.","properties":{"type":{"type":"string","enum":["singleEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueId":{"type":"object","description":"The identifier of a property enumeration value.","oneOf":[{"$ref":"#/$defs/DisplayValueEnumId"},{"$ref":"#/$defs/NonLocalizedValueEnumId"}]},"DisplayValueEnumId":{"type":"object","description":"An enumeration value identifier using the displayed value.","properties":{"type":{"type":"string","enum":["displayValue"]},"displayValue":{"type":"string"}},"additionalProperties":false,"required":["type","displayValue"]},"NonLocalizedValueEnumId":{"type":"object","description":"An enumeration value identifier using the nonlocalized value.","properties":{"type":{"type":"string","enum":["nonLocalizedValue"]},"nonLocalizedValue":{"type":"string"}},"additionalProperties":false,"required":["type","nonLocalizedValue"]},"UserUndefinedPropertyValue":{"type":"object","description":"A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["userUndefined"]}},"additionalProperties":false,"required":["type","status"]},"NormalAngleListPropertyValue":{"type":"object","description":"An angle list property value containing angles in an array. The values are measured in SI (radians).","properties":{"type":{"type":"string","enum":["angleList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaListPropertyValue":{"type":"object","description":"An area list property value containing areas in an array. The values are measured in SI (square meters).","properties":{"type":{"type":"string","enum":["areaList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumeListPropertyValue":{"type":"object","description":"A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volumeList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalMultiEnumPropertyValue":{"type":"object","description":"A multiple choice enumeration property value containing the IDs of the selected enum values in an array.","properties":{"type":{"type":"string","enum":["multiEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueIds"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueIds":{"type":"array","description":"A list of enumeration identifiers.","items":{"type":"object","properties":{"enumValueId":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["enumValueId"]}},"NormalIntegerListPropertyValue":{"type":"object","description":"An integer list property value containing integers in an array.","properties":{"type":{"type":"string","enum":["integerList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"integer"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthListPropertyValue":{"type":"object","description":"A length list property value containing length values in an array. The values are measured in SI (meters).","properties":{"type":{"type":"string","enum":["lengthList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringPropertyValue":{"type":"object","description":"A string property value containing a valid string.","properties":{"type":{"type":"string","enum":["string"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"string"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAnglePropertyValue":{"type":"object","description":"An angle property value containing a real angle. The value is measured in SI (radians).","properties":{"type":{"type":"string","enum":["angle"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthPropertyValue":{"type":"object","description":"A length property value containing a real length value. The value is measured in SI (meters).","properties":{"type":{"type":"string","enum":["length"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaPropertyValue":{"type":"object","description":"An area property value containing a real area. The value is measured in SI (square meters).","properties":{"type":{"type":"string","enum":["area"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringListPropertyValue":{"type":"object","description":"A string list property value containing strings in an array.","properties":{"type":{"type":"string","enum":["stringList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanListPropertyValue":{"type":"object","description":"A boolean list property value containing boolean values in an array.","properties":{"type":{"type":"string","enum":["booleanList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"boolean"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalNumberPropertyValue":{"type":"object","description":"A number property value containing a valid numeric value.","properties":{"type":{"type":"string","enum":["number"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumePropertyValue":{"type":"object","description":"A volume property value containing a real volume. The value is measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volume"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanPropertyValue":{"type":"object","description":"A boolean property value containing a valid boolean value.","properties":{"type":{"type":"string","enum":["boolean"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"boolean"}},"additionalProperties":false,"required":["type","status","value"]},"NormalIntegerPropertyValue":{"type":"object","description":"An integer property value containing a valid integer number.","properties":{"type":{"type":"string","enum":["integer"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"integer"}},"additionalProperties":false,"required":["type","status","value"]},"NotAvailablePropertyValue":{"type":"object","description":"A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["notAvailable"]}},"additionalProperties":false,"required":["type","status"]},"PossibleEnumValues":{"type":"array","description":"A list of enumeration values.","items":{"$ref":"#/$defs/PossibleEnumValuesArrayItem"},"additionalProperties":false},"PossibleEnumValuesArrayItem":{"type":"object","properties":{"enumValue":{"$ref":"#/$defs/PossibleEnumValue"}},"additionalProperties":false,"required":["enumValue"]},"PossibleEnumValue":{"type":"object","description":"The description of an enumeration value.","properties":{"enumValueId":{"$ref":"#/$defs/EnumValueId"},"displayValue":{"type":"string","description":"Displayed value of the enumeration."},"nonLocalizedValue":{"type":"string","description":"Nonlocalized value of the enumeration if there is one."}},"additionalProperties":false,"required":["enumValueId","displayValue"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetDetailsOfPropertiesResult"}')))
def test_get_details_of_properties_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_details_of_properties(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetDetailsOfProperties'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyDefinitions']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDocument3DNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetDocument3DNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDocument3DNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/Document3DNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"Document3DNavigatorItems":{"type":"array","description":"A list of 3D document navigator items.","items":{"$ref":"#/$defs/Document3DNavigatorItemOrError"}},"Document3DNavigatorItemOrError":{"type":"object","description":"Contains a 3D document navigator item or an error.","oneOf":[{"title":"Document3DNavigatorItem","properties":{"document3DNavigatorItem":{"$ref":"#/$defs/Document3DNavigatorItem"}},"additionalProperties":false,"required":["document3DNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"Document3DNavigatorItem":{"type":"object","description":"The details of a 3D document navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetDocument3DNavigatorItemsResult"}')))
def test_get_document_3d_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_document_3d_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetDocument3DNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsByClassificationParameters":{"type":"object","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"}},"additionalProperties":false,"required":["classificationItemId"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetElementsByClassificationParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsByClassificationResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetElementsByClassificationResult"}')))
def test_get_elements_by_classification_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementListingCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_elements_by_classification(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetElementsByClassification'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsByTypeParameters":{"type":"object","properties":{"elementType":{"$ref":"#/$defs/ElementType"}},"additionalProperties":false,"required":["elementType"]},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Zone","CurtainWall","Shell","Skylight","Morph","Stair","Railing","Opening"]}},"$ref":"#/$defs/GetElementsByTypeParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsByTypeResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetElementsByTypeResult"}')))
def test_get_elements_by_type_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementListingCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_elements_by_type(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetElementsByType'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsRelatedToZonesParameters":{"type":"object","properties":{"zones":{"$ref":"#/$defs/Elements"},"elementTypes":{"description":"If this parameter is given, then only related elements with the requested types will be listed.","$ref":"#/$defs/ElementTypes"}},"additionalProperties":false,"required":["zones"]},"ElementTypes":{"type":"array","description":"A list of element types.","items":{"$ref":"#/$defs/ElementType"}},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Zone","CurtainWall","Shell","Skylight","Morph","Stair","Railing","Opening"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetElementsRelatedToZonesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsRelatedToZonesResult":{"type":"object","properties":{"elementsRelatedToZones":{"$ref":"#/$defs/ElementsOrErrorArray"}},"additionalProperties":false,"required":["elementsRelatedToZones"]},"ElementsOrErrorArray":{"type":"array","description":"A list of ElementsOrError items.","items":{"$ref":"#/$defs/ElementsOrError"}},"ElementsOrError":{"type":"object","description":"A list of elements or an error.","oneOf":[{"$ref":"#/$defs/ElementsWrapper"},{"$ref":"#/$defs/ErrorItem"}]},"ElementsWrapper":{"type":"object","description":"A wrapper for a list of elements.","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetElementsRelatedToZonesResult"}')))
def test_get_elements_related_to_zones_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementRelationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_elements_related_to_zones(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetElementsRelatedToZones'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elementsRelatedToZones']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElevationNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetElevationNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElevationNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/ElevationNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"ElevationNavigatorItems":{"type":"array","description":"A list of elevation navigator items.","items":{"$ref":"#/$defs/ElevationNavigatorItemOrError"}},"ElevationNavigatorItemOrError":{"type":"object","description":"Contains an elevation navigator item or an error.","oneOf":[{"title":"ElevationNavigatorItem","properties":{"elevationNavigatorItem":{"$ref":"#/$defs/ElevationNavigatorItem"}},"additionalProperties":false,"required":["elevationNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ElevationNavigatorItem":{"type":"object","description":"The details of an elevation navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetElevationNavigatorItemsResult"}')))
def test_get_elevation_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_elevation_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetElevationNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetFillAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetFillAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetFillAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/FillAttributes"}},"additionalProperties":false,"required":["attributes"]},"FillAttributes":{"type":"array","description":"A list of fill attributes and potential errors.","items":{"$ref":"#/$defs/FillAttributeOrError"}},"FillAttributeOrError":{"type":"object","description":"A fill attribute or an error.","oneOf":[{"title":"fillAttribute","properties":{"fillAttribute":{"$ref":"#/$defs/FillAttribute"}},"additionalProperties":false,"required":["fillAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"FillAttribute":{"type":"object","description":"A fill attribute.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"subType":{"$ref":"#/$defs/FillTypeId"},"pattern":{"$ref":"#/$defs/FillPattern"},"appearanceType":{"$ref":"#/$defs/AppearanceType"}},"additionalProperties":false,"required":["attributeId","name","subType","pattern","appearanceType"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"FillTypeId":{"type":"string","description":"The filling type of a fill attribute.","enum":["Vector","Symbol","Solid","Empty","LinearGradient","RadialGradient","Image"]},"AppearanceType":{"type":"string","description":"The appearance type of a line or fill attribute.","enum":["ScaleWithPlan","ScaleIndependent"]},"FillPattern":{"type":"integer","description":"The pattern of the fill attribute, stored in a 64 bit unsigned integer, and represented as an 8x8 matrix. Each byte in the value is a row, and the bits are the columns of the matrix."}},"$ref":"#/$defs/GetFillAttributesResult"}')))
def test_get_fill_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_fill_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetFillAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetInteriorElevationNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetInteriorElevationNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetInteriorElevationNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/InteriorElevationNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"InteriorElevationNavigatorItems":{"type":"array","description":"A list of interior elevation navigator items.","items":{"$ref":"#/$defs/InteriorElevationNavigatorItemOrError"}},"InteriorElevationNavigatorItemOrError":{"type":"object","description":"Contains an interior elevation navigator item or an error.","oneOf":[{"title":"InteriorElevationNavigatorItem","properties":{"interiorElevationNavigatorItem":{"$ref":"#/$defs/InteriorElevationNavigatorItem"}},"additionalProperties":false,"required":["interiorElevationNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"InteriorElevationNavigatorItem":{"type":"object","description":"The details of an interior elevation navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetInteriorElevationNavigatorItemsResult"}')))
def test_get_interior_elevation_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_interior_elevation_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetInteriorElevationNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLayerAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetLayerAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLayerAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/LayerAttributes"}},"additionalProperties":false,"required":["attributes"]},"LayerAttributes":{"type":"array","description":"A list of layer attributes and potential errors.","items":{"$ref":"#/$defs/LayerAttributeOrError"}},"LayerAttributeOrError":{"type":"object","description":"A layer attribute or an error.","oneOf":[{"title":"layerAttribute","properties":{"layerAttribute":{"$ref":"#/$defs/LayerAttribute"}},"additionalProperties":false,"required":["layerAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"LayerAttribute":{"type":"object","description":"A layer attribute","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"intersectionGroupNr":{"type":"integer","description":"The intersection group number"},"isLocked":{"type":"boolean","description":"Defines whether the layer is locked or not."},"isHidden":{"type":"boolean","description":"Defines whether the layer is hidden or not."},"isWireframe":{"type":"boolean","description":"Defines whether the elements placed on this layer are visible as wireframes or a solid model."}},"additionalProperties":false,"required":["attributeId","name","intersectionGroupNr","isLocked","isHidden","isWireframe"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetLayerAttributesResult"}')))
def test_get_layer_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_layer_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetLayerAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLayerCombinationAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetLayerCombinationAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLayerCombinationAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/LayerCombinationAttributes"}},"additionalProperties":false,"required":["attributes"]},"LayerCombinationAttributes":{"type":"array","description":"A list of layer combination attributes and potential errors.","items":{"$ref":"#/$defs/LayerCombinationAttributeOrError"}},"LayerCombinationAttributeOrError":{"type":"object","description":"A layer combination attribute or an error.","oneOf":[{"title":"LayerCombinationAttribute","properties":{"layerCombinationAttribute":{"$ref":"#/$defs/LayerCombinationAttribute"}},"additionalProperties":false,"required":["layerCombinationAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"LayerCombinationAttribute":{"type":"object","description":"A layer combination attribute","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"layerAttributeIds":{"description":"The list of identifiers belonging to the layer attributes referenced in this layer combination.","$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeId","name","layerAttributeIds"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetLayerCombinationAttributesResult"}')))
def test_get_layer_combination_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_layer_combination_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetLayerCombinationAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLayoutSettingsParameters":{"type":"object","properties":{"layoutNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["layoutNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetLayoutSettingsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLayoutSettingsResult":{"type":"object","properties":{"layoutParameters":{"$ref":"#/$defs/LayoutParameters"}},"additionalProperties":false,"required":["layoutParameters"]},"LayoutParameters":{"type":"object","description":"The parameters of the layout.","properties":{"horizontalSize":{"type":"number","description":"The horizontal size of the layout in millimeters."},"verticalSize":{"type":"number","description":"The vertical size of the layout in millimeters."},"leftMargin":{"type":"number","description":"The layout margin from the left side of the paper."},"topMargin":{"type":"number","description":"The layout margin from the top side of the paper."},"rightMargin":{"type":"number","description":"The layout margin from the right side of the paper."},"bottomMargin":{"type":"number","description":"The layout margin from the bottom side of the paper."},"customLayoutNumber":{"type":"string","description":"The custom ID."},"customLayoutNumbering":{"type":"boolean","description":"Defines whether a unique ID is used for the current layout or not."},"doNotIncludeInNumbering":{"type":"boolean","description":"Defines whether this layout is included in automatic ID assignment or not."},"displayMasterLayoutBelow":{"type":"boolean","description":"Defines whether to display the master layout above or below the layout."},"layoutPageNumber":{"type":"integer","description":"The page number of layout when this layout contains multi-page drawings."},"actPageIndex":{"type":"integer","description":"The actual index of layout inside the multi-page layout."},"currentRevisionId":{"type":"string","description":"The ID of the current document revision of the layout."},"currentFinalRevisionId":{"type":"string","description":"The ID with optional suffix of the current document revision of the layout."},"hasIssuedRevision":{"type":"boolean","description":"Defines whether one or more issued document revisions have already been created for the layout or not."},"hasActualRevision":{"type":"boolean","description":"Defines whether an open document revision exists for the layout or not."}},"additionalProperties":false,"required":["horizontalSize","verticalSize","leftMargin","topMargin","rightMargin","bottomMargin","customLayoutNumber","customLayoutNumbering","doNotIncludeInNumbering","displayMasterLayoutBelow","layoutPageNumber","actPageIndex","currentRevisionId","currentFinalRevisionId","hasIssuedRevision","hasActualRevision"]}},"$ref":"#/$defs/GetLayoutSettingsResult"}')))
def test_get_layout_settings_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialLayoutBookCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_layout_settings(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetLayoutSettings'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['layoutParameters']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLineAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetLineAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLineAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/LineAttributes"}},"additionalProperties":false,"required":["attributes"]},"LineAttributes":{"type":"array","description":"A list of line attributes and potential errors.","items":{"$ref":"#/$defs/LineAttributeOrError"}},"LineAttributeOrError":{"type":"object","description":"A line attribute or an error.","oneOf":[{"title":"LineAttribute","properties":{"lineAttribute":{"$ref":"#/$defs/LineAttribute"}},"additionalProperties":false,"required":["lineAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"LineAttribute":{"type":"object","description":"A line attribute","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"appearanceType":{"$ref":"#/$defs/AppearanceType"},"displayScale":{"type":"number","description":"The original scale of the line."},"period":{"type":"number","description":"The length of the dashed or symbol line\'s period."},"height":{"type":"number","description":"The height of the symbol line."},"lineType":{"$ref":"#/$defs/LineType"},"lineItems":{"$ref":"#/$defs/LineItems"}},"additionalProperties":false,"required":["attributeId","name","appearanceType","displayScale","period","height","lineType"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"LineType":{"type":"string","description":"The type of a line attribute.","enum":["SolidLine","DashedLine","SymbolLine"]},"LineItems":{"type":"array","description":"A list of dash or line items.","items":{"$ref":"#/$defs/DashOrLineItem"}},"DashOrLineItem":{"type":"object","description":"A dash or line item.","oneOf":[{"title":"DashItem","properties":{"dashItem":{"$ref":"#/$defs/DashItem"}},"additionalProperties":false,"required":["dashItem"]},{"title":"LineItem","properties":{"lineItem":{"$ref":"#/$defs/LineItem"}},"additionalProperties":false,"required":["lineItem"]}]},"DashItem":{"type":"object","description":"A dash item.","properties":{"dash":{"type":"number","description":"The length of the dash."},"gap":{"type":"number","description":"The length of the gap."}},"additionalProperties":false,"required":["dash","gap"]},"LineItem":{"type":"object","description":"A line item.","properties":{"lineItemType":{"$ref":"#/$defs/LineItemType"},"centerOffset":{"type":"number","description":"The vertical distance from the origin of the symbol line. Used in separator, center dot, and centerline item types."},"length":{"type":"number","description":"The length of the item. Used in centerline, right angle, and parallel item types."},"begPosition":{"$ref":"#/$defs/Point2D","description":"The beginning position of the item. Used in dot, right angle, parallel, line, circle, and arc item types."},"endPosition":{"$ref":"#/$defs/Point2D","description":"The end position of the item. Used in line item type."},"radius":{"type":"number","description":"The radius of the item. Used in circle and arc item types."},"begAngle":{"type":"number","description":"The beginning angle of the item, measured from the vertical axis. Used in the arc item type."},"endAngle":{"type":"number","description":"The ending angle of the item, measured from the vertical axis. Used in the arc item type."}},"additionalProperties":false,"required":["lineItemType","centerOffset","length","begPosition","endPosition","radius","begAngle","endAngle"]},"LineItemType":{"type":"string","description":"The type of a line item.","enum":["IllegalItemType","SeparatorItemType","CenterDotItemType","CenterLineItemType","DotItemType","RightAngleItemType","ParallelItemType","LineItemType","CircItemType","ArcItemType"]},"Point2D":{"type":"object","description":"Coordinates of a 2D point","properties":{"x":{"type":"number","description":"X coordinate of 2D point"},"y":{"type":"number","description":"Y coordinate of 2D point"}},"additionalProperties":false,"required":["x","y"]},"AppearanceType":{"type":"string","description":"The appearance type of a line or fill attribute.","enum":["ScaleWithPlan","ScaleIndependent"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetLineAttributesResult"}')))
def test_get_line_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_line_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetLineAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetNavigatorItemTreeParameters":{"type":"object","properties":{"navigatorTreeId":{"$ref":"#/$defs/NavigatorTreeId"}},"additionalProperties":false,"required":["navigatorTreeId"]},"NavigatorTreeId":{"type":"object","description":"The identifier of a navigator item tree.","oneOf":[{"$ref":"#/$defs/PublisherSetId"},{"$ref":"#/$defs/OtherNavigatorTreeId"}]},"PublisherSetId":{"type":"object","description":"The identifier of a publisher set.","properties":{"type":{"type":"string","description":"The type of the navigator item tree.","enum":["PublisherSets"]},"name":{"type":"string","description":"The name of the publisher set."}},"additionalProperties":false,"required":["type","name"]},"OtherNavigatorTreeId":{"type":"object","description":"The identifier of a navigator item tree.","properties":{"type":{"$ref":"#/$defs/NavigatorItemMapType"}},"additionalProperties":false,"required":["type"]},"NavigatorItemMapType":{"type":"string","description":"The type of the navigator item tree.","enum":["ProjectMap","ViewMap","MyViewMap","LayoutBook"]}},"$ref":"#/$defs/GetNavigatorItemTreeParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetNavigatorItemTreeResult":{"type":"object","properties":{"navigatorTree":{"$ref":"#/$defs/NavigatorTree"}},"additionalProperties":false,"required":["navigatorTree"]},"NavigatorTree":{"type":"object","description":"A tree of navigator items.","properties":{"rootItem":{"$ref":"#/$defs/NavigatorItem"}},"additionalProperties":false,"required":["rootItem"]},"NavigatorItem":{"type":"object","description":"The details of a navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."},"type":{"$ref":"#/$defs/NavigatorItemType","description":"The type of the navigator item."},"sourceNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId","description":"The source of the navigator item. For example, a navigator item in the ViewMap can be the source of a DrawingItem."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name","type"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"NavigatorItemType":{"type":"string","description":"The type of a navigator item. The \'UndefinedItem\' type is used when the actual type of the navigator item cannot be retrieved from Archicad.","enum":["UndefinedItem","ProjectMapRootItem","StoryItem","SectionItem","ElevationItem","InteriorElevationItem","WorksheetItem","DetailItem","DocumentFrom3DItem","Perspective3DItem","Axonometry3DItem","CameraSetItem","CameraItem","ScheduleItem","ProjectIndexItem","TextListItem","GraphicListItem","InfoItem","HelpItem","FolderItem","LayoutBookRootItem","SubsetItem","LayoutItem","DrawingItem","MasterFolderItem","MasterLayoutItem"]}},"$ref":"#/$defs/GetNavigatorItemTreeResult"}')))
def test_get_navigator_item_tree_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_navigator_item_tree(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetNavigatorItemTree'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorTree']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetNavigatorItemsTypeParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetNavigatorItemsTypeParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetNavigatorItemsTypeResult":{"type":"object","properties":{"navigatorItemIdAndTypeList":{"$ref":"#/$defs/NavigatorItemIdAndTypeList"}},"additionalProperties":false,"required":["navigatorItemIdAndTypeList"]},"NavigatorItemIdAndTypeList":{"type":"array","description":"A list of objects that consist of a navigator item identifier and a type.","items":{"$ref":"#/$defs/NavigatorItemIdAndTypeOrError"}},"NavigatorItemIdAndTypeOrError":{"type":"object","description":"Contains a pair of navigator item type and identifier or an error.","oneOf":[{"title":"NavigatorItemIdAndType","properties":{"navigatorItemIdAndType":{"$ref":"#/$defs/NavigatorItemIdAndType"}},"additionalProperties":false,"required":["navigatorItemIdAndType"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"NavigatorItemIdAndType":{"type":"object","description":"Consists of a navigator item type and an identifier.","properties":{"navigatorItemType":{"$ref":"#/$defs/NavigatorItemType"},"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemType","navigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"NavigatorItemType":{"type":"string","description":"The type of a navigator item. The \'UndefinedItem\' type is used when the actual type of the navigator item cannot be retrieved from Archicad.","enum":["UndefinedItem","ProjectMapRootItem","StoryItem","SectionItem","ElevationItem","InteriorElevationItem","WorksheetItem","DetailItem","DocumentFrom3DItem","Perspective3DItem","Axonometry3DItem","CameraSetItem","CameraItem","ScheduleItem","ProjectIndexItem","TextListItem","GraphicListItem","InfoItem","HelpItem","FolderItem","LayoutBookRootItem","SubsetItem","LayoutItem","DrawingItem","MasterFolderItem","MasterLayoutItem"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetNavigatorItemsTypeResult"}')))
def test_get_navigator_items_type_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_navigator_items_type(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetNavigatorItemsType'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItemIdAndTypeList']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPenTableAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetPenTableAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPenTableAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/PenTableAttributes"}},"additionalProperties":false,"required":["attributes"]},"PenTableAttributes":{"type":"array","description":"A list of pen table attributes and potential errors.","items":{"$ref":"#/$defs/PenTableAttributeOrError"}},"PenTableAttributeOrError":{"type":"object","description":"A pen table attribute or an error.","oneOf":[{"title":"penTableAttribute","properties":{"penTableAttribute":{"$ref":"#/$defs/PenTableAttribute"}},"additionalProperties":false,"required":["penTableAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PenTableAttribute":{"type":"object","description":"A pen table attribute.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"pens":{"$ref":"#/$defs/Pens"}},"additionalProperties":false,"required":["attributeId","name","pens"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"Pens":{"type":"array","description":"A collection of pens in a pen table.","items":{"$ref":"#/$defs/PenArrayItem"}},"PenArrayItem":{"type":"object","properties":{"pen":{"$ref":"#/$defs/Pen"}},"additionalProperties":false,"required":["pen"]},"Pen":{"type":"object","description":"A pen attribute.","properties":{"index":{"$ref":"#/$defs/PenIndex","description":"The index of the pen."},"color":{"$ref":"#/$defs/RGBColor","description":"The color of the pen."},"weight":{"type":"number","description":"The thickness of the pen defined in millimeters.","minimum":0},"description":{"type":"string","description":"The description of the pen."}},"additionalProperties":false,"required":["index","color","weight","description"]},"RGBColor":{"type":"object","description":"A color model represented via its red, green and blue components.","properties":{"red":{"type":"number","description":"The red component of the color model.","minimum":0,"maximum":1},"green":{"type":"number","description":"The green component of the color model.","minimum":0,"maximum":1},"blue":{"type":"number","description":"The blue component of the color model.","minimum":0,"maximum":1}},"additionalProperties":false,"required":["red","green","blue"]},"PenIndex":{"type":"integer","description":"The index number of a pen.","minimum":0,"maximum":255},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPenTableAttributesResult"}')))
def test_get_pen_table_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_pen_table_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetPenTableAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetProfileAttributePreviewParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"},"imageWidth":{"type":"integer","description":"The width of the preview image."},"imageHeight":{"type":"integer","description":"The height of the preview image."},"backgroundColor":{"$ref":"#/$defs/RGBColor","description":"The background color of the preview image."}},"additionalProperties":false,"required":["attributeIds","imageWidth","imageHeight"]},"RGBColor":{"type":"object","description":"A color model represented via its red, green and blue components.","properties":{"red":{"type":"number","description":"The red component of the color model.","minimum":0,"maximum":1},"green":{"type":"number","description":"The green component of the color model.","minimum":0,"maximum":1},"blue":{"type":"number","description":"The blue component of the color model.","minimum":0,"maximum":1}},"additionalProperties":false,"required":["red","green","blue"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetProfileAttributePreviewParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetProfileAttributePreviewResult":{"type":"object","properties":{"previewImages":{"$ref":"#/$defs/Images","description":"The preview images of the profiles."}},"additionalProperties":false,"required":["previewImages"]},"Images":{"type":"array","description":"A list of images and potential errors.","items":{"$ref":"#/$defs/ImageOrError"}},"ImageOrError":{"type":"object","description":"An image or an error.","oneOf":[{"title":"image","properties":{"image":{"$ref":"#/$defs/Image"}},"additionalProperties":false,"required":["image"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"Image":{"type":"object","description":"An image encoded as a Base64 string.","properties":{"content":{"type":"string","description":"The image content as a string ."}},"additionalProperties":false,"required":["content"]}},"$ref":"#/$defs/GetProfileAttributePreviewResult"}')))
def test_get_profile_attribute_preview_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_profile_attribute_preview(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetProfileAttributePreview'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['previewImages']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetProfileAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetProfileAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetProfileAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/ProfileAttributes"}},"additionalProperties":false,"required":["attributes"]},"ProfileAttributes":{"type":"array","description":"A list of the profile attributes and potential errors.","items":{"$ref":"#/$defs/ProfileAttributeOrError"}},"ProfileAttributeOrError":{"type":"object","description":"A profile attribute or an error.","oneOf":[{"title":"profileAttribute","properties":{"profileAttribute":{"$ref":"#/$defs/ProfileAttribute"}},"additionalProperties":false,"required":["profileAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ProfileAttribute":{"type":"object","description":"A profile attribute.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"useWith":{"$ref":"#/$defs/ElementTypes","description":"The list of element types for which this profile is available."},"width":{"type":"number","description":"The default width (horizontal size) of the profile."},"height":{"type":"number","description":"The default height (vertical size) of the profile."},"minimumWidth":{"type":"number","description":"The minimum width (horizontal size) of the profile."},"minimumHeight":{"type":"number","description":"The minimum height (vertical size) of the profile."},"widthStretchable":{"type":"boolean","description":"Defines whether the profile\'s width can be increased beyond its default value or not."},"heightStretchable":{"type":"boolean","description":"Defines whether the profile\'s height can be increased beyond its default value or not."},"hasCoreSkin":{"type":"boolean","description":"Defines whether the profile has a core skin or not."},"profileModifiers":{"$ref":"#/$defs/ProfileModifierList"}},"additionalProperties":false,"required":["attributeId","name","useWith","width","height","minimumWidth","minimumHeight","widthStretchable","heightStretchable","hasCoreSkin","profileModifiers"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementTypes":{"type":"array","description":"A list of element types.","items":{"$ref":"#/$defs/ElementType"}},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Zone","CurtainWall","Shell","Skylight","Morph","Stair","Railing","Opening"]},"ProfileModifierList":{"type":"array","description":"A list of profile modifiers.","items":{"$ref":"#/$defs/ProfileModifierListItem"}},"ProfileModifierListItem":{"type":"object","properties":{"profileModifier":{"$ref":"#/$defs/ProfileModifier"}},"additionalProperties":false,"required":["profileModifier"]},"ProfileModifier":{"type":"object","description":"A profile modifier parameter.","properties":{"name":{"type":"string","description":"The name of the modifier."},"value":{"type":"number","description":"The value of the modifier."}},"additionalProperties":false,"required":["name","value"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetProfileAttributesResult"}')))
def test_get_profile_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_profile_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetProfileAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyDefinitionAvailabilityParameters":{"type":"object","properties":{"propertyIds":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["propertyIds"]},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetPropertyDefinitionAvailabilityParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyDefinitionAvailabilityResult":{"type":"object","properties":{"propertyDefinitionAvailabilityList":{"$ref":"#/$defs/PropertyDefinitionAvailabilityList"}},"additionalProperties":false,"required":["propertyDefinitionAvailabilityList"]},"PropertyDefinitionAvailabilityList":{"type":"array","description":"A list of classification item avalabilities.","items":{"$ref":"#/$defs/PropertyDefinitionAvailabilityOrError"}},"PropertyDefinitionAvailabilityOrError":{"type":"object","description":"Contains the ids of classification items the given property definiton is available for or error.","oneOf":[{"title":"propertyAvailability","properties":{"propertyDefinitionAvailability":{"$ref":"#/$defs/PropertyDefinitionAvailability"}},"additionalProperties":false,"required":["propertyDefinitionAvailability"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyDefinitionAvailability":{"type":"object","description":"Contains the ids of classification items the given property definiton is available for.","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"},"availableClassifications":{"$ref":"#/$defs/ClassificationItemIds"}},"additionalProperties":false,"required":["propertyId","availableClassifications"]},"ClassificationItemIds":{"type":"array","description":"A list of classification item identifiers.","items":{"$ref":"#/$defs/ClassificationItemIdArrayItem"}},"ClassificationItemIdArrayItem":{"type":"object","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"}},"additionalProperties":false,"required":["classificationItemId"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPropertyDefinitionAvailabilityResult"}')))
def test_get_property_definition_availability_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_property_definition_availability(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetPropertyDefinitionAvailability'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyDefinitionAvailabilityList']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyGroupsParameters":{"type":"object","properties":{"propertyGroupIds":{"$ref":"#/$defs/PropertyGroupIds"}},"additionalProperties":false,"required":["propertyGroupIds"]},"PropertyGroupIds":{"type":"array","description":"A list of property group identifiers.","items":{"$ref":"#/$defs/PropertyGroupIdArrayItem"}},"PropertyGroupIdArrayItem":{"type":"object","properties":{"propertyGroupId":{"$ref":"#/$defs/PropertyGroupId"}},"additionalProperties":false,"required":["propertyGroupId"]},"PropertyGroupId":{"type":"object","description":"The identifier of a property group.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetPropertyGroupsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyGroupsResult":{"type":"object","properties":{"propertyGroups":{"$ref":"#/$defs/PropertyGroupsOrErrors"}},"additionalProperties":false,"required":["propertyGroups"]},"PropertyGroupsOrErrors":{"type":"array","description":"A list of property groups or errors.","items":{"$ref":"#/$defs/PropertyGroupOrError"}},"PropertyGroupOrError":{"type":"object","description":"A property group or an error.","oneOf":[{"title":"propertyGroup","properties":{"propertyGroup":{"$ref":"#/$defs/PropertyGroup"}},"additionalProperties":false,"required":["propertyGroup"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyGroup":{"type":"object","description":"A property group.","properties":{"propertyGroupId":{"$ref":"#/$defs/PropertyGroupId"},"name":{"type":"string","description":"The property group name."}},"additionalProperties":false,"required":["propertyGroupId","name"]},"PropertyGroupId":{"type":"object","description":"The identifier of a property group.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPropertyGroupsResult"}')))
def test_get_property_groups_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_property_groups(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetPropertyGroups'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyGroups']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyIdsParameters":{"type":"object","properties":{"properties":{"description":"List of property names whose ids are requested.","$ref":"#/$defs/PropertyUserIds"}},"additionalProperties":false,"required":["properties"]},"PropertyUserIds":{"type":"array","description":"A list of PropertyUserId objects.","items":{"$ref":"#/$defs/PropertyUserId"}},"PropertyUserId":{"type":"object","description":"The unique identifier of a Property, identified by its name. May represent a User-Defined or a Built-In Property.","oneOf":[{"$ref":"#/$defs/UserDefinedPropertyUserId"},{"$ref":"#/$defs/BuiltInPropertyUserId"}]},"BuiltInPropertyUserId":{"type":"object","description":"The unique identifier of a Built-In Property, identified by its name.","properties":{"type":{"type":"string","enum":["BuiltIn"]},"nonLocalizedName":{"type":"string","description":"The non-localized name of the Built-In Property."}},"additionalProperties":false,"required":["type","nonLocalizedName"]},"UserDefinedPropertyUserId":{"type":"object","description":"The unique identifier of a User-Defined Property, identified by its name.","properties":{"type":{"type":"string","enum":["UserDefined"]},"localizedName":{"type":"array","description":"A two-element list of the localized name parts. The first element is the name of the group the property belongs to, and the second element is the actual name of the property.","items":{"type":"string"},"minItems":2,"maxItems":2}},"additionalProperties":false,"required":["type","localizedName"]}},"$ref":"#/$defs/GetPropertyIdsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyIdsResult":{"type":"object","properties":{"properties":{"description":"List of the ids of the requested properties. Order of the ids are the same as in the input. Existing properties are represented by propertyId objects, non-existing properties are represented by error objects.","$ref":"#/$defs/PropertyIdsOrErrors"}},"additionalProperties":false,"required":["properties"]},"PropertyIdsOrErrors":{"type":"array","description":"A list of property identifiers or errors.","items":{"$ref":"#/$defs/PropertyIdOrError"}},"PropertyIdOrError":{"type":"object","description":"A property identifier or an error.","oneOf":[{"title":"propertyId","$ref":"#/$defs/PropertyIdArrayItem"},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPropertyIdsResult"}')))
def test_get_property_ids_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_property_ids(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetPropertyIds'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['properties']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfElementComponentsParameters":{"type":"object","properties":{"elementComponents":{"$ref":"#/$defs/ElementComponents"},"properties":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["elementComponents","properties"]},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementComponents":{"type":"array","description":"List of components of elements.","items":{"$ref":"#/$defs/ElementComponentIdArrayItem"}},"ElementComponentIdArrayItem":{"type":"object","description":"An item of a component array.","properties":{"elementComponentId":{"$ref":"#/$defs/ElementComponentId"}},"additionalProperties":false,"required":["elementComponentId"]},"ElementComponentId":{"type":"object","description":"The identifier of an element\'s component.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"componentId":{"$ref":"#/$defs/ComponentId"}},"additionalProperties":false,"required":["elementId","componentId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ComponentId":{"type":"object","description":"The identifier of a component.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetPropertyValuesOfElementComponentsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfElementComponentsResult":{"type":"object","properties":{"propertyValuesForElementComponents":{"$ref":"#/$defs/PropertyValuesOrErrorArray","description":"List of property value lists. The order of the outer list is that of the given components. The order of the inner lists are that of the given properties."}},"additionalProperties":false,"required":["propertyValuesForElementComponents"]},"PropertyValuesOrErrorArray":{"type":"array","description":"A list of property value lists.","items":{"$ref":"#/$defs/PropertyValuesOrError"}},"PropertyValuesOrError":{"type":"object","description":"A list of property values or an error.","oneOf":[{"title":"propertyValues","properties":{"propertyValues":{"$ref":"#/$defs/PropertyValues"}},"additionalProperties":false,"required":["propertyValues"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyValues":{"type":"array","description":"A list of property values.","items":{"$ref":"#/$defs/PropertyValueOrErrorItem"}},"PropertyValueOrErrorItem":{"type":"object","description":"A property value or an error","oneOf":[{"title":"propertyValue","properties":{"propertyValue":{"$ref":"#/$defs/PropertyValue"}},"additionalProperties":false,"required":["propertyValue"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyValue":{"type":"object","description":"A normal, userUndefined, notAvailable or notEvaluated property value.","oneOf":[{"$ref":"#/$defs/NormalOrUserUndefinedPropertyValue"},{"$ref":"#/$defs/NotAvailablePropertyValue"},{"$ref":"#/$defs/NotEvaluatedPropertyValue"}]},"NotEvaluatedPropertyValue":{"type":"object","description":"A notEvaluated value means that the property could not be evaluated for the property owner for some reason.","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["notEvaluated"]}},"additionalProperties":false,"required":["type","status"]},"PropertyValueType":{"type":"string","enum":["number","integer","string","boolean","length","area","volume","angle","numberList","integerList","stringList","booleanList","lengthList","areaList","volumeList","angleList","singleEnum","multiEnum"]},"NormalOrUserUndefinedPropertyValue":{"type":"object","description":"A normal or a userUndefined property value.","oneOf":[{"$ref":"#/$defs/NormalNumberPropertyValue"},{"$ref":"#/$defs/NormalIntegerPropertyValue"},{"$ref":"#/$defs/NormalStringPropertyValue"},{"$ref":"#/$defs/NormalBooleanPropertyValue"},{"$ref":"#/$defs/NormalLengthPropertyValue"},{"$ref":"#/$defs/NormalAreaPropertyValue"},{"$ref":"#/$defs/NormalVolumePropertyValue"},{"$ref":"#/$defs/NormalAnglePropertyValue"},{"$ref":"#/$defs/NormalNumberListPropertyValue"},{"$ref":"#/$defs/NormalIntegerListPropertyValue"},{"$ref":"#/$defs/NormalStringListPropertyValue"},{"$ref":"#/$defs/NormalBooleanListPropertyValue"},{"$ref":"#/$defs/NormalLengthListPropertyValue"},{"$ref":"#/$defs/NormalAreaListPropertyValue"},{"$ref":"#/$defs/NormalVolumeListPropertyValue"},{"$ref":"#/$defs/NormalAngleListPropertyValue"},{"$ref":"#/$defs/NormalSingleEnumPropertyValue"},{"$ref":"#/$defs/NormalMultiEnumPropertyValue"},{"$ref":"#/$defs/UserUndefinedPropertyValue"}]},"NormalNumberListPropertyValue":{"type":"object","description":"A number list property value containing numbers in an array.","properties":{"type":{"type":"string","enum":["numberList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalSingleEnumPropertyValue":{"type":"object","description":"A single enumeration property value containing the ID of the selected enum value.","properties":{"type":{"type":"string","enum":["singleEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueId":{"type":"object","description":"The identifier of a property enumeration value.","oneOf":[{"$ref":"#/$defs/DisplayValueEnumId"},{"$ref":"#/$defs/NonLocalizedValueEnumId"}]},"DisplayValueEnumId":{"type":"object","description":"An enumeration value identifier using the displayed value.","properties":{"type":{"type":"string","enum":["displayValue"]},"displayValue":{"type":"string"}},"additionalProperties":false,"required":["type","displayValue"]},"NonLocalizedValueEnumId":{"type":"object","description":"An enumeration value identifier using the nonlocalized value.","properties":{"type":{"type":"string","enum":["nonLocalizedValue"]},"nonLocalizedValue":{"type":"string"}},"additionalProperties":false,"required":["type","nonLocalizedValue"]},"UserUndefinedPropertyValue":{"type":"object","description":"A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["userUndefined"]}},"additionalProperties":false,"required":["type","status"]},"NormalAngleListPropertyValue":{"type":"object","description":"An angle list property value containing angles in an array. The values are measured in SI (radians).","properties":{"type":{"type":"string","enum":["angleList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaListPropertyValue":{"type":"object","description":"An area list property value containing areas in an array. The values are measured in SI (square meters).","properties":{"type":{"type":"string","enum":["areaList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumeListPropertyValue":{"type":"object","description":"A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volumeList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalMultiEnumPropertyValue":{"type":"object","description":"A multiple choice enumeration property value containing the IDs of the selected enum values in an array.","properties":{"type":{"type":"string","enum":["multiEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueIds"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueIds":{"type":"array","description":"A list of enumeration identifiers.","items":{"type":"object","properties":{"enumValueId":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["enumValueId"]}},"NormalIntegerListPropertyValue":{"type":"object","description":"An integer list property value containing integers in an array.","properties":{"type":{"type":"string","enum":["integerList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"integer"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthListPropertyValue":{"type":"object","description":"A length list property value containing length values in an array. The values are measured in SI (meters).","properties":{"type":{"type":"string","enum":["lengthList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringPropertyValue":{"type":"object","description":"A string property value containing a valid string.","properties":{"type":{"type":"string","enum":["string"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"string"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAnglePropertyValue":{"type":"object","description":"An angle property value containing a real angle. The value is measured in SI (radians).","properties":{"type":{"type":"string","enum":["angle"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthPropertyValue":{"type":"object","description":"A length property value containing a real length value. The value is measured in SI (meters).","properties":{"type":{"type":"string","enum":["length"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaPropertyValue":{"type":"object","description":"An area property value containing a real area. The value is measured in SI (square meters).","properties":{"type":{"type":"string","enum":["area"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringListPropertyValue":{"type":"object","description":"A string list property value containing strings in an array.","properties":{"type":{"type":"string","enum":["stringList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanListPropertyValue":{"type":"object","description":"A boolean list property value containing boolean values in an array.","properties":{"type":{"type":"string","enum":["booleanList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"boolean"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalNumberPropertyValue":{"type":"object","description":"A number property value containing a valid numeric value.","properties":{"type":{"type":"string","enum":["number"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumePropertyValue":{"type":"object","description":"A volume property value containing a real volume. The value is measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volume"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanPropertyValue":{"type":"object","description":"A boolean property value containing a valid boolean value.","properties":{"type":{"type":"string","enum":["boolean"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"boolean"}},"additionalProperties":false,"required":["type","status","value"]},"NormalIntegerPropertyValue":{"type":"object","description":"An integer property value containing a valid integer number.","properties":{"type":{"type":"string","enum":["integer"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"integer"}},"additionalProperties":false,"required":["type","status","value"]},"NotAvailablePropertyValue":{"type":"object","description":"A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["notAvailable"]}},"additionalProperties":false,"required":["type","status"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPropertyValuesOfElementComponentsResult"}')))
def test_get_property_values_of_element_components_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialComponentCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_property_values_of_element_components(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetPropertyValuesOfElementComponents'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyValuesForElementComponents']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"properties":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["elements","properties"]},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetPropertyValuesOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfElementsResult":{"type":"object","properties":{"propertyValuesForElements":{"$ref":"#/$defs/PropertyValuesOrErrorArray","description":"List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."}},"additionalProperties":false,"required":["propertyValuesForElements"]},"PropertyValuesOrErrorArray":{"type":"array","description":"A list of property value lists.","items":{"$ref":"#/$defs/PropertyValuesOrError"}},"PropertyValuesOrError":{"type":"object","description":"A list of property values or an error.","oneOf":[{"title":"propertyValues","properties":{"propertyValues":{"$ref":"#/$defs/PropertyValues"}},"additionalProperties":false,"required":["propertyValues"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyValues":{"type":"array","description":"A list of property values.","items":{"$ref":"#/$defs/PropertyValueOrErrorItem"}},"PropertyValueOrErrorItem":{"type":"object","description":"A property value or an error","oneOf":[{"title":"propertyValue","properties":{"propertyValue":{"$ref":"#/$defs/PropertyValue"}},"additionalProperties":false,"required":["propertyValue"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"PropertyValue":{"type":"object","description":"A normal, userUndefined, notAvailable or notEvaluated property value.","oneOf":[{"$ref":"#/$defs/NormalOrUserUndefinedPropertyValue"},{"$ref":"#/$defs/NotAvailablePropertyValue"},{"$ref":"#/$defs/NotEvaluatedPropertyValue"}]},"NotEvaluatedPropertyValue":{"type":"object","description":"A notEvaluated value means that the property could not be evaluated for the property owner for some reason.","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["notEvaluated"]}},"additionalProperties":false,"required":["type","status"]},"PropertyValueType":{"type":"string","enum":["number","integer","string","boolean","length","area","volume","angle","numberList","integerList","stringList","booleanList","lengthList","areaList","volumeList","angleList","singleEnum","multiEnum"]},"NormalOrUserUndefinedPropertyValue":{"type":"object","description":"A normal or a userUndefined property value.","oneOf":[{"$ref":"#/$defs/NormalNumberPropertyValue"},{"$ref":"#/$defs/NormalIntegerPropertyValue"},{"$ref":"#/$defs/NormalStringPropertyValue"},{"$ref":"#/$defs/NormalBooleanPropertyValue"},{"$ref":"#/$defs/NormalLengthPropertyValue"},{"$ref":"#/$defs/NormalAreaPropertyValue"},{"$ref":"#/$defs/NormalVolumePropertyValue"},{"$ref":"#/$defs/NormalAnglePropertyValue"},{"$ref":"#/$defs/NormalNumberListPropertyValue"},{"$ref":"#/$defs/NormalIntegerListPropertyValue"},{"$ref":"#/$defs/NormalStringListPropertyValue"},{"$ref":"#/$defs/NormalBooleanListPropertyValue"},{"$ref":"#/$defs/NormalLengthListPropertyValue"},{"$ref":"#/$defs/NormalAreaListPropertyValue"},{"$ref":"#/$defs/NormalVolumeListPropertyValue"},{"$ref":"#/$defs/NormalAngleListPropertyValue"},{"$ref":"#/$defs/NormalSingleEnumPropertyValue"},{"$ref":"#/$defs/NormalMultiEnumPropertyValue"},{"$ref":"#/$defs/UserUndefinedPropertyValue"}]},"NormalNumberListPropertyValue":{"type":"object","description":"A number list property value containing numbers in an array.","properties":{"type":{"type":"string","enum":["numberList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalSingleEnumPropertyValue":{"type":"object","description":"A single enumeration property value containing the ID of the selected enum value.","properties":{"type":{"type":"string","enum":["singleEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueId":{"type":"object","description":"The identifier of a property enumeration value.","oneOf":[{"$ref":"#/$defs/DisplayValueEnumId"},{"$ref":"#/$defs/NonLocalizedValueEnumId"}]},"DisplayValueEnumId":{"type":"object","description":"An enumeration value identifier using the displayed value.","properties":{"type":{"type":"string","enum":["displayValue"]},"displayValue":{"type":"string"}},"additionalProperties":false,"required":["type","displayValue"]},"NonLocalizedValueEnumId":{"type":"object","description":"An enumeration value identifier using the nonlocalized value.","properties":{"type":{"type":"string","enum":["nonLocalizedValue"]},"nonLocalizedValue":{"type":"string"}},"additionalProperties":false,"required":["type","nonLocalizedValue"]},"UserUndefinedPropertyValue":{"type":"object","description":"A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["userUndefined"]}},"additionalProperties":false,"required":["type","status"]},"NormalAngleListPropertyValue":{"type":"object","description":"An angle list property value containing angles in an array. The values are measured in SI (radians).","properties":{"type":{"type":"string","enum":["angleList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaListPropertyValue":{"type":"object","description":"An area list property value containing areas in an array. The values are measured in SI (square meters).","properties":{"type":{"type":"string","enum":["areaList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumeListPropertyValue":{"type":"object","description":"A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volumeList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalMultiEnumPropertyValue":{"type":"object","description":"A multiple choice enumeration property value containing the IDs of the selected enum values in an array.","properties":{"type":{"type":"string","enum":["multiEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueIds"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueIds":{"type":"array","description":"A list of enumeration identifiers.","items":{"type":"object","properties":{"enumValueId":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["enumValueId"]}},"NormalIntegerListPropertyValue":{"type":"object","description":"An integer list property value containing integers in an array.","properties":{"type":{"type":"string","enum":["integerList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"integer"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthListPropertyValue":{"type":"object","description":"A length list property value containing length values in an array. The values are measured in SI (meters).","properties":{"type":{"type":"string","enum":["lengthList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringPropertyValue":{"type":"object","description":"A string property value containing a valid string.","properties":{"type":{"type":"string","enum":["string"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"string"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAnglePropertyValue":{"type":"object","description":"An angle property value containing a real angle. The value is measured in SI (radians).","properties":{"type":{"type":"string","enum":["angle"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthPropertyValue":{"type":"object","description":"A length property value containing a real length value. The value is measured in SI (meters).","properties":{"type":{"type":"string","enum":["length"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaPropertyValue":{"type":"object","description":"An area property value containing a real area. The value is measured in SI (square meters).","properties":{"type":{"type":"string","enum":["area"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringListPropertyValue":{"type":"object","description":"A string list property value containing strings in an array.","properties":{"type":{"type":"string","enum":["stringList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanListPropertyValue":{"type":"object","description":"A boolean list property value containing boolean values in an array.","properties":{"type":{"type":"string","enum":["booleanList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"boolean"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalNumberPropertyValue":{"type":"object","description":"A number property value containing a valid numeric value.","properties":{"type":{"type":"string","enum":["number"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumePropertyValue":{"type":"object","description":"A volume property value containing a real volume. The value is measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volume"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanPropertyValue":{"type":"object","description":"A boolean property value containing a valid boolean value.","properties":{"type":{"type":"string","enum":["boolean"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"boolean"}},"additionalProperties":false,"required":["type","status","value"]},"NormalIntegerPropertyValue":{"type":"object","description":"An integer property value containing a valid integer number.","properties":{"type":{"type":"string","enum":["integer"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"integer"}},"additionalProperties":false,"required":["type","status","value"]},"NotAvailablePropertyValue":{"type":"object","description":"A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["notAvailable"]}},"additionalProperties":false,"required":["type","status"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPropertyValuesOfElementsResult"}')))
def test_get_property_values_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_property_values_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetPropertyValuesOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyValuesForElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSectionNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetSectionNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSectionNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/SectionNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"SectionNavigatorItems":{"type":"array","description":"A list of section navigator items.","items":{"$ref":"#/$defs/SectionNavigatorItemOrError"}},"SectionNavigatorItemOrError":{"type":"object","description":"Contains a section navigator item or an error.","oneOf":[{"title":"SectionNavigatorItem","properties":{"sectionNavigatorItem":{"$ref":"#/$defs/SectionNavigatorItem"}},"additionalProperties":false,"required":["sectionNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"SectionNavigatorItem":{"type":"object","description":"The details of a section navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetSectionNavigatorItemsResult"}')))
def test_get_section_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_section_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetSectionNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSelectedElementsParameters":{"type":"object","properties":{"onlyEditable":{"type":"boolean","description":"Optional parameter that defines whether the selection list should include only the editable elements or all of them. The default value is FALSE"},"onlySupportedTypes":{"type":"boolean","description":"Optional parameter. When it is set to true, only elements with types that are supported by any other JSON API command will be returned."}},"additionalProperties":false}},"$ref":"#/$defs/GetSelectedElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSelectedElementsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetSelectedElementsResult"}')))
def test_get_selected_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementListingCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_selected_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetSelectedElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetStoryNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetStoryNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetStoryNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/StoryNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"StoryNavigatorItems":{"type":"array","description":"A list of story navigator items.","items":{"$ref":"#/$defs/StoryNavigatorItemOrError"}},"StoryNavigatorItemOrError":{"type":"object","description":"Contains a story navigator item or an error.","oneOf":[{"title":"StoryNavigatorItem","properties":{"storyNavigatorItem":{"$ref":"#/$defs/StoryNavigatorItem"}},"additionalProperties":false,"required":["storyNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"StoryNavigatorItem":{"type":"object","description":"The details of a story navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."},"floorLevel":{"type":"number","description":"The floor level of the story navigator item."},"floorNumber":{"type":"number","description":"The floor number of the story navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name","floorLevel","floorNumber"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetStoryNavigatorItemsResult"}')))
def test_get_story_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_story_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetStoryNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSurfaceAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetSurfaceAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSurfaceAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/SurfaceAttributes"}},"additionalProperties":false,"required":["attributes"]},"SurfaceAttributes":{"type":"array","description":"A list of surface attributes and potential errors.","items":{"$ref":"#/$defs/SurfaceAttributeOrError"}},"SurfaceAttributeOrError":{"type":"object","description":"A surface attribute or an error.","oneOf":[{"title":"surfaceAttribute","properties":{"surfaceAttribute":{"$ref":"#/$defs/SurfaceAttribute"}},"additionalProperties":false,"required":["surfaceAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"SurfaceAttribute":{"type":"object","description":"A surface attribute.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"materialType":{"$ref":"#/$defs/MaterialTypeId"},"ambientReflection":{"type":"integer","description":"The ambient reflection of the surface attribute.","minimum":0,"maximum":100},"diffuseReflection":{"type":"integer","description":"The diffuse reflection of the surface attribute.","minimum":0,"maximum":100},"specularReflection":{"type":"integer","description":"The specular reflection of the surface attribute.","minimum":0,"maximum":100},"transparencyAttenuation":{"type":"integer","description":"The transparency attenuation of the surface attribute.","minimum":0,"maximum":400},"emissionAttenuation":{"type":"integer","description":"The emission attenuation of the surface attribute.","minimum":0,"maximum":65535},"surfaceColor":{"$ref":"#/$defs/RGBColor","description":"The surface color of the surface attribute."},"specularColor":{"$ref":"#/$defs/RGBColor","description":"The specular color of the surface attribute."},"emissionColor":{"$ref":"#/$defs/RGBColor","description":"The emission color of the surface attribute."},"fillId":{"$ref":"#/$defs/AttributeIdOrError","description":"The identifier of the surface attribute\'s fill component."},"transparency":{"type":"integer","description":"The transparency of the surface attribute.","minimum":0,"maximum":100},"shine":{"type":"integer","description":"The shininess of the surface attribute.","minimum":0,"maximum":10000},"texture":{"$ref":"#/$defs/Texture","description":"The texture of the surface attribute."}},"additionalProperties":false,"required":["attributeId","name","materialType","ambientReflection","diffuseReflection","specularReflection","transparencyAttenuation","emissionAttenuation","surfaceColor","specularColor","emissionColor","fillId","transparency","shine"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"RGBColor":{"type":"object","description":"A color model represented via its red, green and blue components.","properties":{"red":{"type":"number","description":"The red component of the color model.","minimum":0,"maximum":1},"green":{"type":"number","description":"The green component of the color model.","minimum":0,"maximum":1},"blue":{"type":"number","description":"The blue component of the color model.","minimum":0,"maximum":1}},"additionalProperties":false,"required":["red","green","blue"]},"AttributeIdOrError":{"type":"object","description":"The attribute\'s identifier or an error.","oneOf":[{"title":"attributeId","$ref":"#/$defs/AttributeIdWrapperItem"},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"MaterialTypeId":{"type":"string","description":"The material type of a surface attribute.","enum":["General","Simple","Matte","Metal","Plastic","Glass","Glowing","Constant"]},"Texture":{"type":"object","description":"A texture","properties":{"name":{"type":"string","description":"The name of the texture."}},"additionalProperties":false,"required":["name"]}},"$ref":"#/$defs/GetSurfaceAttributesResult"}')))
def test_get_surface_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_surface_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetSurfaceAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetTypesOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetTypesOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetTypesOfElementsResult":{"type":"object","properties":{"typesOfElements":{"$ref":"#/$defs/TypeOfElementOrErrorList"}},"additionalProperties":false,"required":["typesOfElements"]},"TypeOfElementOrErrorList":{"type":"array","description":"A list of element types or errors.","items":{"$ref":"#/$defs/TypeOfElementOrError"}},"TypeOfElementOrError":{"type":"object","description":"The type of an element or an error.","oneOf":[{"title":"typeOfElement","properties":{"typeOfElement":{"$ref":"#/$defs/TypeOfElement"}},"additionalProperties":false,"required":["typeOfElement"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"TypeOfElement":{"type":"object","description":"An element id and its corresponding element type.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"elementType":{"$ref":"#/$defs/ElementType"}},"additionalProperties":false,"required":["elementId","elementType"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Zone","CurtainWall","Shell","Skylight","Morph","Stair","Railing","Opening"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetTypesOfElementsResult"}')))
def test_get_types_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementListingCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_types_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetTypesOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['typesOfElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetWorksheetNavigatorItemsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]}},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetWorksheetNavigatorItemsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetWorksheetNavigatorItemsResult":{"type":"object","properties":{"navigatorItems":{"$ref":"#/$defs/WorksheetNavigatorItems"}},"additionalProperties":false,"required":["navigatorItems"]},"WorksheetNavigatorItems":{"type":"array","description":"A list of worksheet navigator items.","items":{"$ref":"#/$defs/WorksheetNavigatorItemOrError"}},"WorksheetNavigatorItemOrError":{"type":"object","description":"Contains a worksheet navigator item or an error.","oneOf":[{"title":"WorksheetNavigatorItem","properties":{"worksheetNavigatorItem":{"$ref":"#/$defs/WorksheetNavigatorItem"}},"additionalProperties":false,"required":["worksheetNavigatorItem"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"WorksheetNavigatorItem":{"type":"object","description":"The details of a worksheet navigator item.","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"prefix":{"type":"string","description":"The prefix of the navigator item\'s name."},"name":{"type":"string","description":"The name of the navigator item."}},"additionalProperties":false,"required":["navigatorItemId","prefix","name"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetWorksheetNavigatorItemsResult"}')))
def test_get_worksheet_navigator_items_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_worksheet_navigator_items(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetWorksheetNavigatorItems'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['navigatorItems']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetZoneCategoryAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetZoneCategoryAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetZoneCategoryAttributesResult":{"type":"object","properties":{"attributes":{"$ref":"#/$defs/ZoneCategoryAttributes"}},"additionalProperties":false,"required":["attributes"]},"ZoneCategoryAttributes":{"type":"array","description":"A list of zone category attributes and potential errors.","items":{"$ref":"#/$defs/ZoneCategoryAttributeOrError"}},"ZoneCategoryAttributeOrError":{"type":"object","description":"A zone category attribute or an error.","oneOf":[{"title":"ZoneCategoryAttribute","properties":{"zoneCategoryAttribute":{"$ref":"#/$defs/ZoneCategoryAttribute"}},"additionalProperties":false,"required":["zoneCategoryAttribute"]},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"ZoneCategoryAttribute":{"type":"object","description":"A zone category.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"name":{"$ref":"#/$defs/AttributeName"},"categoryCode":{"type":"string","description":"The category code of the zone."},"stampName":{"type":"string","description":"The stamp name of the zone category."},"stampMainGuid":{"$ref":"#/$defs/Guid","description":"The main part of the stamp library part\'s unique identifier."},"stampRevisionGuid":{"$ref":"#/$defs/Guid","description":"The revision part of the stamp library part\'s unique identifier."},"color":{"$ref":"#/$defs/RGBColor"}},"additionalProperties":false,"required":["attributeId","name","categoryCode","stampName","stampMainGuid","stampRevisionGuid","color"]},"AttributeName":{"type":"string","description":"The name of an attribute.","minLength":1},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"RGBColor":{"type":"object","description":"A color model represented via its red, green and blue components.","properties":{"red":{"type":"number","description":"The red component of the color model.","minimum":0,"maximum":1},"green":{"type":"number","description":"The green component of the color model.","minimum":0,"maximum":1},"blue":{"type":"number","description":"The blue component of the color model.","minimum":0,"maximum":1}},"additionalProperties":false,"required":["red","green","blue"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetZoneCategoryAttributesResult"}')))
def test_get_zone_category_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_zone_category_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.GetZoneCategoryAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"IsAddOnCommandAvailableParameters":{"type":"object","properties":{"addOnCommandId":{"$ref":"#/$defs/AddOnCommandId"}},"additionalProperties":false,"required":["addOnCommandId"]},"AddOnCommandId":{"type":"object","description":"The identifier of an Add-On command.","properties":{"commandNamespace":{"type":"string","description":"The namespace of the Add-On command.","minLength":1},"commandName":{"type":"string","description":"The name of the Add-On command.","minLength":1}},"additionalProperties":false,"required":["commandNamespace","commandName"]}},"$ref":"#/$defs/IsAddOnCommandAvailableParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"IsAddOnCommandAvailableResult":{"type":"object","properties":{"available":{"type":"boolean","description":"Returns true if the command is available."}},"additionalProperties":false,"required":["available"]}},"$ref":"#/$defs/IsAddOnCommandAvailableResult"}')))
def test_is_add_on_command_available_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAddonCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.is_add_on_command_available(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.IsAddOnCommandAvailable'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['available']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"MoveAttributesAndFoldersParameters":{"type":"object","properties":{"attributeFolderIds":{"$ref":"#/$defs/AttributeFolderIds"},"attributeIds":{"$ref":"#/$defs/AttributeIds"},"targetFolderId":{"$ref":"#/$defs/AttributeFolderId"}},"additionalProperties":false,"required":["attributeFolderIds","attributeIds","targetFolderId"]},"AttributeIds":{"type":"array","description":"A list of attribute identifiers.","items":{"$ref":"#/$defs/AttributeIdWrapperItem"}},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"AttributeFolderId":{"type":"object","description":"The identifier of an attribute folder.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"AttributeFolderIds":{"type":"array","description":"A list of attribute folder identifiers.","items":{"$ref":"#/$defs/AttributeFolderIdWrapperItem"}},"AttributeFolderIdWrapperItem":{"type":"object","properties":{"attributeFolderId":{"$ref":"#/$defs/AttributeFolderId"}},"additionalProperties":false,"required":["attributeFolderId"]}},"$ref":"#/$defs/MoveAttributesAndFoldersParameters"}')))
def test_move_attributes_and_folders_logic(input_data: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.move_attributes_and_folders(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.MoveAttributesAndFolders'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"MoveNavigatorItemParameters":{"type":"object","properties":{"navigatorItemIdToMove":{"$ref":"#/$defs/NavigatorItemId"},"parentNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"previousNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemIdToMove","parentNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/MoveNavigatorItemParameters"}')))
def test_move_navigator_item_logic(input_data: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.move_navigator_item(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.MoveNavigatorItem'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"RenameAttributeFoldersParameters":{"type":"object","properties":{"attributeFolderParametersList":{"type":"array","items":{"$ref":"#/$defs/AttributeFolderRenameParameters"}}},"additionalProperties":false,"required":["attributeFolderParametersList"]},"AttributeFolderRenameParameters":{"type":"object","description":"Used to rename an attribute folder. The folder is identified by it\'s Id.","properties":{"attributeFolderId":{"$ref":"#/$defs/AttributeFolderId"},"newName":{"$ref":"#/$defs/AttributeFolderName"}},"additionalProperties":false,"required":["attributeFolderId","newName"]},"AttributeFolderId":{"type":"object","description":"The identifier of an attribute folder.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"AttributeFolderName":{"type":"string","description":"The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.","minLength":1}},"$ref":"#/$defs/RenameAttributeFoldersParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"RenameAttributeFoldersResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/RenameAttributeFoldersResult"}')))
def test_rename_attribute_folders_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.rename_attribute_folders(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.RenameAttributeFolders'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"RenameNavigatorItemParameters":{"oneOf":[{"title":"navigatorItemId and newName","type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"newName":{"description":"New name of the navigator item.","type":"string"}},"additionalProperties":false,"required":["navigatorItemId","newName"]},{"title":"navigatorItemId and newId","type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"newId":{"description":"New ID of the navigator item.","type":"string"}},"additionalProperties":false,"required":["navigatorItemId","newId"]},{"title":"navigatorItemId, newName and newId","type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"newName":{"description":"New name of the navigator item.","type":"string"},"newId":{"description":"New ID of the navigator item.","type":"string"}},"additionalProperties":false,"required":["navigatorItemId","newName","newId"]}]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/RenameNavigatorItemParameters"}')))
def test_rename_navigator_item_logic(input_data: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    if not kwargs.get('new_name') and not kwargs.get('new_id'): kwargs['new_name'] = 'default_name'
    result = command_group.rename_navigator_item(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.RenameNavigatorItem'
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetClassificationsOfElementsParameters":{"type":"object","properties":{"elementClassifications":{"$ref":"#/$defs/ElementClassifications"}},"additionalProperties":false,"required":["elementClassifications"]},"ElementClassifications":{"type":"array","description":"A list of element classification identifiers.","items":{"$ref":"#/$defs/ElementClassification"}},"ElementClassification":{"type":"object","description":"The classification of an element.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"classificationId":{"$ref":"#/$defs/ClassificationId"}},"additionalProperties":false,"required":["elementId","classificationId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ClassificationId":{"type":"object","description":"The element classification identifier.","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"},"classificationItemId":{"$ref":"#/$defs/ClassificationItemId","description":"The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/SetClassificationsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetClassificationsOfElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/SetClassificationsOfElementsResult"}')))
def test_set_classifications_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_classifications_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.SetClassificationsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetLayoutSettingsParameters":{"type":"object","properties":{"layoutParameters":{"$ref":"#/$defs/LayoutParameters"},"layoutNavigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["layoutParameters","layoutNavigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"LayoutParameters":{"type":"object","description":"The parameters of the layout.","properties":{"horizontalSize":{"type":"number","description":"The horizontal size of the layout in millimeters."},"verticalSize":{"type":"number","description":"The vertical size of the layout in millimeters."},"leftMargin":{"type":"number","description":"The layout margin from the left side of the paper."},"topMargin":{"type":"number","description":"The layout margin from the top side of the paper."},"rightMargin":{"type":"number","description":"The layout margin from the right side of the paper."},"bottomMargin":{"type":"number","description":"The layout margin from the bottom side of the paper."},"customLayoutNumber":{"type":"string","description":"The custom ID."},"customLayoutNumbering":{"type":"boolean","description":"Defines whether a unique ID is used for the current layout or not."},"doNotIncludeInNumbering":{"type":"boolean","description":"Defines whether this layout is included in automatic ID assignment or not."},"displayMasterLayoutBelow":{"type":"boolean","description":"Defines whether to display the master layout above or below the layout."},"layoutPageNumber":{"type":"integer","description":"The page number of layout when this layout contains multi-page drawings."},"actPageIndex":{"type":"integer","description":"The actual index of layout inside the multi-page layout."},"currentRevisionId":{"type":"string","description":"The ID of the current document revision of the layout."},"currentFinalRevisionId":{"type":"string","description":"The ID with optional suffix of the current document revision of the layout."},"hasIssuedRevision":{"type":"boolean","description":"Defines whether one or more issued document revisions have already been created for the layout or not."},"hasActualRevision":{"type":"boolean","description":"Defines whether an open document revision exists for the layout or not."}},"additionalProperties":false,"required":["horizontalSize","verticalSize","leftMargin","topMargin","rightMargin","bottomMargin","customLayoutNumber","customLayoutNumbering","doNotIncludeInNumbering","displayMasterLayoutBelow","layoutPageNumber","actPageIndex","currentRevisionId","currentFinalRevisionId","hasIssuedRevision","hasActualRevision"]}},"$ref":"#/$defs/SetLayoutSettingsParameters"}')))
def test_set_layout_settings_logic(input_data: dict):
    # 1. ARRANGE
    command_group = OfficialLayoutBookCommands(core=MagicMock())
    command_group._core.post_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_layout_settings(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.SetLayoutSettings'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetPropertyValuesOfElementsParameters":{"type":"object","properties":{"elementPropertyValues":{"$ref":"#/$defs/ElementPropertyValues"}},"additionalProperties":false,"required":["elementPropertyValues"]},"ElementPropertyValues":{"type":"array","description":"A list of element property values.","items":{"$ref":"#/$defs/ElementPropertyValue"}},"ElementPropertyValue":{"type":"object","description":"A property value with the identifiers of the property and its owner element.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"propertyId":{"$ref":"#/$defs/PropertyId"},"propertyValue":{"$ref":"#/$defs/NormalOrUserUndefinedPropertyValue"}},"additionalProperties":false,"required":["elementId","propertyId","propertyValue"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"NormalOrUserUndefinedPropertyValue":{"type":"object","description":"A normal or a userUndefined property value.","oneOf":[{"$ref":"#/$defs/NormalNumberPropertyValue"},{"$ref":"#/$defs/NormalIntegerPropertyValue"},{"$ref":"#/$defs/NormalStringPropertyValue"},{"$ref":"#/$defs/NormalBooleanPropertyValue"},{"$ref":"#/$defs/NormalLengthPropertyValue"},{"$ref":"#/$defs/NormalAreaPropertyValue"},{"$ref":"#/$defs/NormalVolumePropertyValue"},{"$ref":"#/$defs/NormalAnglePropertyValue"},{"$ref":"#/$defs/NormalNumberListPropertyValue"},{"$ref":"#/$defs/NormalIntegerListPropertyValue"},{"$ref":"#/$defs/NormalStringListPropertyValue"},{"$ref":"#/$defs/NormalBooleanListPropertyValue"},{"$ref":"#/$defs/NormalLengthListPropertyValue"},{"$ref":"#/$defs/NormalAreaListPropertyValue"},{"$ref":"#/$defs/NormalVolumeListPropertyValue"},{"$ref":"#/$defs/NormalAngleListPropertyValue"},{"$ref":"#/$defs/NormalSingleEnumPropertyValue"},{"$ref":"#/$defs/NormalMultiEnumPropertyValue"},{"$ref":"#/$defs/UserUndefinedPropertyValue"}]},"NormalNumberListPropertyValue":{"type":"object","description":"A number list property value containing numbers in an array.","properties":{"type":{"type":"string","enum":["numberList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalSingleEnumPropertyValue":{"type":"object","description":"A single enumeration property value containing the ID of the selected enum value.","properties":{"type":{"type":"string","enum":["singleEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueId":{"type":"object","description":"The identifier of a property enumeration value.","oneOf":[{"$ref":"#/$defs/DisplayValueEnumId"},{"$ref":"#/$defs/NonLocalizedValueEnumId"}]},"DisplayValueEnumId":{"type":"object","description":"An enumeration value identifier using the displayed value.","properties":{"type":{"type":"string","enum":["displayValue"]},"displayValue":{"type":"string"}},"additionalProperties":false,"required":["type","displayValue"]},"NonLocalizedValueEnumId":{"type":"object","description":"An enumeration value identifier using the nonlocalized value.","properties":{"type":{"type":"string","enum":["nonLocalizedValue"]},"nonLocalizedValue":{"type":"string"}},"additionalProperties":false,"required":["type","nonLocalizedValue"]},"UserUndefinedPropertyValue":{"type":"object","description":"A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.","properties":{"type":{"$ref":"#/$defs/PropertyValueType"},"status":{"type":"string","enum":["userUndefined"]}},"additionalProperties":false,"required":["type","status"]},"PropertyValueType":{"type":"string","enum":["number","integer","string","boolean","length","area","volume","angle","numberList","integerList","stringList","booleanList","lengthList","areaList","volumeList","angleList","singleEnum","multiEnum"]},"NormalAngleListPropertyValue":{"type":"object","description":"An angle list property value containing angles in an array. The values are measured in SI (radians).","properties":{"type":{"type":"string","enum":["angleList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaListPropertyValue":{"type":"object","description":"An area list property value containing areas in an array. The values are measured in SI (square meters).","properties":{"type":{"type":"string","enum":["areaList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumeListPropertyValue":{"type":"object","description":"A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volumeList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalMultiEnumPropertyValue":{"type":"object","description":"A multiple choice enumeration property value containing the IDs of the selected enum values in an array.","properties":{"type":{"type":"string","enum":["multiEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueIds"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueIds":{"type":"array","description":"A list of enumeration identifiers.","items":{"type":"object","properties":{"enumValueId":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["enumValueId"]}},"NormalIntegerListPropertyValue":{"type":"object","description":"An integer list property value containing integers in an array.","properties":{"type":{"type":"string","enum":["integerList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"integer"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthListPropertyValue":{"type":"object","description":"A length list property value containing length values in an array. The values are measured in SI (meters).","properties":{"type":{"type":"string","enum":["lengthList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringPropertyValue":{"type":"object","description":"A string property value containing a valid string.","properties":{"type":{"type":"string","enum":["string"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"string"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAnglePropertyValue":{"type":"object","description":"An angle property value containing a real angle. The value is measured in SI (radians).","properties":{"type":{"type":"string","enum":["angle"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthPropertyValue":{"type":"object","description":"A length property value containing a real length value. The value is measured in SI (meters).","properties":{"type":{"type":"string","enum":["length"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaPropertyValue":{"type":"object","description":"An area property value containing a real area. The value is measured in SI (square meters).","properties":{"type":{"type":"string","enum":["area"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringListPropertyValue":{"type":"object","description":"A string list property value containing strings in an array.","properties":{"type":{"type":"string","enum":["stringList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanListPropertyValue":{"type":"object","description":"A boolean list property value containing boolean values in an array.","properties":{"type":{"type":"string","enum":["booleanList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"boolean"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalNumberPropertyValue":{"type":"object","description":"A number property value containing a valid numeric value.","properties":{"type":{"type":"string","enum":["number"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumePropertyValue":{"type":"object","description":"A volume property value containing a real volume. The value is measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volume"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanPropertyValue":{"type":"object","description":"A boolean property value containing a valid boolean value.","properties":{"type":{"type":"string","enum":["boolean"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"boolean"}},"additionalProperties":false,"required":["type","status","value"]},"NormalIntegerPropertyValue":{"type":"object","description":"An integer property value containing a valid integer number.","properties":{"type":{"type":"string","enum":["integer"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"integer"}},"additionalProperties":false,"required":["type","status","value"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/SetPropertyValuesOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetPropertyValuesOfElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/SetPropertyValuesOfElementsResult"}')))
def test_set_property_values_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_property_values_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once()
    args, _ = command_group._core.post_command.call_args
    assert args[0] == 'API.SetPropertyValuesOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetActivePenTablesResult":{"type":"object","properties":{"modelViewPenTableId":{"$ref":"#/$defs/AttributeIdOrError","description":"Model view pen table identifier or an error."},"layoutBookPenTableId":{"$ref":"#/$defs/AttributeIdOrError","description":"Layout book pen table identifier or an error."}},"additionalProperties":false,"required":["modelViewPenTableId","layoutBookPenTableId"]},"AttributeIdOrError":{"type":"object","description":"The attribute\'s identifier or an error.","oneOf":[{"title":"attributeId","$ref":"#/$defs/AttributeIdWrapperItem"},{"title":"error","$ref":"#/$defs/ErrorItem"}]},"AttributeIdWrapperItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetActivePenTablesResult"}')))
def test_get_active_pen_tables_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialAttributeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_active_pen_tables(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.GetActivePenTables')
    assert result == commands.GetActivePenTablesResult.model_validate(mock_response)


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllClassificationSystemsResult":{"type":"object","properties":{"classificationSystems":{"$ref":"#/$defs/ClassificationSystems"}},"additionalProperties":false,"required":["classificationSystems"]},"ClassificationSystems":{"type":"array","description":"A list of classification systems.","items":{"$ref":"#/$defs/ClassificationSystem"}},"ClassificationSystem":{"type":"object","description":"The details of a classification system.","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"},"name":{"type":"string","description":"The display name of the classification system."},"description":{"type":"string","description":"The description of the classification system."},"source":{"type":"string","description":"The source of the classification system (e.g. URL to a classification system standard)."},"version":{"type":"string","description":"The version of the classification system."},"date":{"$ref":"#/$defs/Date","description":"The release date of the classification system\'s current version."}},"additionalProperties":false,"required":["classificationSystemId","name","description","source","version","date"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"Date":{"type":"string","description":"A date in its string representation as defined in ISO 8601: YYYY-MM-DD.","pattern":"^[0-9]{4}-[0-9]{2}-[0-9]{2}$"}},"$ref":"#/$defs/GetAllClassificationSystemsResult"}')))
def test_get_all_classification_systems_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_all_classification_systems(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.GetAllClassificationSystems')
    assert normalize_for_comparison(result) == mock_response['classificationSystems']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllElementsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAllElementsResult"}')))
def test_get_all_elements_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialElementListingCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_all_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.GetAllElements')
    assert normalize_for_comparison(result) == mock_response['elements']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertyNamesResult":{"type":"object","properties":{"properties":{"$ref":"#/$defs/PropertyUserIds"}},"additionalProperties":false,"required":["properties"]},"PropertyUserIds":{"type":"array","description":"A list of PropertyUserId objects.","items":{"$ref":"#/$defs/PropertyUserId"}},"PropertyUserId":{"type":"object","description":"The unique identifier of a Property, identified by its name. May represent a User-Defined or a Built-In Property.","oneOf":[{"$ref":"#/$defs/UserDefinedPropertyUserId"},{"$ref":"#/$defs/BuiltInPropertyUserId"}]},"BuiltInPropertyUserId":{"type":"object","description":"The unique identifier of a Built-In Property, identified by its name.","properties":{"type":{"type":"string","enum":["BuiltIn"]},"nonLocalizedName":{"type":"string","description":"The non-localized name of the Built-In Property."}},"additionalProperties":false,"required":["type","nonLocalizedName"]},"UserDefinedPropertyUserId":{"type":"object","description":"The unique identifier of a User-Defined Property, identified by its name.","properties":{"type":{"type":"string","enum":["UserDefined"]},"localizedName":{"type":"array","description":"A two-element list of the localized name parts. The first element is the name of the group the property belongs to, and the second element is the actual name of the property.","items":{"type":"string"},"minItems":2,"maxItems":2}},"additionalProperties":false,"required":["type","localizedName"]}},"$ref":"#/$defs/GetAllPropertyNamesResult"}')))
def test_get_all_property_names_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialPropertyCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_all_property_names(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.GetAllPropertyNames')
    assert normalize_for_comparison(result) == mock_response['properties']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationSystemIdsResult":{"type":"object","properties":{"classificationSystemIds":{"$ref":"#/$defs/ClassificationSystemIds"}},"additionalProperties":false,"required":["classificationSystemIds"]},"ClassificationSystemIds":{"type":"array","description":"A list of classification system identifiers.","items":{"$ref":"#/$defs/ClassificationSystemIdArrayItem"}},"ClassificationSystemIdArrayItem":{"type":"object","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetClassificationSystemIdsResult"}')))
def test_get_classification_system_ids_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialClassificationCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_classification_system_ids(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.GetClassificationSystemIds')
    assert normalize_for_comparison(result) == mock_response['classificationSystemIds']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetProductInfoResult":{"type":"object","properties":{"version":{"type":"integer","description":"The version of the running Archicad."},"buildNumber":{"type":"integer","description":"The build number of the running Archicad."},"languageCode":{"type":"string","description":"The language code of the running Archicad."}},"additionalProperties":false,"required":["version","buildNumber","languageCode"]}},"$ref":"#/$defs/GetProductInfoResult"}')))
def test_get_product_info_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialBasicCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_product_info(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.GetProductInfo')
    assert result == commands.GetProductInfoResult.model_validate(mock_response)


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPublisherSetNamesResult":{"type":"object","properties":{"publisherSetNames":{"type":"array","description":"The names of available publisher sets.","items":{"type":"string"}}},"additionalProperties":false,"required":["publisherSetNames"]}},"$ref":"#/$defs/GetPublisherSetNamesResult"}')))
def test_get_publisher_set_names_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialNavigatorTreeCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_publisher_set_names(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.GetPublisherSetNames')
    assert normalize_for_comparison(result) == mock_response['publisherSetNames']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"IsAliveResult":{"type":"object","properties":{"isAlive":{"type":"boolean","description":"Returns true if the connection is alive."}},"additionalProperties":false,"required":["isAlive"]}},"$ref":"#/$defs/IsAliveResult"}')))
def test_is_alive_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = OfficialBasicCommands(core=MagicMock())
    command_group._core.post_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.is_alive(**kwargs)

    # 3. ASSERT
    command_group._core.post_command.assert_called_once_with('API.IsAlive')
    assert normalize_for_comparison(result) == mock_response['isAlive']