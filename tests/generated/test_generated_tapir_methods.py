
# This file is automatically generated by the pipeline. Do not edit directly.
# Unit tests for all Unified API methods of the 'tapir' source.
import os
import re
import json
from unittest.mock import MagicMock
import pytest
from hypothesis import given, settings, HealthCheck
from hypothesis_jsonschema import from_schema
from tests.utilities import normalize_for_comparison
from multiconn_archicad.unified_api.tapir.application import ApplicationCommands as TapirApplicationCommands
from multiconn_archicad.unified_api.tapir.attribute import AttributeCommands as TapirAttributeCommands
from multiconn_archicad.unified_api.tapir.element import ElementCommands as TapirElementCommands
from multiconn_archicad.unified_api.tapir.favorites import FavoritesCommands as TapirFavoritesCommands
from multiconn_archicad.unified_api.tapir.issue_management import IssueManagementCommands as TapirIssueManagementCommands
from multiconn_archicad.unified_api.tapir.library import LibraryCommands as TapirLibraryCommands
from multiconn_archicad.unified_api.tapir.navigator import NavigatorCommands as TapirNavigatorCommands
from multiconn_archicad.unified_api.tapir.project import ProjectCommands as TapirProjectCommands
from multiconn_archicad.unified_api.tapir.property import PropertyCommands as TapirPropertyCommands
from multiconn_archicad.unified_api.tapir.revision_management import RevisionManagementCommands as TapirRevisionManagementCommands
from multiconn_archicad.unified_api.tapir.teamwork import TeamworkCommands as TapirTeamworkCommands
from multiconn_archicad.models.tapir import commands, types
NUM_EXAMPLES = int(os.getenv("HYPOTHESIS_NUM_EXAMPLES", 1))
settings.register_profile("ci", max_examples=NUM_EXAMPLES, suppress_health_check=[HealthCheck.too_slow], deadline=None)
settings.load_profile("ci")
pytestmark = pytest.mark.generated_methods


def camel_to_snake(name: str) -> str:
    """
    Converts a camelCase or PascalCase string to snake_case, correctly
    handling acronyms and numbers (e.g., '3D', 'GDL', 'XML').
    """
    # 1) Insert underscore between a letter and a following digit:
    #    "Get3D" -> "Get_3D"
    name = re.sub(r'(?<=[A-Za-z])(?=\d)', '_', name)

    # 2) Insert underscore between an uppercase/digit and an Uppercase+lowercase sequence:
    #    handles "3DBounding" -> "3D_Bounding" and "XMLParser" -> "XML_Parser"
    name = re.sub(r'([A-Z0-9])([A-Z][a-z])', r'\1_\2', name)

    # 3) Insert underscore between a lowercase and uppercase letter:
    #    "getXML" -> "get_XML"
    name = re.sub(r'(?<=[a-z])([A-Z])', r'_\1', name)

    return name.lower()



def test_quit_archicad_logic():
    # 1. ARRANGE
    command_group = TapirApplicationCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {}
    result = command_group.quit_archicad(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('QuitArchicad')
    assert result is None



def test_reload_libraries_logic():
    # 1. ARRANGE
    command_group = TapirLibraryCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {}
    result = command_group.reload_libraries(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('ReloadLibraries')
    assert result is None



def test_teamwork_receive_logic():
    # 1. ARRANGE
    command_group = TapirTeamworkCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {}
    result = command_group.teamwork_receive(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('TeamworkReceive')
    assert result is None



def test_teamwork_send_logic():
    # 1. ARRANGE
    command_group = TapirTeamworkCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {}
    result = command_group.teamwork_send(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('TeamworkSend')
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"AddCommentToIssueParameters":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"},"author":{"type":"string","description":"The author of the new comment."},"status":{"$ref":"#/$defs/IssueCommentStatus"},"text":{"type":"string","description":"Comment text to add."}},"additionalProperties":false,"required":["issueId","text"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"IssueCommentStatus":{"type":"string","description":"The status of an issue comment.","enum":["Error","Warning","Info","Unknown"]}},"$ref":"#/$defs/AddCommentToIssueParameters"}')))
def test_add_comment_to_issue_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.add_comment_to_issue(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'AddCommentToIssue'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"AddFilesToEmbeddedLibraryParameters":{"type":"object","properties":{"files":{"type":"array","description":"A list of files","items":{"type":"object","properties":{"inputPath":{"type":"string","description":"The path to the input file."},"outputPath":{"type":"string","description":"The relative path to the new file inside embedded library."},"type":{"type":"string","description":"The type of the library part. By default \'Pict\'.","enum":["Window","Door","Object","Lamp","Room","Property","PlanSign","Label","Macro","Pict","ListScheme","Skylight","OpeningSymbol"]}},"additionalProperties":false,"required":["inputPath","outputPath"]}}},"additionalProperties":false,"required":["files"]}},"$ref":"#/$defs/AddFilesToEmbeddedLibraryParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"AddFilesToEmbeddedLibraryResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/AddFilesToEmbeddedLibraryResult"}')))
def test_add_files_to_embedded_library_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirLibraryCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.add_files_to_embedded_library(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'AddFilesToEmbeddedLibrary'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ApplyFavoritesToElementDefaultsParameters":{"type":"object","properties":{"favorites":{"$ref":"#/$defs/Favorites"}},"additionalProperties":false,"required":["favorites"]},"Favorites":{"type":"array","description":"A list of favorite names","items":{"type":"string","description":"The name of a favorite."}}},"$ref":"#/$defs/ApplyFavoritesToElementDefaultsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ApplyFavoritesToElementDefaultsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/ApplyFavoritesToElementDefaultsResult"}')))
def test_apply_favorites_to_element_defaults_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirFavoritesCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.apply_favorites_to_element_defaults(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'ApplyFavoritesToElementDefaults'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"AttachElementsToIssueParameters":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"},"elements":{"$ref":"#/$defs/Elements"},"type":{"$ref":"#/$defs/IssueElementType"}},"additionalProperties":false,"required":["issueId","elements","type"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"IssueElementType":{"type":"string","description":"The attachment type of an element component of an issue.","enum":["Creation","Highlight","Deletion","Modification"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/AttachElementsToIssueParameters"}')))
def test_attach_elements_to_issue_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.attach_elements_to_issue(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'AttachElementsToIssue'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ChangeSelectionOfElementsParameters":{"type":"object","properties":{"addElementsToSelection":{"$ref":"#/$defs/Elements"},"removeElementsFromSelection":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":[]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/ChangeSelectionOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ChangeSelectionOfElementsResult":{"type":"object","properties":{"executionResultsOfAddToSelection":{"$ref":"#/$defs/ExecutionResults"},"executionResultsOfRemoveFromSelection":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResultsOfAddToSelection","executionResultsOfRemoveFromSelection"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/ChangeSelectionOfElementsResult"}')))
def test_change_selection_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.change_selection_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'ChangeSelectionOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result == commands.ChangeSelectionOfElementsResult.model_validate(mock_response)


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateBuildingMaterialsParameters":{"type":"object","properties":{"buildingMaterialDataArray":{"type":"array","description":"Array of data to create new Building Materials.","items":{"type":"object","description":"Data to create a Building Material.","properties":{"name":{"type":"string","description":"Name."},"id":{"type":"string","description":"Identifier."},"manufacturer":{"type":"string","description":"Manufacturer."},"description":{"type":"string","description":"Decription."},"connPriority":{"type":"integer","description":"Intersection priority."},"cutFillIndex":{"type":"integer","description":"Index of the Cut Fill."},"cutFillPen":{"type":"integer","description":"Cut Fill Foreground Pen."},"cutFillBackgroundPen":{"type":"integer","description":"Cut Fill Background Pen."},"cutSurfaceIndex":{"type":"integer","description":"Index of the Cut Surface."},"thermalConductivity":{"type":"number","description":"Thermal Conductivity."},"density":{"type":"number","description":"Density."},"heatCapacity":{"type":"number","description":"Heat Capacity."},"embodiedEnergy":{"type":"number","description":"Embodied Energy."},"embodiedCarbon":{"type":"number","description":"Embodied Carbon."}},"additionalProperties":false,"required":["name"]}},"overwriteExisting":{"type":"boolean","description":"Overwrite the Building Material if exists with the same name. The default is false."}},"additionalProperties":false,"required":["buildingMaterialDataArray"]}},"$ref":"#/$defs/CreateBuildingMaterialsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateBuildingMaterialsResult":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attributes.","items":{"$ref":"#/$defs/AttributeIdArrayItem"}},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateBuildingMaterialsResult"}')))
def test_create_building_materials_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirAttributeCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_building_materials(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateBuildingMaterials'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateColumnsParameters":{"type":"object","properties":{"columnsData":{"type":"array","description":"Array of data to create Columns.","items":{"type":"object","description":"The parameters of the new Column.","properties":{"coordinates":{"type":"object","description":"3D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."},"z":{"type":"number","description":"Z value of the coordinate."}},"additionalProperties":false,"required":["x","y","z"]}},"additionalProperties":false,"required":["coordinates"]}}},"additionalProperties":false,"required":["columnsData"]}},"$ref":"#/$defs/CreateColumnsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateColumnsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateColumnsResult"}')))
def test_create_columns_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_columns(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateColumns'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateCompositesParameters":{"type":"object","properties":{"compositeDataArray":{"type":"array","description":"Array of data to create Composites.","items":{"type":"object","description":"Data to create a Composite.","properties":{"name":{"type":"string","description":"Name."},"useWith":{"type":"array","description":"Array of types the composite can used with.","items":{"type":"string","description":"Element type (Wall, Slab, Roof, or Shell)"}},"skins":{"type":"array","description":"Array of skin data.","items":{"type":"object","description":"Data to represent a skin.","properties":{"type":{"type":"string","description":"Skin type (Core, Finish, or Other)"},"buildingMaterialId":{"$ref":"#/$defs/AttributeIdArrayItem"},"framePen":{"type":"integer","description":"Skin frame pen index."},"thickness":{"type":"number","description":"Skin thickness (in meters)."}},"additionalProperties":false,"required":["type","buildingMaterialId","framePen","thickness"]}},"separators":{"type":"array","description":"Array of skin separator data. The number of items must be the number of skins plus one.","items":{"type":"object","description":"Data to represent a skin separator.","properties":{"lineTypeId":{"$ref":"#/$defs/AttributeIdArrayItem"},"linePen":{"type":"integer","description":"Separator line pen index."}},"additionalProperties":false,"required":["lineTypeId","linePen"]}}},"additionalProperties":false,"required":["name","skins","separators"]}},"overwriteExisting":{"type":"boolean","description":"Overwrite the Composite if exists with the same name. The default is false."}},"additionalProperties":false,"required":["compositeDataArray"]},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateCompositesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateCompositesResult":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attributes.","items":{"$ref":"#/$defs/AttributeIdArrayItem"}},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateCompositesResult"}')))
def test_create_composites_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirAttributeCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_composites(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateComposites'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateFavoritesFromElementsParameters":{"type":"object","properties":{"favoritesFromElements":{"type":"array","items":{"type":"object","description":"The identifier of the element and the name of the new favorite.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"favorite":{"type":"string"}},"additionalProperties":false,"required":["elementId","favorite"]}}},"additionalProperties":false,"required":["favoritesFromElements"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateFavoritesFromElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateFavoritesFromElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/CreateFavoritesFromElementsResult"}')))
def test_create_favorites_from_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirFavoritesCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_favorites_from_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateFavoritesFromElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateIssueParameters":{"type":"object","properties":{"name":{"type":"string","description":"The name of the issue."},"parentIssueId":{"$ref":"#/$defs/IssueId"},"tagText":{"type":"string","description":"Tag text of the issue, optional."}},"additionalProperties":false,"required":["name"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateIssueParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateIssueResult":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"}},"additionalProperties":false,"required":["issueId"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateIssueResult"}')))
def test_create_issue_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_issue(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateIssue'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['issueId']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateLayersParameters":{"type":"object","properties":{"layerDataArray":{"type":"array","description":"Array of data to create new Layers.","items":{"type":"object","description":"Data to create a Layer.","properties":{"name":{"type":"string","description":"Name."},"isHidden":{"type":"boolean","description":"Hide/Show."},"isLocked":{"type":"boolean","description":"Lock/Unlock."},"isWireframe":{"type":"boolean","description":"Force the model to wireframe."}},"additionalProperties":false,"required":["name"]}},"overwriteExisting":{"type":"boolean","description":"Overwrite the Layer if exists with the same name. The default is false."}},"additionalProperties":false,"required":["layerDataArray"]}},"$ref":"#/$defs/CreateLayersParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateLayersResult":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attributes.","items":{"$ref":"#/$defs/AttributeIdArrayItem"}},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateLayersResult"}')))
def test_create_layers_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirAttributeCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_layers(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateLayers'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateMeshesParameters":{"type":"object","properties":{"meshesData":{"type":"array","description":"Array of data to create Meshes.","items":{"type":"object","description":"The parameters of the new Mesh.","properties":{"floorIndex":{"type":"integer"},"level":{"type":"number","description":"The Z reference level of coordinates."},"skirtType":{"$ref":"#/$defs/MeshSkirtType"},"skirtLevel":{"type":"number","description":"The height of the skirt."},"polygonCoordinates":{"type":"array","description":"The 3D coordinates of the outline polygon of the mesh.","items":{"$ref":"#/$defs/Coordinate3D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the mesh.","items":{"$ref":"#/$defs/PolyArc"}},"holes":{"$ref":"#/$defs/Holes3D"},"sublines":{"type":"array","description":"The leveling sublines inside the polygon of the mesh.","items":{"type":"object","properties":{"coordinates":{"type":"array","description":"The 3D coordinates of the leveling subline of the mesh.","items":{"$ref":"#/$defs/Coordinate3D"}}},"additionalProperties":false,"required":["coordinates"]},"minItems":1}},"additionalProperties":false,"required":["polygonCoordinates"]}}},"additionalProperties":false,"required":["meshesData"]},"Coordinate3D":{"type":"object","description":"3D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."},"z":{"type":"number","description":"Z value of the coordinate."}},"additionalProperties":false,"required":["x","y","z"]},"MeshSkirtType":{"type":"string","description":"The type of the skirt structure.","enum":["SurfaceOnlyWithoutSkirt","WithSkirt","SolidBodyWithSkirt"]},"PolyArc":{"type":"object","description":"Representation of an arc segment of a two dimensional polygon/polyline.","properties":{"begIndex":{"type":"integer","description":"Node index of one end point of the arc."},"endIndex":{"type":"integer","description":"Node index of the other end point of the arc."},"arcAngle":{"type":"number","description":"Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}},"additionalProperties":false,"required":["begIndex","endIndex","arcAngle"]},"Holes3D":{"type":"array","description":"A list of 3D holes in an element defined by closed polylines","items":{"$ref":"#/$defs/Hole3D"}},"Hole3D":{"type":"object","description":"A 3D hole in an element defined by closed polylines","properties":{"polygonCoordinates":{"type":"array","description":"The 3D coordinates of the polygon of the hole.","items":{"$ref":"#/$defs/Coordinate3D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the hole.","items":{"$ref":"#/$defs/PolyArc"}}},"additionalProperties":false,"required":["polygonCoordinates"]}},"$ref":"#/$defs/CreateMeshesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateMeshesResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateMeshesResult"}')))
def test_create_meshes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_meshes(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateMeshes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateObjectsParameters":{"type":"object","properties":{"objectsData":{"type":"array","description":"Array of data to create Objects.","items":{"type":"object","description":"The parameters of the new Object.","properties":{"libraryPartName":{"type":"string","description":"The name of the library part to use."},"coordinates":{"$ref":"#/$defs/Coordinate3D"},"dimensions":{"$ref":"#/$defs/Dimensions3D"}},"additionalProperties":false,"required":["libraryPartName","coordinates"]}}},"additionalProperties":false,"required":["objectsData"]},"Coordinate3D":{"type":"object","description":"3D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."},"z":{"type":"number","description":"Z value of the coordinate."}},"additionalProperties":false,"required":["x","y","z"]},"Dimensions3D":{"type":"object","description":"Dimensions in 3D.","properties":{"x":{"type":"number","description":"X dimension."},"y":{"type":"number","description":"Y dimension."},"z":{"type":"number","description":"Z dimension."}},"additionalProperties":false,"required":["x","y","z"]}},"$ref":"#/$defs/CreateObjectsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateObjectsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateObjectsResult"}')))
def test_create_objects_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_objects(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateObjects'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreatePolylinesParameters":{"type":"object","properties":{"polylinesData":{"type":"array","description":"Array of data to create Polylines.","items":{"type":"object","description":"The parameters of the new Polyline.","properties":{"floorInd":{"type":"number","description":"The identifier of the floor. Optinal parameter, by default the current floor is used."},"coordinates":{"type":"array","description":"The 2D coordinates of the polyline.","items":{"$ref":"#/$defs/Coordinate2D"},"minItems":2},"arcs":{"type":"array","description":"The arcs of the polyline.","items":{"$ref":"#/$defs/PolyArc"}}},"additionalProperties":false,"required":["coordinates"]}}},"additionalProperties":false,"required":["polylinesData"]},"Coordinate2D":{"type":"object","description":"2D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."}},"additionalProperties":false,"required":["x","y"]},"PolyArc":{"type":"object","description":"Representation of an arc segment of a two dimensional polygon/polyline.","properties":{"begIndex":{"type":"integer","description":"Node index of one end point of the arc."},"endIndex":{"type":"integer","description":"Node index of the other end point of the arc."},"arcAngle":{"type":"number","description":"Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}},"additionalProperties":false,"required":["begIndex","endIndex","arcAngle"]}},"$ref":"#/$defs/CreatePolylinesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreatePolylinesResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreatePolylinesResult"}')))
def test_create_polylines_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_polylines(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreatePolylines'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreatePropertyDefinitionsParameters":{"type":"object","properties":{"propertyDefinitions":{"type":"array","description":"The parameters of the new properties.","items":{"$ref":"#/$defs/PropertyDefinitionArrayItem"}}},"additionalProperties":false,"required":["propertyDefinitions"]},"PropertyDefinitionArrayItem":{"description":"A wrapper containing a property definition","type":"object","properties":{"propertyDefinition":{"$ref":"#/$defs/PropertyDefinition"}},"additionalProperties":false,"required":["propertyDefinition"]},"PropertyDefinition":{"type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"},"type":{"$ref":"#/$defs/PropertyDataType"},"isEditable":{"type":"boolean"},"defaultValue":{"$ref":"#/$defs/PropertyDefaultValue"},"possibleEnumValues":{"type":"array","description":"The possible enum values of the property when the property type is enumeration.","items":{"type":"object","properties":{"enumValue":{"type":"object","description":"The description of an enumeration value.","properties":{"enumValueId":{"$ref":"#/$defs/EnumValueId"},"displayValue":{"type":"string","description":"Displayed value of the enumeration."},"nonLocalizedValue":{"type":"string","description":"Nonlocalized value of the enumeration if there is one."}},"additionalProperties":false,"required":["displayValue"]}},"additionalProperties":false,"required":["enumValue"]}},"availability":{"type":"array","description":"The identifiers of classification items the new property is available for.","items":{"$ref":"#/$defs/ClassificationItemIdArrayItem"}},"group":{"type":"object","description":"The property group defined by name or id. If both fields exists the id will be used.","properties":{"propertyGroupId":{"$ref":"#/$defs/PropertyGroupId"},"name":{"type":"string"}},"additionalProperties":false,"required":[]}},"additionalProperties":false,"required":["name","description","type","isEditable","availability","group"]},"EnumValueId":{"type":"object","description":"The identifier of a property enumeration value.","oneOf":[{"$ref":"#/$defs/DisplayValueEnumId"},{"$ref":"#/$defs/NonLocalizedValueEnumId"}]},"NonLocalizedValueEnumId":{"type":"object","description":"An enumeration value identifier using the nonlocalized value.","properties":{"type":{"type":"string","enum":["nonLocalizedValue"]},"nonLocalizedValue":{"type":"string"}},"additionalProperties":false,"required":["type","nonLocalizedValue"]},"DisplayValueEnumId":{"type":"object","description":"An enumeration value identifier using the displayed value.","properties":{"type":{"type":"string","enum":["displayValue"]},"displayValue":{"type":"string"}},"additionalProperties":false,"required":["type","displayValue"]},"PropertyDefaultValue":{"type":"object","oneOf":[{"$ref":"#/$defs/BasicDefaultValue"},{"$ref":"#/$defs/ExpressionDefaultValue"}]},"ExpressionDefaultValue":{"type":"object","description":"Default value of the property in case of an expression based property value.","properties":{"expressions":{"type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["expressions"]},"BasicDefaultValue":{"type":"object","description":"Default value of the property in case of a basic property value (ie. not an expression).","properties":{"basicDefaultValue":{"$ref":"#/$defs/PropertyValueDetails"}},"additionalProperties":false,"required":["basicDefaultValue"]},"PropertyValueDetails":{"type":"object","description":"A normal, userUndefined, notAvailable or notEvaluated property value.","oneOf":[{"$ref":"#/$defs/NormalOrUserUndefinedPropertyValue"},{"$ref":"#/$defs/NotAvailablePropertyValue"}]},"NotAvailablePropertyValue":{"type":"object","description":"A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).","properties":{"type":{"$ref":"#/$defs/PropertyDataType"},"status":{"type":"string","enum":["notAvailable"]}},"additionalProperties":false,"required":["type","status"]},"PropertyDataType":{"type":"string","enum":["number","integer","string","boolean","length","area","volume","angle","numberList","integerList","stringList","booleanList","lengthList","areaList","volumeList","angleList","singleEnum","multiEnum"]},"NormalOrUserUndefinedPropertyValue":{"type":"object","description":"A normal or a userUndefined property value.","oneOf":[{"$ref":"#/$defs/NormalNumberPropertyValue"},{"$ref":"#/$defs/NormalIntegerPropertyValue"},{"$ref":"#/$defs/NormalStringPropertyValue"},{"$ref":"#/$defs/NormalBooleanPropertyValue"},{"$ref":"#/$defs/NormalLengthPropertyValue"},{"$ref":"#/$defs/NormalAreaPropertyValue"},{"$ref":"#/$defs/NormalVolumePropertyValue"},{"$ref":"#/$defs/NormalAnglePropertyValue"},{"$ref":"#/$defs/NormalNumberListPropertyValue"},{"$ref":"#/$defs/NormalIntegerListPropertyValue"},{"$ref":"#/$defs/NormalStringListPropertyValue"},{"$ref":"#/$defs/NormalBooleanListPropertyValue"},{"$ref":"#/$defs/NormalLengthListPropertyValue"},{"$ref":"#/$defs/NormalAreaListPropertyValue"},{"$ref":"#/$defs/NormalVolumeListPropertyValue"},{"$ref":"#/$defs/NormalAngleListPropertyValue"},{"$ref":"#/$defs/NormalSingleEnumPropertyValue"},{"$ref":"#/$defs/NormalMultiEnumPropertyValue"},{"$ref":"#/$defs/UserUndefinedPropertyValue"}]},"NormalBooleanListPropertyValue":{"type":"object","description":"A boolean list property value containing boolean values in an array.","properties":{"type":{"type":"string","enum":["booleanList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"boolean"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalBooleanPropertyValue":{"type":"object","description":"A boolean property value containing a valid boolean value.","properties":{"type":{"type":"string","enum":["boolean"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"boolean"}},"additionalProperties":false,"required":["type","status","value"]},"NormalMultiEnumPropertyValue":{"type":"object","description":"A multiple choice enumeration property value containing the IDs of the selected enum values in an array.","properties":{"type":{"type":"string","enum":["multiEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueIds"}},"additionalProperties":false,"required":["type","status","value"]},"EnumValueIds":{"type":"array","description":"A list of enumeration identifiers.","items":{"$ref":"#/$defs/EnumValueIdArrayItem"}},"EnumValueIdArrayItem":{"type":"object","description":"A wrapper containing the identifier of a property enumeration value.","properties":{"enumValueId":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["enumValueId"]},"NormalAreaPropertyValue":{"type":"object","description":"An area property value containing a real area. The value is measured in SI (square meters).","properties":{"type":{"type":"string","enum":["area"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalLengthListPropertyValue":{"type":"object","description":"A length list property value containing length values in an array. The values are measured in SI (meters).","properties":{"type":{"type":"string","enum":["lengthList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalAreaListPropertyValue":{"type":"object","description":"An area list property value containing areas in an array. The values are measured in SI (square meters).","properties":{"type":{"type":"string","enum":["areaList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalSingleEnumPropertyValue":{"type":"object","description":"A single enumeration property value containing the ID of the selected enum value.","properties":{"type":{"type":"string","enum":["singleEnum"]},"status":{"type":"string","enum":["normal"]},"value":{"$ref":"#/$defs/EnumValueId"}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringListPropertyValue":{"type":"object","description":"A string list property value containing strings in an array.","properties":{"type":{"type":"string","enum":["stringList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalNumberPropertyValue":{"type":"object","description":"A number property value containing a valid numeric value.","properties":{"type":{"type":"string","enum":["number"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalIntegerListPropertyValue":{"type":"object","description":"An integer list property value containing integers in an array.","properties":{"type":{"type":"string","enum":["integerList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"integer"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumePropertyValue":{"type":"object","description":"A volume property value containing a real volume. The value is measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volume"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalIntegerPropertyValue":{"type":"object","description":"An integer property value containing a valid integer number.","properties":{"type":{"type":"string","enum":["integer"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"integer"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAngleListPropertyValue":{"type":"object","description":"An angle list property value containing angles in an array. The values are measured in SI (radians).","properties":{"type":{"type":"string","enum":["angleList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"UserUndefinedPropertyValue":{"type":"object","description":"A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.","properties":{"type":{"$ref":"#/$defs/PropertyDataType"},"status":{"type":"string","enum":["userUndefined"]}},"additionalProperties":false,"required":["type","status"]},"NormalLengthPropertyValue":{"type":"object","description":"A length property value containing a real length value. The value is measured in SI (meters).","properties":{"type":{"type":"string","enum":["length"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"NormalNumberListPropertyValue":{"type":"object","description":"A number list property value containing numbers in an array.","properties":{"type":{"type":"string","enum":["numberList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalVolumeListPropertyValue":{"type":"object","description":"A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).","properties":{"type":{"type":"string","enum":["volumeList"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["type","status","value"]},"NormalStringPropertyValue":{"type":"object","description":"A string property value containing a valid string.","properties":{"type":{"type":"string","enum":["string"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"string"}},"additionalProperties":false,"required":["type","status","value"]},"NormalAnglePropertyValue":{"type":"object","description":"An angle property value containing a real angle. The value is measured in SI (radians).","properties":{"type":{"type":"string","enum":["angle"]},"status":{"type":"string","enum":["normal"]},"value":{"type":"number"}},"additionalProperties":false,"required":["type","status","value"]},"PropertyGroupId":{"type":"object","description":"The identifier of a property group.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ClassificationItemIdArrayItem":{"type":"object","properties":{"classificationItemId":{"$ref":"#/$defs/ClassificationItemId"}},"additionalProperties":false,"required":["classificationItemId"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/CreatePropertyDefinitionsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreatePropertyDefinitionsResult":{"type":"object","properties":{"propertyIds":{"$ref":"#/$defs/PropertyIdOrErrorArray"}},"additionalProperties":false,"required":["propertyIds"]},"PropertyIdOrErrorArray":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdOrError"}},"PropertyIdOrError":{"type":"object","description":"A propertyId or an error.","oneOf":[{"$ref":"#/$defs/PropertyIdArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"PropertyIdArrayItem":{"type":"object","description":"A wrapper containing the property identifier.","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/CreatePropertyDefinitionsResult"}')))
def test_create_property_definitions_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_property_definitions(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreatePropertyDefinitions'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreatePropertyGroupsParameters":{"type":"object","properties":{"propertyGroups":{"type":"array","description":"The parameters of the new property groups.","items":{"$ref":"#/$defs/PropertyGroupArrayItem"}}},"additionalProperties":false,"required":["propertyGroups"]},"PropertyGroupArrayItem":{"description":"A wrapper containing a property group","type":"object","properties":{"propertyGroup":{"$ref":"#/$defs/PropertyGroup"}},"additionalProperties":false,"required":["propertyGroup"]},"PropertyGroup":{"description":"Represents a property group.","type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"}},"additionalProperties":false,"required":["name"]}},"$ref":"#/$defs/CreatePropertyGroupsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreatePropertyGroupsResult":{"type":"object","properties":{"propertyGroupIds":{"type":"array","description":"The identifiers of the created property groups.","items":{"$ref":"#/$defs/PropertyGroupIdArrayItem"}}},"additionalProperties":false,"required":["propertyGroupIds"]},"PropertyGroupIdArrayItem":{"type":"object","description":"A wrapper containing the property group identifier.","properties":{"propertyGroupId":{"$ref":"#/$defs/PropertyGroupId"}},"additionalProperties":false,"required":["propertyGroupId"]},"PropertyGroupId":{"type":"object","description":"The identifier of a property group.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreatePropertyGroupsResult"}')))
def test_create_property_groups_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_property_groups(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreatePropertyGroups'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyGroupIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateSlabsParameters":{"type":"object","properties":{"slabsData":{"type":"array","description":"Array of data to create Slabs.","items":{"type":"object","description":"The parameters of the new Slab.","properties":{"level":{"type":"number","description":"The Z coordinate value of the reference line of the slab."},"polygonCoordinates":{"type":"array","description":"The 2D coordinates of the edge of the slab.","items":{"$ref":"#/$defs/Coordinate2D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the slab.","items":{"$ref":"#/$defs/PolyArc"}},"holes":{"$ref":"#/$defs/Holes2D"}},"additionalProperties":false,"required":["level","polygonCoordinates"]}}},"additionalProperties":false,"required":["slabsData"]},"Coordinate2D":{"type":"object","description":"2D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."}},"additionalProperties":false,"required":["x","y"]},"PolyArc":{"type":"object","description":"Representation of an arc segment of a two dimensional polygon/polyline.","properties":{"begIndex":{"type":"integer","description":"Node index of one end point of the arc."},"endIndex":{"type":"integer","description":"Node index of the other end point of the arc."},"arcAngle":{"type":"number","description":"Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}},"additionalProperties":false,"required":["begIndex","endIndex","arcAngle"]},"Holes2D":{"type":"array","description":"A list of 2D holes in an element defined by closed polylines","items":{"$ref":"#/$defs/Hole2D"}},"Hole2D":{"type":"object","description":"A 2D hole in an element defined by closed polylines","properties":{"polygonOutline":{"type":"array","description":"The 2D coordinates of the edge of the hole.","items":{"$ref":"#/$defs/Coordinate2D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the hole.","items":{"$ref":"#/$defs/PolyArc"}}},"additionalProperties":false,"required":["polygonCoordinates"]}},"$ref":"#/$defs/CreateSlabsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateSlabsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateSlabsResult"}')))
def test_create_slabs_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_slabs(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateSlabs'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateSurfacesParameters":{"type":"object","properties":{"surfaceDataArray":{"type":"array","description":"Array of data to create new surfaces.","items":{"type":"object","description":"Data to create a surface.","properties":{"name":{"type":"string","description":"Name."},"materialType":{"$ref":"#/$defs/SurfaceType"},"ambientReflection":{"type":"number","description":"Ambient percentage [0..100]."},"diffuseReflection":{"type":"number","description":"Diffuse percentage [0..100]."},"specularReflection":{"type":"number","description":"Specular percentage [0..100]."},"transparency":{"type":"number","description":"Transparency percentage [0..100]."},"shine":{"type":"number","description":"The shininess factor multiplied by 100 [0..10000]."},"transparencyAttenuation":{"type":"number","description":"Transparency attenuation multiplied by 100 [0..10000]."},"emissionAttenuation":{"type":"number","description":"Emission attenuation multiplied by 100 [0..10000]."},"surfaceColor":{"$ref":"#/$defs/ColorRGB"},"specularColor":{"$ref":"#/$defs/ColorRGB"},"emissionColor":{"$ref":"#/$defs/ColorRGB"},"fillId":{"$ref":"#/$defs/AttributeIdArrayItem"},"texture":{"$ref":"#/$defs/Texture"}},"additionalProperties":false,"required":["name","materialType","ambientReflection","diffuseReflection","specularReflection","transparency","shine","transparencyAttenuation","emissionAttenuation","surfaceColor","specularColor","emissionColor"]}},"overwriteExisting":{"type":"boolean","description":"Overwrite the Surface if exists with the same name. The default is false."}},"additionalProperties":false,"required":["surfaceDataArray"]},"ColorRGB":{"type":"object","description":"RGB color.","properties":{"red":{"type":"number","description":"Red value between 0.0 and 1.0"},"green":{"type":"number","description":"Green value between 0.0 and 1.0"},"blue":{"type":"number","description":"Blue value between 0.0 and 1.0"}},"additionalProperties":false,"required":["red","green","blue"]},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"Texture":{"type":"object","description":"Texture parameters","properties":{"name":{"type":"string","description":"The filename of the texture in the library (without extension)."},"rotationAngle":{"type":"number","description":"Rotation angle in radians."},"xSize":{"type":"number","description":"X size of the picture in model space, by default 1."},"ySize":{"type":"number","description":"Y size of the picture in model space, by default 1."},"FillRectangle":{"type":"boolean","description":"True, if fit the rectangle with the picture in a central position, using the natural aspect ratio of the picture."},"FitPicture":{"type":"boolean","description":"True, if fit the picture in the middle of the rectangle, using the natural aspect ratio of the picture."},"mirrorX":{"type":"boolean","description":"True, if the texture is mirrored in X direction."},"mirrorY":{"type":"boolean","description":"True, if the texture is mirrored in Y direction."},"useAlphaChannel":{"type":"boolean","description":"True, if the alpha channel of the texture is used."},"alphaChannelChangesTransparency":{"type":"boolean","description":"True, if the alpha channel of the texture changes the transparency."},"alphaChannelChangesSurfaceColor":{"type":"boolean","description":"True, if the alpha channel of the texture changes the surface color."},"alphaChannelChangesAmbientColor":{"type":"boolean","description":"True, if the alpha channel of the texture changes the ambient color."},"alphaChannelChangesSpecularColor":{"type":"boolean","description":"True, if the alpha channel of the texture changes the specular color."},"alphaChannelChangesDiffuseColor":{"type":"boolean","description":"True, if the alpha channel of the texture changes the diffuse color."}},"additionalProperties":false,"required":["name"]},"SurfaceType":{"type":"string","description":"The type of a surface material.","enum":["General","Simple","Matte","Metal","Plastic","Glass","Glowing","Constant"]}},"$ref":"#/$defs/CreateSurfacesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateSurfacesResult":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attributes.","items":{"$ref":"#/$defs/AttributeIdArrayItem"}},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateSurfacesResult"}')))
def test_create_surfaces_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirAttributeCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_surfaces(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateSurfaces'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributeIds']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateZonesParameters":{"type":"object","properties":{"zonesData":{"type":"array","description":"Array of data to create Zones.","items":{"type":"object","description":"The parameters of the new Zone.","properties":{"floorIndex":{"type":"number"},"name":{"type":"string","description":"Name of the zone."},"numberStr":{"type":"string","description":"Zone number."},"categoryAttributeId":{"$ref":"#/$defs/AttributeId","description":"The identifier of the zone category attribute."},"stampPosition":{"$ref":"#/$defs/Coordinate2D","description":"Position of the origin of the zone stamp."},"geometry":{"type":"object","oneOf":[{"$ref":"#/$defs/AutomaticZoneGeometry"},{"$ref":"#/$defs/ManualZoneGeometry"}]}},"additionalProperties":false,"required":["name","numberStr","geometry"]}}},"additionalProperties":false,"required":["zonesData"]},"Coordinate2D":{"type":"object","description":"2D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."}},"additionalProperties":false,"required":["x","y"]},"AutomaticZoneGeometry":{"type":"object","description":"Automatic zone placement.","properties":{"referencePosition":{"$ref":"#/$defs/Coordinate2D","description":"Reference point to automatically find zone."}},"additionalProperties":false,"required":["referencePosition"]},"ManualZoneGeometry":{"type":"object","description":"Manual zone placement.","properties":{"polygonCoordinates":{"type":"array","description":"The 2D coordinates of the edge of the zone.","items":{"$ref":"#/$defs/Coordinate2D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the zone.","items":{"$ref":"#/$defs/PolyArc"}},"holes":{"$ref":"#/$defs/Holes2D"}},"additionalProperties":false,"required":["polygonCoordinates"]},"PolyArc":{"type":"object","description":"Representation of an arc segment of a two dimensional polygon/polyline.","properties":{"begIndex":{"type":"integer","description":"Node index of one end point of the arc."},"endIndex":{"type":"integer","description":"Node index of the other end point of the arc."},"arcAngle":{"type":"number","description":"Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}},"additionalProperties":false,"required":["begIndex","endIndex","arcAngle"]},"Holes2D":{"type":"array","description":"A list of 2D holes in an element defined by closed polylines","items":{"$ref":"#/$defs/Hole2D"}},"Hole2D":{"type":"object","description":"A 2D hole in an element defined by closed polylines","properties":{"polygonOutline":{"type":"array","description":"The 2D coordinates of the edge of the hole.","items":{"$ref":"#/$defs/Coordinate2D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the hole.","items":{"$ref":"#/$defs/PolyArc"}}},"additionalProperties":false,"required":["polygonCoordinates"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateZonesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"CreateZonesResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/CreateZonesResult"}')))
def test_create_zones_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.create_zones(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'CreateZones'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/DeleteElementsParameters"}')))
def test_delete_elements_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.delete_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'DeleteElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeleteIssueParameters":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"},"acceptAllElements":{"type":"boolean","description":"Accept all creation/deletion/modification of the deleted issue. By default false."}},"additionalProperties":false,"required":["issueId"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/DeleteIssueParameters"}')))
def test_delete_issue_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.delete_issue(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'DeleteIssue'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeletePropertyDefinitionsParameters":{"type":"object","properties":{"propertyIds":{"type":"array","description":"The identifiers of properties to delete.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}}},"additionalProperties":false,"required":["propertyIds"]},"PropertyIdArrayItem":{"type":"object","description":"A wrapper containing the property identifier.","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/DeletePropertyDefinitionsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeletePropertyDefinitionsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/DeletePropertyDefinitionsResult"}')))
def test_delete_property_definitions_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.delete_property_definitions(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'DeletePropertyDefinitions'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeletePropertyGroupsParameters":{"type":"object","properties":{"propertyGroupIds":{"type":"array","description":"The identifiers of property groups to delete.","items":{"$ref":"#/$defs/PropertyGroupIdArrayItem"}}},"additionalProperties":false,"required":["propertyGroupIds"]},"PropertyGroupIdArrayItem":{"type":"object","description":"A wrapper containing the property group identifier.","properties":{"propertyGroupId":{"$ref":"#/$defs/PropertyGroupId"}},"additionalProperties":false,"required":["propertyGroupId"]},"PropertyGroupId":{"type":"object","description":"The identifier of a property group.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/DeletePropertyGroupsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DeletePropertyGroupsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/DeletePropertyGroupsResult"}')))
def test_delete_property_groups_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.delete_property_groups(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'DeletePropertyGroups'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"DetachElementsFromIssueParameters":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"},"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["issueId","elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/DetachElementsFromIssueParameters"}')))
def test_detach_elements_from_issue_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.detach_elements_from_issue(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'DetachElementsFromIssue'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ExportIssuesToBCFParameters":{"type":"object","properties":{"issues":{"$ref":"#/$defs/Issues","description":"Leave it empty to export all issues."},"exportPath":{"type":"string","description":"The os path to the bcf file, including it\'s name."},"useExternalId":{"type":"boolean","description":"Use external IFC ID or Archicad IFC ID as referenced in BCF topics."},"alignBySurveyPoint":{"type":"boolean","description":"Align BCF views by Archicad Survey Point or Archicad Project Origin."}},"additionalProperties":false,"required":["exportPath","useExternalId","alignBySurveyPoint"]},"Issues":{"type":"array","description":"A list of Issues.","items":{"$ref":"#/$defs/IssueIdArrayItem"}},"IssueIdArrayItem":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"}},"additionalProperties":false,"required":["issueId"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/ExportIssuesToBCFParameters"}')))
def test_export_issues_to_bcf_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.export_issues_to_bcf(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'ExportIssuesToBCF'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"FilterElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"filters":{"type":"array","items":{"$ref":"#/$defs/ElementFilter"},"minItems":1}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementFilter":{"type":"string","description":"A filter type for an element.","enum":["IsEditable","IsVisibleByLayer","IsVisibleByRenovation","IsVisibleByStructureDisplay","IsVisibleIn3D","OnActualFloor","OnActualLayout","InMyWorkspace","IsIndependent","InCroppedView","HasAccessRight","IsOverriddenByRenovation"]}},"$ref":"#/$defs/FilterElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"FilterElementsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/FilterElementsResult"}')))
def test_filter_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.filter_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'FilterElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"Get3DBoundingBoxesParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/Get3DBoundingBoxesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"Get3DBoundingBoxesResult":{"type":"object","properties":{"boundingBoxes3D":{"$ref":"#/$defs/BoundingBoxes3D"}},"additionalProperties":false,"required":["boundingBoxes3D"]},"BoundingBoxes3D":{"type":"array","description":"A list of 3D bounding boxes.","items":{"$ref":"#/$defs/BoundingBox3DOrError"}},"BoundingBox3DOrError":{"type":"object","description":"A 3D bounding box or an error.","oneOf":[{"$ref":"#/$defs/BoundingBox3DArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"BoundingBox3DArrayItem":{"type":"object","description":"A wrapper containing a 3D bounding box.","properties":{"boundingBox3D":{"$ref":"#/$defs/BoundingBox3D"}},"additionalProperties":false,"required":["boundingBox3D"]},"BoundingBox3D":{"type":"object","description":"A 3D bounding box of an element.","properties":{"xMin":{"type":"number","description":"The minimum X value of the bounding box."},"yMin":{"type":"number","description":"The minimum Y value of the bounding box."},"zMin":{"type":"number","description":"The minimum Z value of the bounding box."},"xMax":{"type":"number","description":"The maximum X value of the bounding box."},"yMax":{"type":"number","description":"The maximum Y value of the bounding box."},"zMax":{"type":"number","description":"The maximum Z value of the bounding box."}},"additionalProperties":false,"required":["xMin","yMin","zMin","xMax","yMax","zMax"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/Get3DBoundingBoxesResult"}')))
def test_get_3d_bounding_boxes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_3d_bounding_boxes(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'Get3DBoundingBoxes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['boundingBoxes3D']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllElementsParameters":{"type":"object","properties":{"filters":{"type":"array","items":{"$ref":"#/$defs/ElementFilter"},"minItems":1},"databases":{"$ref":"#/$defs/Databases"}},"additionalProperties":false,"required":[]},"Databases":{"type":"array","description":"A list of Archicad databases.","items":{"$ref":"#/$defs/DatabaseIdArrayItem"}},"DatabaseIdArrayItem":{"type":"object","properties":{"databaseId":{"$ref":"#/$defs/DatabaseId"}},"additionalProperties":false,"required":["databaseId"]},"DatabaseId":{"type":"object","description":"The identifier of a database","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementFilter":{"type":"string","description":"A filter type for an element.","enum":["IsEditable","IsVisibleByLayer","IsVisibleByRenovation","IsVisibleByStructureDisplay","IsVisibleIn3D","OnActualFloor","OnActualLayout","InMyWorkspace","IsIndependent","InCroppedView","HasAccessRight","IsOverriddenByRenovation"]}},"$ref":"#/$defs/GetAllElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllElementsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"executionResultForDatabases":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/GetAllElementsResult"}')))
def test_get_all_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_all_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetAllElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result == commands.GetAllElementsResult.model_validate(mock_response)


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributesByTypeParameters":{"type":"object","properties":{"attributeType":{"$ref":"#/$defs/AttributeType"}},"additionalProperties":false,"required":["attributeType"]},"AttributeType":{"type":"string","description":"The type of an attribute.","enum":["Layer","Line","Fill","Composite","Surface","LayerCombination","ZoneCategory","Profile","PenTable","MEPSystem","OperationProfile","BuildingMaterial"]}},"$ref":"#/$defs/GetAttributesByTypeParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAttributesByTypeResult":{"type":"object","properties":{"attributes":{"type":"array","description":"Details of attributes.","items":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"index":{"type":"number","description":"Index of the attribute."},"name":{"type":"string","description":"Name of the attribute."}},"additionalProperties":false,"required":["attributeId","index","name"]}}},"additionalProperties":false,"required":["attributes"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAttributesByTypeResult"}')))
def test_get_attributes_by_type_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirAttributeCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_attributes_by_type(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetAttributesByType'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['attributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetBuildingMaterialPhysicalPropertiesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"}},"additionalProperties":false,"required":["attributeIds"]},"AttributeIds":{"type":"array","description":"A list of attributes.","items":{"$ref":"#/$defs/AttributeIdArrayItem"}},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetBuildingMaterialPhysicalPropertiesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetBuildingMaterialPhysicalPropertiesResult":{"type":"object","properties":{"properties":{"type":"array","description":"Physical properties list.","items":{"type":"object","properties":{"properties":{"type":"object","description":"Physical properties.","properties":{"thermalConductivity":{"type":"number","description":"Thermal Conductivity."},"density":{"type":"number","description":"Density."},"heatCapacity":{"type":"number","description":"Heat Capacity."},"embodiedEnergy":{"type":"number","description":"Embodied Energy."},"embodiedCarbon":{"type":"number","description":"Embodied Carbon."}}}}}}},"additionalProperties":false,"required":["properties"]}},"$ref":"#/$defs/GetBuildingMaterialPhysicalPropertiesResult"}')))
def test_get_building_material_physical_properties_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirAttributeCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_building_material_physical_properties(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetBuildingMaterialPhysicalProperties'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['properties']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationsOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"classificationSystemIds":{"$ref":"#/$defs/ClassificationSystemIds"}},"additionalProperties":false,"required":["elements","classificationSystemIds"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ClassificationSystemIds":{"type":"array","description":"A list of classification system identifiers.","items":{"$ref":"#/$defs/ClassificationSystemIdArrayItem"}},"ClassificationSystemIdArrayItem":{"type":"object","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetClassificationsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetClassificationsOfElementsResult":{"type":"object","properties":{"elementClassifications":{"$ref":"#/$defs/ElementClassificationsOrErrors","description":"The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects."}},"additionalProperties":false,"required":["elementClassifications"]},"ElementClassificationsOrErrors":{"type":"array","description":"A list of element classification identifiers or errors.","items":{"$ref":"#/$defs/ElementClassificationOrError"}},"ElementClassificationOrError":{"type":"object","description":"Element classification identifiers or errors.","oneOf":[{"$ref":"#/$defs/ElementClassificationItemArray"},{"$ref":"#/$defs/ErrorItem"}]},"ElementClassificationItemArray":{"description":"A wrapper containing a list of element classification identifiers or errors.","properties":{"classificationIds":{"$ref":"#/$defs/ClassificationIdsOrErrors"}},"additionalProperties":false,"required":["classificationIds"]},"ClassificationIdsOrErrors":{"type":"array","description":"A list of element classification identifiers or errors.","items":{"$ref":"#/$defs/ClassificationIdOrError"}},"ClassificationIdOrError":{"type":"object","description":"A classification identifier or an error.","oneOf":[{"$ref":"#/$defs/ClassificationIdArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"ClassificationIdArrayItem":{"type":"object","description":"A wrapper containing the classification identifier.","properties":{"classificationId":{"$ref":"#/$defs/ClassificationId"}},"additionalProperties":false,"required":["classificationId"]},"ClassificationId":{"type":"object","description":"The element classification identifier.","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"},"classificationItemId":{"$ref":"#/$defs/ClassificationItemId","description":"The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetClassificationsOfElementsResult"}')))
def test_get_classifications_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_classifications_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetClassificationsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elementClassifications']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCollisionsParameters":{"type":"object","properties":{"elementsGroup1":{"$ref":"#/$defs/Elements"},"elementsGroup2":{"$ref":"#/$defs/Elements"},"settings":{"type":"object","properties":{"volumeTolerance":{"type":"number","description":"Intersection body volume greater then this value will be considered as a collision. Default value is 0.001."},"performSurfaceCheck":{"type":"boolean","description":"Enables surface collision check. If disabled the surfaceTolerance value will be ignored. By default it\'s false."},"surfaceTolerance":{"type":"number","description":"Intersection body surface area greater then this value will be considered as a collision. Default value is 0.001."}},"additionalProperties":false,"required":["volumeTolerance","performSurfaceCheck","surfaceTolerance"]}},"additionalProperties":false,"required":["elementsGroup1","elementsGroup2"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetCollisionsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCollisionsResult":{"type":"object","properties":{"collisions":{"type":"array","items":{"type":"object","properties":{"elementId1":{"$ref":"#/$defs/ElementId"},"elementId2":{"$ref":"#/$defs/ElementId"},"hasBodyCollision":{"type":"boolean"},"hasClearenceCollision":{"type":"boolean"}},"additionalProperties":false,"required":["elementId1","elementId2","hasBodyCollision","hasClearenceCollision"]}}},"additionalProperties":false,"required":["collisions"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetCollisionsResult"}')))
def test_get_collisions_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_collisions(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetCollisions'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['collisions']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCommentsFromIssueParameters":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"}},"additionalProperties":false,"required":["issueId"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetCommentsFromIssueParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCommentsFromIssueResult":{"type":"object","properties":{"comments":{"type":"array","description":"A list of existing comments.","items":{"type":"object","properties":{"guid":{"$ref":"#/$defs/Guid","description":"Comment identifier"},"author":{"type":"string","description":"Comment author"},"text":{"type":"string","description":"Comment text"},"status":{"$ref":"#/$defs/IssueCommentStatus"},"creaTime":{"type":"integer","description":"Comment creation time"}},"additionalProperties":false,"required":["guid","author","text","status","creaTime"]}}},"additionalProperties":false,"required":["comments"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"IssueCommentStatus":{"type":"string","description":"The status of an issue comment.","enum":["Error","Warning","Info","Unknown"]}},"$ref":"#/$defs/GetCommentsFromIssueResult"}')))
def test_get_comments_from_issue_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_comments_from_issue(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetCommentsFromIssue'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['comments']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetConnectedElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"connectedElementType":{"$ref":"#/$defs/ElementType"}},"additionalProperties":false,"required":["elements","connectedElementType"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Dimension","RadialDimension","LevelDimension","AngleDimension","Text","Label","Zone","Hatch","Line","PolyLine","Arc","Circle","Spline","Hotspot","CutPlane","Camera","CamSet","Group","SectElem","Drawing","Picture","Detail","Elevation","InteriorElevation","Worksheet","Hotlink","CurtainWall","CurtainWallSegment","CurtainWallFrame","CurtainWallPanel","CurtainWallJunction","CurtainWallAccessory","Shell","Skylight","Morph","ChangeMarker","Stair","Riser","Tread","StairStructure","Railing","RailingToprail","RailingHandrail","RailingRail","RailingPost","RailingInnerPost","RailingBaluster","RailingPanel","RailingSegment","RailingNode","RailingBalusterSet","RailingPattern","RailingToprailEnd","RailingHandrailEnd","RailingRailEnd","RailingToprailConnection","RailingHandrailConnection","RailingRailConnection","RailingEndFinish","BeamSegment","ColumnSegment","Opening","Unknown"]}},"$ref":"#/$defs/GetConnectedElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetConnectedElementsResult":{"type":"object","properties":{"connectedElements":{"type":"array","items":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]}}},"additionalProperties":false,"required":["connectedElements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetConnectedElementsResult"}')))
def test_get_connected_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_connected_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetConnectedElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['connectedElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCurrentRevisionChangesOfLayoutsParameters":{"type":"object","properties":{"layoutDatabaseIds":{"$ref":"#/$defs/Databases"}},"additionalProperties":false,"required":["layoutDatabaseIds"]},"Databases":{"type":"array","description":"A list of Archicad databases.","items":{"$ref":"#/$defs/DatabaseIdArrayItem"}},"DatabaseIdArrayItem":{"type":"object","properties":{"databaseId":{"$ref":"#/$defs/DatabaseId"}},"additionalProperties":false,"required":["databaseId"]},"DatabaseId":{"type":"object","description":"The identifier of a database","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetCurrentRevisionChangesOfLayoutsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCurrentRevisionChangesOfLayoutsResult":{"type":"object","properties":{"currentRevisionChangesOfLayouts":{"$ref":"#/$defs/RevisionChangesOfEntities"}},"additionalProperties":false,"required":["currentRevisionChangesOfLayouts"]},"RevisionChangesOfEntities":{"type":"object","oneOf":[{"$ref":"#/$defs/RevisionChangesArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"RevisionChangesArrayItem":{"type":"object","description":"A wrapper containing an array of revision changes","properties":{"revisionChanges":{"type":"array","items":{"$ref":"#/$defs/RevisionChange"}}},"additionalProperties":false,"required":["revisionChange"]},"RevisionChange":{"type":"object","properties":{"id":{"type":"string"},"description":{"type":"string"},"lastModifiedTime":{"type":"string"},"modifiedByUser":{"type":"string"},"isIssued":{"type":"boolean"},"firstRevisionIssueId":{"$ref":"#/$defs/RevisionIssueId","description":"The identifier of the first issue in which the given change is issued."},"isArchived":{"type":"boolean"},"customSchemeData":{"$ref":"#/$defs/RevisionCustomSchemeData"}},"additionalProperties":false,"required":["id","description","lastModifiedTime","modifiedByUser","isIssued","isArchived"]},"RevisionIssueId":{"type":"object","description":"The identifier of a revision issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"RevisionCustomSchemeData":{"type":"array","items":{"type":"object","properties":{"customSchemeKey":{"$ref":"#/$defs/Guid"},"customSchemeValue":{"type":"string"}},"additionalProperties":false,"required":["customSchemeKey","customSchemeValue"]}},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetCurrentRevisionChangesOfLayoutsResult"}')))
def test_get_current_revision_changes_of_layouts_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirRevisionManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_current_revision_changes_of_layouts(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetCurrentRevisionChangesOfLayouts'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['currentRevisionChangesOfLayouts']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDatabaseIdFromNavigatorItemIdParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"$ref":"#/$defs/NavigatorItemIdArrayItem"}},"NavigatorItemIdArrayItem":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetDatabaseIdFromNavigatorItemIdParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDatabaseIdFromNavigatorItemIdResult":{"type":"object","properties":{"databases":{"$ref":"#/$defs/Databases"}},"additionalProperties":false,"required":["databases"]},"Databases":{"type":"array","description":"A list of Archicad databases.","items":{"$ref":"#/$defs/DatabaseIdArrayItem"}},"DatabaseIdArrayItem":{"type":"object","properties":{"databaseId":{"$ref":"#/$defs/DatabaseId"}},"additionalProperties":false,"required":["databaseId"]},"DatabaseId":{"type":"object","description":"The identifier of a database","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetDatabaseIdFromNavigatorItemIdResult"}')))
def test_get_database_id_from_navigator_item_id_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirNavigatorCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_database_id_from_navigator_item_id(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetDatabaseIdFromNavigatorItemId'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['databases']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailsOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetDetailsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDetailsOfElementsResult":{"type":"object","properties":{"detailsOfElements":{"type":"array","items":{"type":"object","description":"Details of an element.","properties":{"type":{"$ref":"#/$defs/ElementType"},"id":{"type":"string"},"floorIndex":{"type":"number"},"layerIndex":{"type":"number"},"drawIndex":{"type":"number"},"details":{"$ref":"#/$defs/TypeSpecificDetails"}},"additionalProperties":false,"required":["type","id","floorIndex","layerIndex","drawIndex","details"]}}},"additionalProperties":false,"required":["detailsOfElements"]},"TypeSpecificDetails":{"description":"Represents the complete type-specific details of an element. Used as output from GET requests","type":"object","oneOf":[{"$ref":"#/$defs/WallDetails"},{"$ref":"#/$defs/BeamDetails"},{"$ref":"#/$defs/SlabDetails"},{"$ref":"#/$defs/ColumnDetails"},{"$ref":"#/$defs/DetailWorksheetDetails"},{"$ref":"#/$defs/LibPartBasedElementDetails"},{"$ref":"#/$defs/PolylineDetails"},{"$ref":"#/$defs/ZoneDetails"},{"$ref":"#/$defs/CurtainWallDetails"},{"$ref":"#/$defs/CurtainWallSegmentDetails"},{"$ref":"#/$defs/CurtainWallPanelDetails"},{"$ref":"#/$defs/CurtainWallFrameDetails"},{"$ref":"#/$defs/MeshDetails"},{"$ref":"#/$defs/NotYetSupportedElementTypeDetails"}]},"SlabDetails":{"type":"object","properties":{"thickness":{"type":"number","description":"Thickness of the slab."},"level":{"type":"number","description":"Distance of the reference level of the slab from the floor level."},"offsetFromTop":{"type":"number","description":"Vertical distance between the reference level and the top of the slab."},"zCoordinate":{"type":"number"},"polygonOutline":{"type":"array","description":"Polygon outline of the slab.","items":{"$ref":"#/$defs/Coordinate2D"}},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the slab.","items":{"$ref":"#/$defs/PolyArc"}},"holes":{"$ref":"#/$defs/Holes2D"}},"additionalProperties":false,"required":["thickness","level","offsetFromTop","zCoordinate","polygonOutline","holes"]},"Coordinate2D":{"type":"object","description":"2D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."}},"additionalProperties":false,"required":["x","y"]},"PolyArc":{"type":"object","description":"Representation of an arc segment of a two dimensional polygon/polyline.","properties":{"begIndex":{"type":"integer","description":"Node index of one end point of the arc."},"endIndex":{"type":"integer","description":"Node index of the other end point of the arc."},"arcAngle":{"type":"number","description":"Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}},"additionalProperties":false,"required":["begIndex","endIndex","arcAngle"]},"Holes2D":{"type":"array","description":"A list of 2D holes in an element defined by closed polylines","items":{"$ref":"#/$defs/Hole2D"}},"Hole2D":{"type":"object","description":"A 2D hole in an element defined by closed polylines","properties":{"polygonOutline":{"type":"array","description":"The 2D coordinates of the edge of the hole.","items":{"$ref":"#/$defs/Coordinate2D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the hole.","items":{"$ref":"#/$defs/PolyArc"}}},"additionalProperties":false,"required":["polygonCoordinates"]},"MeshDetails":{"type":"object","properties":{"level":{"type":"number","description":"The Z reference level of coordinates."},"skirtType":{"$ref":"#/$defs/MeshSkirtType"},"skirtLevel":{"type":"number","description":"The height of the skirt."},"polygonCoordinates":{"type":"array","description":"The 3D coordinates of the outline polygon of the mesh.","items":{"$ref":"#/$defs/Coordinate3D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the mesh.","items":{"$ref":"#/$defs/PolyArc"}},"holes":{"$ref":"#/$defs/Holes3D"},"sublines":{"type":"array","description":"The leveling sublines inside the polygon of the mesh.","items":{"type":"object","properties":{"coordinates":{"type":"array","description":"The 3D coordinates of the leveling subline of the mesh.","items":{"$ref":"#/$defs/Coordinate3D"}}},"additionalProperties":false,"required":["coordinates"]},"minItems":1}},"additionalProperties":false,"required":["level","skirtType","skirtLevel","polygonCoordinates"]},"Coordinate3D":{"type":"object","description":"3D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."},"z":{"type":"number","description":"Z value of the coordinate."}},"additionalProperties":false,"required":["x","y","z"]},"MeshSkirtType":{"type":"string","description":"The type of the skirt structure.","enum":["SurfaceOnlyWithoutSkirt","WithSkirt","SolidBodyWithSkirt"]},"Holes3D":{"type":"array","description":"A list of 3D holes in an element defined by closed polylines","items":{"$ref":"#/$defs/Hole3D"}},"Hole3D":{"type":"object","description":"A 3D hole in an element defined by closed polylines","properties":{"polygonCoordinates":{"type":"array","description":"The 3D coordinates of the polygon of the hole.","items":{"$ref":"#/$defs/Coordinate3D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the hole.","items":{"$ref":"#/$defs/PolyArc"}}},"additionalProperties":false,"required":["polygonCoordinates"]},"LibPartBasedElementDetails":{"type":"object","properties":{"libPart":{"$ref":"#/$defs/LibPartDetails"},"ownerElementId":{"$ref":"#/$defs/ElementId"},"ownerElementType":{"$ref":"#/$defs/ElementType"}},"additionalProperties":false,"required":["libPart"]},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Dimension","RadialDimension","LevelDimension","AngleDimension","Text","Label","Zone","Hatch","Line","PolyLine","Arc","Circle","Spline","Hotspot","CutPlane","Camera","CamSet","Group","SectElem","Drawing","Picture","Detail","Elevation","InteriorElevation","Worksheet","Hotlink","CurtainWall","CurtainWallSegment","CurtainWallFrame","CurtainWallPanel","CurtainWallJunction","CurtainWallAccessory","Shell","Skylight","Morph","ChangeMarker","Stair","Riser","Tread","StairStructure","Railing","RailingToprail","RailingHandrail","RailingRail","RailingPost","RailingInnerPost","RailingBaluster","RailingPanel","RailingSegment","RailingNode","RailingBalusterSet","RailingPattern","RailingToprailEnd","RailingHandrailEnd","RailingRailEnd","RailingToprailConnection","RailingHandrailConnection","RailingRailConnection","RailingEndFinish","BeamSegment","ColumnSegment","Opening","Unknown"]},"LibPartDetails":{"properties":{"name":{"type":"string"},"parentUnID":{"$ref":"#/$defs/LibPartUnId"},"ownUnID":{"$ref":"#/$defs/LibPartUnId"}},"additionalProperties":false,"required":["name","parentUnID","ownUnID"]},"LibPartUnId":{"type":"object","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"CurtainWallFrameDetails":{"type":"object","properties":{"begCoordinate":{"$ref":"#/$defs/Coordinate3D"},"endCoordinate":{"$ref":"#/$defs/Coordinate3D"},"orientationVector":{"$ref":"#/$defs/Coordinate3D"},"panelConnectionHole":{"type":"object","description":"The parameters of the panel connection hole.","properties":{"d":{"type":"number","description":"Depth of the panel connection hole."},"w":{"type":"number","description":"Width of the panel connection hole."}},"additionalProperties":false,"required":["d","w"]},"frameContour":{"type":"object","description":"The parameters of the frame contour.","properties":{"a1":{"type":"number","description":"Width1 of the frame contour."},"a2":{"type":"number","description":"Width2 of the frame contour."},"b1":{"type":"number","description":"Length1 of the frame contour."},"b2":{"type":"number","description":"Length2 of the frame contour."}},"additionalProperties":false,"required":["a1","a2","b1","b2"]},"segmentIndex":{"type":"number","description":"The index of the curtain wall segment to which this frame belongs."},"className":{"type":"string"},"type":{"type":"string","enum":["Deleted","Division","Corner","Boundary","Custom"]}},"additionalProperties":false,"required":["begCoordinate","endCoordinate","orientationVector","panelConnectionHole","frameContour","segmentIndex","className","type"]},"NotYetSupportedElementTypeDetails":{"type":"object","properties":{"error":{"type":"string"}},"additionalProperties":false,"required":["error"]},"CurtainWallPanelDetails":{"type":"object","properties":{"polygonCoordinates":{"type":"array","description":"The 3D coordinates of the panel polygon.","items":{"$ref":"#/$defs/Coordinate3D"},"minItems":3},"isHidden":{"type":"boolean","description":"Indicates if the panel is hidden (deleted panels remain in the database)."},"segmentIndex":{"type":"number","description":"The index of the curtain wall segment to which this panel belongs."},"className":{"type":"string"},"frames":{"type":"array","description":"The surrounding frames.","items":{"$ref":"#/$defs/ElementIdArrayItem"},"minItems":3}},"additionalProperties":false,"required":["polygonCoordinates","isHidden","segmentIndex","className","frames"]},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"CurtainWallDetails":{"type":"object","properties":{"height":{"type":"number"},"angle":{"type":"number","description":"The rotation angle of the curtain wall in radians."}},"additionalProperties":false,"required":["begCoordinate"]},"BeamDetails":{"type":"object","properties":{"begCoordinate":{"$ref":"#/$defs/Coordinate2D"},"endCoordinate":{"$ref":"#/$defs/Coordinate2D"},"zCoordinate":{"type":"number"},"level":{"type":"number","description":"base height of the beam relative to the floor level"},"offset":{"type":"number","description":"beam ref.line offset from the center"},"slantAngle":{"type":"number","description":"The slant angle of the beam in radians."},"arcAngle":{"type":"number","description":"The arc angle of the (horizontally) curved beam in radians."},"verticalCurveHeight":{"type":"number","description":"The height of the vertical curve of the beam."}},"additionalProperties":false,"required":["begCoordinate","endCoordinate","zCoordinate","level","offset","slantAngle","arcAngle","verticalCurveHeight"]},"DetailWorksheetDetails":{"type":"object","properties":{"basePoint":{"$ref":"#/$defs/Coordinate2D","description":"Coordinate of the base point"},"angle":{"type":"number","description":"The rotation angle (radian) of the marker symbol"},"markerId":{"$ref":"#/$defs/ElementId","description":"Guid of the marker symbol"},"detailName":{"type":"string","description":"Name of the detail/worksheet"},"detailIdStr":{"type":"string","description":"Reference ID of the detail/worksheet"},"isHorizontalMarker":{"type":"boolean","description":"Marker symbol is always horizontal?"},"isWindowOpened":{"type":"boolean","description":"Side (detail/worksheet) window is opened?"},"clipPolygon":{"type":"array","description":"The clip polygon of the detail/worksheet","items":{"$ref":"#/$defs/Coordinate2D"}},"linkData":{"type":"object","description":"The marker link data","properties":{"referredView":{"$ref":"#/$defs/ElementId","description":"Guid of the referred view. Only if the marker refers to a view."},"referredDrawing":{"$ref":"#/$defs/ElementId","description":"Guid of the referred drawing. Only if the marker refers to a drawing."},"referredPMViewPoint":{"$ref":"#/$defs/ElementId","description":"Guid of the referred view point. Only if the marker refers to a view point."}},"additionalProperties":false,"required":[]}},"additionalProperties":false,"required":["basePoint","angle","markerId","detailName","detailIdStr","isHorizontalMarker","isWindowOpened","clipPolygon","linkData"]},"PolylineDetails":{"type":"object","properties":{"coordinates":{"type":"array","items":{"$ref":"#/$defs/Coordinate2D"}},"arcs":{"type":"array","description":"The arcs of the polyline.","items":{"$ref":"#/$defs/PolyArc"}},"zCoordinate":{"type":"number"}},"additionalProperties":false,"required":["coordinates","zCoordinate"]},"ColumnDetails":{"type":"object","properties":{"origin":{"$ref":"#/$defs/Coordinate2D"},"zCoordinate":{"type":"number"},"height":{"type":"number","description":"height relative to bottom"},"bottomOffset":{"type":"number","description":"base level of the column relative to the floor level"}},"additionalProperties":false,"required":["origin","zCoordinate","height","bottomOffset"]},"CurtainWallSegmentDetails":{"type":"object","properties":{"begCoordinate":{"$ref":"#/$defs/Coordinate3D"},"endCoordinate":{"$ref":"#/$defs/Coordinate3D"},"extrusionVector":{"$ref":"#/$defs/Coordinate3D"},"gridOrigin":{"$ref":"#/$defs/Coordinate3D"},"gridAngle":{"type":"number","description":"The angle of the grid in radians."},"arcOrigin":{"$ref":"#/$defs/Coordinate3D"},"isNegativeArc":{"type":"boolean","description":"Indicates if the arc is negative."}},"additionalProperties":false,"required":["begCoordinate","endCoordinate","extrusionVector","gridOrigin","gridAngle"]},"ZoneDetails":{"type":"object","properties":{"name":{"type":"string","description":"Name of the zone."},"numberStr":{"type":"string","description":"Zone number."},"categoryAttributeId":{"$ref":"#/$defs/AttributeId","description":"The identifier of the zone category attribute."},"stampPosition":{"$ref":"#/$defs/Coordinate2D","description":"Position of the origin of the zone stamp."},"isManual":{"type":"boolean","description":"Is the coordinates of the zone manually placed?"},"polygonCoordinates":{"type":"array","description":"The 2D coordinates of the edge of the zone.","items":{"$ref":"#/$defs/Coordinate2D"},"minItems":3},"polygonArcs":{"type":"array","description":"Polygon outline arcs of the zone.","items":{"$ref":"#/$defs/PolyArc"}},"holes":{"$ref":"#/$defs/Holes2D"},"zCoordinate":{"type":"number"}},"additionalProperties":false,"required":["name","numberStr","categoryAttributeId","stampPosition","isManual","polygonCoordinates","zCoordinate"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"WallDetails":{"type":"object","properties":{"geometryType":{"type":"string","enum":["Straight","Trapezoid","Polygonal"]},"begCoordinate":{"$ref":"#/$defs/Coordinate2D"},"endCoordinate":{"$ref":"#/$defs/Coordinate2D"},"zCoordinate":{"type":"number"},"height":{"type":"number","description":"height relative to bottom"},"bottomOffset":{"type":"number","description":"base level of the wall relative to the floor level"},"offset":{"type":"number","description":"wall\'s base line\'s offset from ref. line"},"arcAngle":{"type":"number","description":"The arc angle of the curved wall in radians."},"begThickness":{"type":"number","description":"Thickness at the beginning in case of trapezoid wall"},"endThickness":{"type":"number","description":"Thickness at the end in case of trapezoid wall"},"polygonOutline":{"type":"array","description":"Polygon outline in case of polygonal wall","items":{"$ref":"#/$defs/Coordinate2D"}},"polygonArcs":{"type":"array","description":"Polygon arcs in case of polygonal wall","items":{"$ref":"#/$defs/PolyArc"}}},"additionalProperties":false,"required":["geometryType","begCoordinate","endCoordinate","zCoordinate","height","bottomOffset","offset"]}},"$ref":"#/$defs/GetDetailsOfElementsResult"}')))
def test_get_details_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_details_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetDetailsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['detailsOfElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsAttachedToIssueParameters":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"},"type":{"$ref":"#/$defs/IssueElementType"}},"additionalProperties":false,"required":["issueId","type"]},"IssueElementType":{"type":"string","description":"The attachment type of an element component of an issue.","enum":["Creation","Highlight","Deletion","Modification"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetElementsAttachedToIssueParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsAttachedToIssueResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetElementsAttachedToIssueResult"}')))
def test_get_elements_attached_to_issue_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_elements_attached_to_issue(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetElementsAttachedToIssue'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['elements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsByTypeParameters":{"type":"object","properties":{"elementType":{"$ref":"#/$defs/ElementType"},"filters":{"type":"array","items":{"$ref":"#/$defs/ElementFilter"},"minItems":1},"databases":{"$ref":"#/$defs/Databases"}},"additionalProperties":false,"required":["elementType"]},"Databases":{"type":"array","description":"A list of Archicad databases.","items":{"$ref":"#/$defs/DatabaseIdArrayItem"}},"DatabaseIdArrayItem":{"type":"object","properties":{"databaseId":{"$ref":"#/$defs/DatabaseId"}},"additionalProperties":false,"required":["databaseId"]},"DatabaseId":{"type":"object","description":"The identifier of a database","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Dimension","RadialDimension","LevelDimension","AngleDimension","Text","Label","Zone","Hatch","Line","PolyLine","Arc","Circle","Spline","Hotspot","CutPlane","Camera","CamSet","Group","SectElem","Drawing","Picture","Detail","Elevation","InteriorElevation","Worksheet","Hotlink","CurtainWall","CurtainWallSegment","CurtainWallFrame","CurtainWallPanel","CurtainWallJunction","CurtainWallAccessory","Shell","Skylight","Morph","ChangeMarker","Stair","Riser","Tread","StairStructure","Railing","RailingToprail","RailingHandrail","RailingRail","RailingPost","RailingInnerPost","RailingBaluster","RailingPanel","RailingSegment","RailingNode","RailingBalusterSet","RailingPattern","RailingToprailEnd","RailingHandrailEnd","RailingRailEnd","RailingToprailConnection","RailingHandrailConnection","RailingRailConnection","RailingEndFinish","BeamSegment","ColumnSegment","Opening","Unknown"]},"ElementFilter":{"type":"string","description":"A filter type for an element.","enum":["IsEditable","IsVisibleByLayer","IsVisibleByRenovation","IsVisibleByStructureDisplay","IsVisibleIn3D","OnActualFloor","OnActualLayout","InMyWorkspace","IsIndependent","InCroppedView","HasAccessRight","IsOverriddenByRenovation"]}},"$ref":"#/$defs/GetElementsByTypeParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetElementsByTypeResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"executionResultForDatabases":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/GetElementsByTypeResult"}')))
def test_get_elements_by_type_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_elements_by_type(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetElementsByType'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result == commands.GetElementsByTypeResult.model_validate(mock_response)


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetFavoritesByTypeParameters":{"type":"object","properties":{"elementType":{"$ref":"#/$defs/ElementType"}},"additionalProperties":false,"required":["elementType"]},"ElementType":{"type":"string","description":"The type of an element.","enum":["Wall","Column","Beam","Window","Door","Object","Lamp","Slab","Roof","Mesh","Dimension","RadialDimension","LevelDimension","AngleDimension","Text","Label","Zone","Hatch","Line","PolyLine","Arc","Circle","Spline","Hotspot","CutPlane","Camera","CamSet","Group","SectElem","Drawing","Picture","Detail","Elevation","InteriorElevation","Worksheet","Hotlink","CurtainWall","CurtainWallSegment","CurtainWallFrame","CurtainWallPanel","CurtainWallJunction","CurtainWallAccessory","Shell","Skylight","Morph","ChangeMarker","Stair","Riser","Tread","StairStructure","Railing","RailingToprail","RailingHandrail","RailingRail","RailingPost","RailingInnerPost","RailingBaluster","RailingPanel","RailingSegment","RailingNode","RailingBalusterSet","RailingPattern","RailingToprailEnd","RailingHandrailEnd","RailingRailEnd","RailingToprailConnection","RailingHandrailConnection","RailingRailConnection","RailingEndFinish","BeamSegment","ColumnSegment","Opening","Unknown"]}},"$ref":"#/$defs/GetFavoritesByTypeParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetFavoritesByTypeResult":{"type":"object","properties":{"favorites":{"$ref":"#/$defs/Favorites"}},"additionalProperties":false,"required":["favorites"]},"Favorites":{"type":"array","description":"A list of favorite names","items":{"type":"string","description":"The name of a favorite."}}},"$ref":"#/$defs/GetFavoritesByTypeResult"}')))
def test_get_favorites_by_type_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirFavoritesCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_favorites_by_type(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetFavoritesByType'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['favorites']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetGDLParametersOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetGDLParametersOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetGDLParametersOfElementsResult":{"type":"object","properties":{"gdlParametersOfElements":{"type":"array","description":"The GDL parameters of elements.","items":{"$ref":"#/$defs/GDLParameterList"}}},"additionalProperties":false,"required":["gdlParametersOfElements"]},"GDLParameterList":{"type":"object","description":"The list of GDL parameters.","properties":{"parameters":{"$ref":"#/$defs/GDLParameterArray"}},"additionalProperties":false,"required":["parameters"]},"GDLParameterArray":{"type":"array","description":"The list of GDL parameters.","items":{"$ref":"#/$defs/GDLParameterDetails"}},"GDLParameterDetails":{"type":"object","description":"Details of a GDL parameter.","properties":{"name":{"type":"string","description":"The name of the parameter."},"index":{"type":"string","description":"The index of the parameter."},"type":{"type":"string","description":"The type of the parameter."},"dimension1":{"type":"number","description":"The 1st dimension of array (in case of array value)."},"dimension2":{"type":"number","description":"The 2nd dimension of array (in case of array value)."},"value":{"description":"The value of the parameter."}},"additionalProperties":false,"required":["index","type","value"]}},"$ref":"#/$defs/GetGDLParametersOfElementsResult"}')))
def test_get_gdl_parameters_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_gdl_parameters_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetGDLParametersOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['gdlParametersOfElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfAttributesParameters":{"type":"object","properties":{"attributeIds":{"$ref":"#/$defs/AttributeIds"},"properties":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["attributeIds","properties"]},"AttributeIds":{"type":"array","description":"A list of attributes.","items":{"$ref":"#/$defs/AttributeIdArrayItem"}},"AttributeIdArrayItem":{"type":"object","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"}},"additionalProperties":false,"required":["attributeId"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","description":"A wrapper containing the property identifier.","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetPropertyValuesOfAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfAttributesResult":{"type":"object","properties":{"propertyValuesForAttributes":{"$ref":"#/$defs/PropertyValuesOrErrorArray","description":"List of property value lists. The order of the outer list is that of the given attributes. The order of the inner lists are that of the given properties."}},"additionalProperties":false,"required":["propertyValuesForAttributes"]},"PropertyValuesOrErrorArray":{"type":"array","description":"A list of property value lists.","items":{"$ref":"#/$defs/PropertyValuesOrError"}},"PropertyValuesOrError":{"type":"object","description":"A list of property values or an error.","oneOf":[{"$ref":"#/$defs/PropertyValuesArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"PropertyValuesArrayItem":{"description":"A wrapper containing the property values.","properties":{"propertyValues":{"$ref":"#/$defs/PropertyValues"}},"additionalProperties":false,"required":["propertyValues"]},"PropertyValues":{"type":"array","description":"A list of property values.","items":{"$ref":"#/$defs/PropertyValueOrErrorItem"}},"PropertyValueOrErrorItem":{"type":"object","description":"A property value or an error","oneOf":[{"$ref":"#/$defs/PropertyValueArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"PropertyValueArrayItem":{"type":"object","description":"A wrapper containing the property value.","properties":{"propertyValue":{"$ref":"#/$defs/PropertyValue"}},"additionalProperties":false,"required":["propertyValue"]},"PropertyValue":{"type":"object","description":"The display string value of a property.","properties":{"value":{"type":"string"}},"additionalProperties":false,"required":["value"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPropertyValuesOfAttributesResult"}')))
def test_get_property_values_of_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_property_values_of_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetPropertyValuesOfAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyValuesForAttributes']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"properties":{"$ref":"#/$defs/PropertyIds"}},"additionalProperties":false,"required":["elements","properties"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"PropertyIds":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyIdArrayItem"}},"PropertyIdArrayItem":{"type":"object","description":"A wrapper containing the property identifier.","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"}},"additionalProperties":false,"required":["propertyId"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetPropertyValuesOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetPropertyValuesOfElementsResult":{"type":"object","properties":{"propertyValuesForElements":{"$ref":"#/$defs/PropertyValuesOrErrorArray","description":"List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."}},"additionalProperties":false,"required":["propertyValuesForElements"]},"PropertyValuesOrErrorArray":{"type":"array","description":"A list of property value lists.","items":{"$ref":"#/$defs/PropertyValuesOrError"}},"PropertyValuesOrError":{"type":"object","description":"A list of property values or an error.","oneOf":[{"$ref":"#/$defs/PropertyValuesArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"PropertyValuesArrayItem":{"description":"A wrapper containing the property values.","properties":{"propertyValues":{"$ref":"#/$defs/PropertyValues"}},"additionalProperties":false,"required":["propertyValues"]},"PropertyValues":{"type":"array","description":"A list of property values.","items":{"$ref":"#/$defs/PropertyValueOrErrorItem"}},"PropertyValueOrErrorItem":{"type":"object","description":"A property value or an error","oneOf":[{"$ref":"#/$defs/PropertyValueArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"PropertyValueArrayItem":{"type":"object","description":"A wrapper containing the property value.","properties":{"propertyValue":{"$ref":"#/$defs/PropertyValue"}},"additionalProperties":false,"required":["propertyValue"]},"PropertyValue":{"type":"object","description":"The display string value of a property.","properties":{"value":{"type":"string"}},"additionalProperties":false,"required":["value"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetPropertyValuesOfElementsResult"}')))
def test_get_property_values_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_property_values_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetPropertyValuesOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['propertyValuesForElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetRevisionChangesOfElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetRevisionChangesOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetRevisionChangesOfElementsResult":{"type":"object","properties":{"revisionChangesOfElements":{"$ref":"#/$defs/RevisionChangesOfEntities"}},"additionalProperties":false,"required":["revisionChangesOfElements"]},"RevisionChangesOfEntities":{"type":"object","oneOf":[{"$ref":"#/$defs/RevisionChangesArrayItem"},{"$ref":"#/$defs/ErrorItem"}]},"RevisionChangesArrayItem":{"type":"object","description":"A wrapper containing an array of revision changes","properties":{"revisionChanges":{"type":"array","items":{"$ref":"#/$defs/RevisionChange"}}},"additionalProperties":false,"required":["revisionChange"]},"RevisionChange":{"type":"object","properties":{"id":{"type":"string"},"description":{"type":"string"},"lastModifiedTime":{"type":"string"},"modifiedByUser":{"type":"string"},"isIssued":{"type":"boolean"},"firstRevisionIssueId":{"$ref":"#/$defs/RevisionIssueId","description":"The identifier of the first issue in which the given change is issued."},"isArchived":{"type":"boolean"},"customSchemeData":{"$ref":"#/$defs/RevisionCustomSchemeData"}},"additionalProperties":false,"required":["id","description","lastModifiedTime","modifiedByUser","isIssued","isArchived"]},"RevisionIssueId":{"type":"object","description":"The identifier of a revision issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"RevisionCustomSchemeData":{"type":"array","items":{"type":"object","properties":{"customSchemeKey":{"$ref":"#/$defs/Guid"},"customSchemeValue":{"type":"string"}},"additionalProperties":false,"required":["customSchemeKey","customSchemeValue"]}},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetRevisionChangesOfElementsResult"}')))
def test_get_revision_changes_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirRevisionManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_revision_changes_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetRevisionChangesOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['revisionChangesOfElements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSubelementsOfHierarchicalElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetSubelementsOfHierarchicalElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSubelementsOfHierarchicalElementsResult":{"type":"object","properties":{"subelements":{"type":"array","items":{"type":"object","description":"Subelements grouped by type.","properties":{"cWallSegments":{"$ref":"#/$defs/Elements"},"cWallFrames":{"$ref":"#/$defs/Elements"},"cWallPanels":{"$ref":"#/$defs/Elements"},"cWallJunctions":{"$ref":"#/$defs/Elements"},"cWallAccessories":{"$ref":"#/$defs/Elements"},"stairRisers":{"$ref":"#/$defs/Elements"},"stairTreads":{"$ref":"#/$defs/Elements"},"stairStructures":{"$ref":"#/$defs/Elements"},"railingNodes":{"$ref":"#/$defs/Elements"},"railingSegments":{"$ref":"#/$defs/Elements"},"railingPosts":{"$ref":"#/$defs/Elements"},"railingRailEnds":{"$ref":"#/$defs/Elements"},"railingRailConnections":{"$ref":"#/$defs/Elements"},"railingHandrailEnds":{"$ref":"#/$defs/Elements"},"railingHandrailConnections":{"$ref":"#/$defs/Elements"},"railingToprailEnds":{"$ref":"#/$defs/Elements"},"railingToprailConnections":{"$ref":"#/$defs/Elements"},"railingRails":{"$ref":"#/$defs/Elements"},"railingToprails":{"$ref":"#/$defs/Elements"},"railingHandrails":{"$ref":"#/$defs/Elements"},"railingPatterns":{"$ref":"#/$defs/Elements"},"railingInnerPosts":{"$ref":"#/$defs/Elements"},"railingPanels":{"$ref":"#/$defs/Elements"},"railingBalusterSets":{"$ref":"#/$defs/Elements"},"railingBalusters":{"$ref":"#/$defs/Elements"},"beamSegments":{"$ref":"#/$defs/Elements"},"columnSegments":{"$ref":"#/$defs/Elements"}}}}},"additionalProperties":false,"required":["subelements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetSubelementsOfHierarchicalElementsResult"}')))
def test_get_subelements_of_hierarchical_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_subelements_of_hierarchical_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetSubelementsOfHierarchicalElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['subelements']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetView2DTransformationsParameters":{"type":"object","properties":{"databases":{"$ref":"#/$defs/Databases"}},"additionalProperties":false,"required":[]},"Databases":{"type":"array","description":"A list of Archicad databases.","items":{"$ref":"#/$defs/DatabaseIdArrayItem"}},"DatabaseIdArrayItem":{"type":"object","properties":{"databaseId":{"$ref":"#/$defs/DatabaseId"}},"additionalProperties":false,"required":["databaseId"]},"DatabaseId":{"type":"object","description":"The identifier of a database","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetView2DTransformationsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetView2DTransformationsResult":{"type":"object","properties":{"transformations":{"type":"array","items":{"$ref":"#/$defs/ViewTransformationsOrError"}}},"additionalProperties":false,"required":["transformations"]},"ViewTransformationsOrError":{"type":"object","oneOf":[{"$ref":"#/$defs/ViewTransformations"},{"$ref":"#/$defs/ErrorItem"}]},"ViewTransformations":{"type":"object","properties":{"zoom":{"type":"object","description":"The actual zoom parameters, rectangular region of the model.","properties":{"xMin":{"type":"number","description":"The minimum X value of the zoom box."},"yMin":{"type":"number","description":"The minimum Y value of the zoom box."},"xMax":{"type":"number","description":"The maximum X value of the zoom box."},"yMax":{"type":"number","description":"The maximum Y value of the zoom box."}},"additionalProperties":false,"required":["xMin","yMin","xMax","yMax"]},"rotation":{"type":"number","description":"The orientation in radian."}},"additionalProperties":false,"required":["zoom","rotation"]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetView2DTransformationsResult"}')))
def test_get_view_2d_transformations_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirNavigatorCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_view_2d_transformations(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetView2DTransformations'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['transformations']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetViewSettingsParameters":{"type":"object","properties":{"navigatorItemIds":{"$ref":"#/$defs/NavigatorItemIds"}},"additionalProperties":false,"required":["navigatorItemIds"]},"NavigatorItemIds":{"type":"array","description":"A list of navigator item identifiers.","items":{"$ref":"#/$defs/NavigatorItemIdArrayItem"}},"NavigatorItemIdArrayItem":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"}},"additionalProperties":false,"required":["navigatorItemId"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetViewSettingsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetViewSettingsResult":{"type":"object","properties":{"viewSettings":{"type":"array","items":{"$ref":"#/$defs/ViewSettingsOrError"}}},"additionalProperties":false,"required":["viewSettings"]},"ViewSettingsOrError":{"type":"object","oneOf":[{"$ref":"#/$defs/ViewSettings"},{"$ref":"#/$defs/ErrorItem"}]},"ViewSettings":{"type":"object","description":"The settings of a navigator view","properties":{"modelViewOptions":{"type":"string","description":"The name of the model view options. If empty, the view has custom model view options."},"layerCombination":{"type":"string","description":"The name of the layer combination. If empty, the view has custom layer combination."},"dimensionStyle":{"type":"string","description":"The name of the dimension style. If empty, the view has custom dimension style."},"penSetName":{"type":"string","description":"The name of the pen set. If empty, the view has custom pen set."},"graphicOverrideCombination":{"type":"string","description":"The name of the graphic override combination. If empty, the view has custom graphic override combination."}},"additionalProperties":false,"required":[]},"ErrorItem":{"type":"object","properties":{"error":{"$ref":"#/$defs/Error"}},"additionalProperties":false,"required":["error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]}},"$ref":"#/$defs/GetViewSettingsResult"}')))
def test_get_view_settings_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirNavigatorCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_view_settings(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetViewSettings'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['viewSettings']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetZoneBoundariesParameters":{"type":"object","properties":{"zoneElementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["zoneElementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetZoneBoundariesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetZoneBoundariesResult":{"type":"object","properties":{"zoneBoundaries":{"type":"array","items":{"type":"object","properties":{"connectedElementId":{"$ref":"#/$defs/ElementId","description":"The unique identifier of the connected element."},"isExternal":{"type":"boolean","description":"True if the boundary is an external one."},"neighbouringZoneElementId":{"$ref":"#/$defs/ElementId","description":"Returns the unique identifer of the other Zone the element connects to if the boundary is internal. Please note that this boundary does not represent the boundary of the element with the other Zone."},"area":{"type":"number","description":"The area of the polygon of the boundary."},"polygonOutline":{"type":"array","description":"The outline polygon of the boundary.","items":{"$ref":"#/$defs/Coordinate3D"}}},"additionalProperties":false,"required":["connectedElementId","isExternal","neighbouringZoneElementId","area","polygonOutline"]}}},"additionalProperties":false,"required":["zoneBoundaries"]},"Coordinate3D":{"type":"object","description":"3D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."},"z":{"type":"number","description":"Z value of the coordinate."}},"additionalProperties":false,"required":["x","y","z"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetZoneBoundariesResult"}')))
def test_get_zone_boundaries_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.get_zone_boundaries(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'GetZoneBoundaries'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['zoneBoundaries']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"HighlightElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"},"highlightedColors":{"type":"array","description":"A list of colors to highlight elements.","items":{"type":"array","description":"Color of the highlighted element as an [r, g, b, a] array. Each component must be in the 0-255 range.","items":{"type":"integer"},"minItems":4,"maxItems":4}},"wireframe3D":{"type":"boolean","description":"Optional parameter. Switch non highlighted elements in the 3D window to wireframe."},"nonHighlightedColor":{"type":"array","description":"Optional parameter. Color of the non highlighted elements as an [r, g, b, a] array. Each component must be in the 0-255 range.","items":{"type":"integer"},"minItems":4,"maxItems":4}},"additionalProperties":false,"required":["elements","highlightedColors"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/HighlightElementsParameters"}')))
def test_highlight_elements_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.highlight_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'HighlightElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ImportIssuesFromBCFParameters":{"type":"object","properties":{"importPath":{"type":"string","description":"The os path to the bcf file, including it\'s name."},"alignBySurveyPoint":{"type":"boolean","description":"Align BCF views by Archicad Survey Point or Archicad Project Origin."}},"additionalProperties":false,"required":["importPath","alignBySurveyPoint"]}},"$ref":"#/$defs/ImportIssuesFromBCFParameters"}')))
def test_import_issues_from_bcf_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.import_issues_from_bcf(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'ImportIssuesFromBCF'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"MoveElementsParameters":{"type":"object","properties":{"elementsWithMoveVectors":{"type":"array","description":"The elements with move vector pairs.","items":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"moveVector":{"type":"object","description":"Move vector of a 3D point.","properties":{"x":{"type":"number","description":"X value of the vector."},"y":{"type":"number","description":"Y value of the vector."},"z":{"type":"number","description":"Z value of the vector."}},"additionalProperties":false,"required":["x","y","z"]},"copy":{"type":"boolean","description":"Optional parameter. If true, then a copy of the element will be moved. By default it\'s false."}},"additionalProperties":false,"required":["elementId","moveVector"]}}},"additionalProperties":false,"required":["elementsWithMoveVectors"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/MoveElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"MoveElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/MoveElementsResult"}')))
def test_move_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.move_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'MoveElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"OpenProjectParameters":{"type":"object","properties":{"projectFilePath":{"type":"string","description":"The target project file to open."}},"additionalProperties":false,"required":["projectFilePath"]}},"$ref":"#/$defs/OpenProjectParameters"}')))
def test_open_project_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.open_project(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'OpenProject'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"PublishPublisherSetParameters":{"type":"object","properties":{"publisherSetName":{"type":"string","description":"The name of the publisher set.","minLength":1},"outputPath":{"type":"string","description":"Full local or LAN path for publishing. Optional, by default the path set in the settings of the publiser set will be used.","minLength":1}},"additionalProperties":false,"required":["publisherSetName"]}},"$ref":"#/$defs/PublishPublisherSetParameters"}')))
def test_publish_publisher_set_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirNavigatorCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.publish_publisher_set(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'PublishPublisherSet'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ReleaseElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/ReleaseElementsParameters"}')))
def test_release_elements_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirTeamworkCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.release_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'ReleaseElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ReserveElementsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/ReserveElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"ReserveElementsResult":{"type":"object","properties":{"executionResult":{"$ref":"#/$defs/ExecutionResult"},"conflicts":{"type":"array","items":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"user":{"type":"object","properties":{"userId":{"type":"number"},"userName":{"type":"string"}},"additionalProperties":false,"required":["userId","userName"]}},"additionalProperties":false,"required":["elementId","user"]}}},"additionalProperties":false,"required":["executionResult"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/ReserveElementsResult"}')))
def test_reserve_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirTeamworkCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.reserve_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'ReserveElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result == commands.ReserveElementsResult.model_validate(mock_response)


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetClassificationsOfElementsParameters":{"type":"object","properties":{"elementClassifications":{"$ref":"#/$defs/ElementClassifications"}},"additionalProperties":false,"required":["elementClassifications"]},"ElementClassifications":{"type":"array","description":"A list of element classification identifiers.","items":{"$ref":"#/$defs/ElementClassification"}},"ElementClassification":{"type":"object","description":"The classification of an element.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"classificationId":{"$ref":"#/$defs/ClassificationId"}},"additionalProperties":false,"required":["elementId","classificationId"]},"ClassificationId":{"type":"object","description":"The element classification identifier.","properties":{"classificationSystemId":{"$ref":"#/$defs/ClassificationSystemId"},"classificationItemId":{"$ref":"#/$defs/ClassificationItemId","description":"The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}},"additionalProperties":false,"required":["classificationSystemId"]},"ClassificationItemId":{"type":"object","description":"The identifier of a classification item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ClassificationSystemId":{"type":"object","description":"The identifier of a classification system.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/SetClassificationsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetClassificationsOfElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/SetClassificationsOfElementsResult"}')))
def test_set_classifications_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_classifications_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetClassificationsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetDetailsOfElementsParameters":{"type":"object","properties":{"elementsWithDetails":{"type":"array","description":"The elements with parameters.","items":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"details":{"type":"object","description":"Details of an element.","properties":{"floorIndex":{"type":"number"},"layerIndex":{"type":"number"},"drawIndex":{"type":"number"},"typeSpecificDetails":{"$ref":"#/$defs/TypeSpecificSettings"}},"additionalProperties":false,"required":[]}},"additionalProperties":false,"required":["elementId","details"]}}},"additionalProperties":false,"required":["elementsWithDetails"]},"TypeSpecificSettings":{"description":"Defines the modifiable type-specific settings for an element. Used as input for SET requests.","type":"object","oneOf":[{"$ref":"#/$defs/WallSettings"}]},"WallSettings":{"type":"object","description":"Settings for modifying a wall.","properties":{"begCoordinate":{"$ref":"#/$defs/Coordinate2D"},"endCoordinate":{"$ref":"#/$defs/Coordinate2D"},"height":{"type":"number","description":"height relative to bottom"},"bottomOffset":{"type":"number","description":"base level of the wall relative to the floor level"},"offset":{"type":"number","description":"wall\'s base line\'s offset from ref. line"},"begThickness":{"type":"number","description":"Thickness at the beginning in case of trapezoid wall"},"endThickness":{"type":"number","description":"Thickness at the end in case of trapezoid wall"}},"additionalProperties":false,"required":[]},"Coordinate2D":{"type":"object","description":"2D coordinate.","properties":{"x":{"type":"number","description":"X value of the coordinate."},"y":{"type":"number","description":"Y value of the coordinate."}},"additionalProperties":false,"required":["x","y"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/SetDetailsOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetDetailsOfElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/SetDetailsOfElementsResult"}')))
def test_set_details_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_details_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetDetailsOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetGDLParametersOfElementsParameters":{"type":"object","properties":{"elementsWithGDLParameters":{"type":"array","description":"The elements with GDL parameters dictionary pairs.","items":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"gdlParameters":{"$ref":"#/$defs/GDLParameterArray"}},"additionalProperties":false,"required":["elementId","gdlParameters"]}}},"additionalProperties":false,"required":["elementsWithGDLParameters"]},"GDLParameterArray":{"type":"array","description":"The list of GDL parameters.","items":{"$ref":"#/$defs/GDLParameterDetails"}},"GDLParameterDetails":{"type":"object","description":"Details of a GDL parameter.","properties":{"name":{"type":"string","description":"The name of the parameter."},"index":{"type":"string","description":"The index of the parameter."},"type":{"type":"string","description":"The type of the parameter."},"dimension1":{"type":"number","description":"The 1st dimension of array (in case of array value)."},"dimension2":{"type":"number","description":"The 2nd dimension of array (in case of array value)."},"value":{"description":"The value of the parameter."}},"additionalProperties":false,"required":["index","type","value"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/SetGDLParametersOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetGDLParametersOfElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/SetGDLParametersOfElementsResult"}')))
def test_set_gdl_parameters_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_gdl_parameters_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetGDLParametersOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetProjectInfoFieldParameters":{"type":"object","properties":{"projectInfoId":{"type":"string","description":"The id of the project info field.","minLength":1},"projectInfoValue":{"type":"string","description":"The new value of the project info field.","minLength":1}},"additionalProperties":false,"required":["projectInfoId","projectInfoValue"]}},"$ref":"#/$defs/SetProjectInfoFieldParameters"}')))
def test_set_project_info_field_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_project_info_field(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetProjectInfoField'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetPropertyValuesOfAttributesParameters":{"type":"object","properties":{"attributePropertyValues":{"$ref":"#/$defs/AttributePropertyValues"}},"additionalProperties":false,"required":["attributePropertyValues"]},"AttributePropertyValues":{"type":"array","description":"A list of attribute property values.","items":{"$ref":"#/$defs/AttributePropertyValue"}},"AttributePropertyValue":{"type":"object","description":"A property value with the identifiers of the property and its owner attribute.","properties":{"attributeId":{"$ref":"#/$defs/AttributeId"},"propertyId":{"$ref":"#/$defs/PropertyId"},"propertyValue":{"$ref":"#/$defs/PropertyValue"}},"additionalProperties":false,"required":["attributeId","propertyId","propertyValue"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"PropertyValue":{"type":"object","description":"The display string value of a property.","properties":{"value":{"type":"string"}},"additionalProperties":false,"required":["value"]},"AttributeId":{"type":"object","description":"The identifier of an attribute.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/SetPropertyValuesOfAttributesParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetPropertyValuesOfAttributesResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/SetPropertyValuesOfAttributesResult"}')))
def test_set_property_values_of_attributes_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_property_values_of_attributes(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetPropertyValuesOfAttributes'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetPropertyValuesOfElementsParameters":{"type":"object","properties":{"elementPropertyValues":{"$ref":"#/$defs/ElementPropertyValues"}},"additionalProperties":false,"required":["elementPropertyValues"]},"ElementPropertyValues":{"type":"array","description":"A list of element property values.","items":{"$ref":"#/$defs/ElementPropertyValue"}},"ElementPropertyValue":{"type":"object","description":"A property value with the identifiers of the property and its owner element.","properties":{"elementId":{"$ref":"#/$defs/ElementId"},"propertyId":{"$ref":"#/$defs/PropertyId"},"propertyValue":{"$ref":"#/$defs/PropertyValue"}},"additionalProperties":false,"required":["elementId","propertyId","propertyValue"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"PropertyValue":{"type":"object","description":"The display string value of a property.","properties":{"value":{"type":"string"}},"additionalProperties":false,"required":["value"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/SetPropertyValuesOfElementsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetPropertyValuesOfElementsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/SetPropertyValuesOfElementsResult"}')))
def test_set_property_values_of_elements_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_property_values_of_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetPropertyValuesOfElements'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetStoriesParameters":{"type":"object","properties":{"stories":{"$ref":"#/$defs/StoriesSettings"}},"additionalProperties":false,"required":["stories"]},"StoriesSettings":{"type":"array","description":"A list of story settings, used as input for creating or modifying multiple stories.","items":{"$ref":"#/$defs/StorySettings"}},"StorySettings":{"type":"object","description":"Contains the configurable settings for creating or modifying a story. Used as input in API requests.","properties":{"dispOnSections":{"type":"boolean","description":"Story level lines should appear on sections and elevations."},"level":{"type":"number","description":"The story level."},"name":{"type":"string","description":"The name of the story."}},"additionalProperties":false,"required":["dispOnSections","level","name"]}},"$ref":"#/$defs/SetStoriesParameters"}')))
def test_set_stories_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_stories(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetStories'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetViewSettingsParameters":{"type":"object","properties":{"navigatorItemIdsWithViewSettings":{"type":"array","items":{"type":"object","properties":{"navigatorItemId":{"$ref":"#/$defs/NavigatorItemId"},"viewSettings":{"$ref":"#/$defs/ViewSettings"}},"additionalProperties":false,"required":["navigatorItemId","viewSettings"]}}},"additionalProperties":false,"required":["navigatorItemIdsWithViewSettings"]},"NavigatorItemId":{"type":"object","description":"The identifier of a navigator item.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ViewSettings":{"type":"object","description":"The settings of a navigator view","properties":{"modelViewOptions":{"type":"string","description":"The name of the model view options. If empty, the view has custom model view options."},"layerCombination":{"type":"string","description":"The name of the layer combination. If empty, the view has custom layer combination."},"dimensionStyle":{"type":"string","description":"The name of the dimension style. If empty, the view has custom dimension style."},"penSetName":{"type":"string","description":"The name of the pen set. If empty, the view has custom pen set."},"graphicOverrideCombination":{"type":"string","description":"The name of the graphic override combination. If empty, the view has custom graphic override combination."}},"additionalProperties":false,"required":[]}},"$ref":"#/$defs/SetViewSettingsParameters"}')), mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"SetViewSettingsResult":{"type":"object","properties":{"executionResults":{"$ref":"#/$defs/ExecutionResults"}},"additionalProperties":false,"required":["executionResults"]},"ExecutionResults":{"type":"array","description":"A list of execution results.","items":{"$ref":"#/$defs/ExecutionResult"}},"ExecutionResult":{"type":"object","description":"The result of the execution.","oneOf":[{"$ref":"#/$defs/SuccessfulExecutionResult"},{"$ref":"#/$defs/FailedExecutionResult"}]},"FailedExecutionResult":{"type":"object","description":"The result of a failed execution.","properties":{"success":{"type":"boolean","enum":[false]},"error":{"$ref":"#/$defs/Error","description":"The details of an execution failure."}},"additionalProperties":false,"required":["success","error"]},"Error":{"type":"object","description":"The details of an error.","properties":{"code":{"type":"integer","description":"The code of the error."},"message":{"type":"string","description":"The error message."}},"additionalProperties":false,"required":["code","message"]},"SuccessfulExecutionResult":{"type":"object","description":"The result of a successful execution.","properties":{"success":{"type":"boolean","enum":[true]}},"additionalProperties":false,"required":["success"]}},"$ref":"#/$defs/SetViewSettingsResult"}')))
def test_set_view_settings_logic(input_data: dict, mock_response: dict):
    # 1. ARRANGE
    command_group = TapirNavigatorCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.set_view_settings(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'SetViewSettings'
    assert set(args[1].keys()) == set(input_data.keys())
    assert normalize_for_comparison(result) == mock_response['executionResults']


@given(input_data=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"UpdateDrawingsParameters":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/UpdateDrawingsParameters"}')))
def test_update_drawings_logic(input_data: dict):
    # 1. ARRANGE
    command_group = TapirNavigatorCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = {'success': True}

    # 2. ACT
    kwargs = {camel_to_snake(k): v for k, v in input_data.items()}
    result = command_group.update_drawings(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once()
    args, _ = command_group._core.post_tapir_command.call_args
    assert args[0] == 'UpdateDrawings'
    assert set(args[1].keys()) == set(input_data.keys())
    assert result is None


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAddOnVersionResult":{"type":"object","properties":{"version":{"type":"string","description":"Version number in the form of \\"1.1.1\\".","minLength":1}},"additionalProperties":false,"required":["version"]}},"$ref":"#/$defs/GetAddOnVersionResult"}')))
def test_get_add_on_version_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirApplicationCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_add_on_version(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetAddOnVersion')
    assert normalize_for_comparison(result) == mock_response['version']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetAllPropertiesResult":{"type":"object","properties":{"properties":{"type":"array","description":"A list of property identifiers.","items":{"$ref":"#/$defs/PropertyDetails"}}},"additionalProperties":false,"required":["properties"]},"PropertyDetails":{"type":"object","description":"The details of the property.","properties":{"propertyId":{"$ref":"#/$defs/PropertyId"},"propertyType":{"type":"string","enum":["StaticBuiltIn","DynamicBuiltIn","Custom"]},"propertyGroupName":{"type":"string"},"propertyName":{"type":"string"},"propertyCollectionType":{"type":"string","enum":["Undefined","Single","List","SingleChoiceEnumeration","MultipleChoiceEnumeration"]},"propertyValueType":{"type":"string","enum":["Undefined","Integer","Real","String","Boolean","Guid"]},"propertyMeasureType":{"type":"string","enum":["Undefined","Default","Length","Area","Volume","Angle"]},"propertyIsEditable":{"type":"boolean"}},"additionalProperties":false,"required":["propertyId","propertyType","propertyGroupName","propertyName","propertyCollectionType","propertyValueType","propertyMeasureType","propertyIsEditable"]},"PropertyId":{"type":"object","description":"The identifier of a property.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetAllPropertiesResult"}')))
def test_get_all_properties_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirPropertyCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_all_properties(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetAllProperties')
    assert normalize_for_comparison(result) == mock_response['properties']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetArchicadLocationResult":{"type":"object","properties":{"archicadLocation":{"type":"string","description":"The location of the Archicad executable in the filesystem.","minLength":1}},"additionalProperties":false,"required":["archicadLocation"]}},"$ref":"#/$defs/GetArchicadLocationResult"}')))
def test_get_archicad_location_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirApplicationCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_archicad_location(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetArchicadLocation')
    assert normalize_for_comparison(result) == mock_response['archicadLocation']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetCurrentWindowTypeResult":{"type":"object","properties":{"currentWindowType":{"$ref":"#/$defs/WindowType"}},"additionalProperties":false,"required":["currentWindowType"]},"WindowType":{"type":"string","description":"The type of a window.","enum":["FloorPlan","Section","Details","3DModel","Layout","Drawing","CustomText","CustomDraw","MasterLayout","Elevation","InteriorElevation","Worksheet","Report","3DDocument","External3D","Movie3D","MovieRendering","Rendering","ModelCompare","Interactive Schedule","Unknown"]}},"$ref":"#/$defs/GetCurrentWindowTypeResult"}')))
def test_get_current_window_type_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirApplicationCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_current_window_type(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetCurrentWindowType')
    assert normalize_for_comparison(result) == mock_response['currentWindowType']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetDocumentRevisionsResult":{"type":"object","properties":{"documentRevisions":{"type":"array","items":{"$ref":"#/$defs/DocumentRevision"}}},"additionalProperties":false,"required":["documentRevisions"]},"DocumentRevision":{"type":"object","properties":{"revisionId":{"$ref":"#/$defs/DocumentRevisionId"},"id":{"type":"string"},"finalId":{"type":"string"},"ownerUser":{"type":"string"},"status":{"type":"string","enum":["Actual","Issued"]},"changes":{"type":"array","description":"All changes belong to the given document revision.","items":{"type":"object","properties":{"id":{"type":"string"}},"additionalProperties":false,"required":["id"]}},"layoutInfo":{"$ref":"#/$defs/LayoutInfo"}},"additionalProperties":false,"required":["revisionId","id","finalId","ownerUser","status","layoutInfo"]},"DocumentRevisionId":{"type":"object","description":"The identifier of a document revision.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"LayoutInfo":{"type":"object","properties":{"id":{"type":"string"},"databaseId":{"$ref":"#/$defs/DatabaseId"},"name":{"type":"string"},"masterLayoutName":{"type":"string"},"width":{"type":"number"},"height":{"type":"number"},"subsetId":{"type":"string"},"subsetName":{"type":"string"},"ownerUser":{"type":"string"},"customSchemeData":{"$ref":"#/$defs/RevisionCustomSchemeData"}},"additionalProperties":false,"required":["id","databaseId","name","masterLayoutName","width","height","subsetId","subsetName","ownerUser"]},"RevisionCustomSchemeData":{"type":"array","items":{"type":"object","properties":{"customSchemeKey":{"$ref":"#/$defs/Guid"},"customSchemeValue":{"type":"string"}},"additionalProperties":false,"required":["customSchemeKey","customSchemeValue"]}},"DatabaseId":{"type":"object","description":"The identifier of a database","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetDocumentRevisionsResult"}')))
def test_get_document_revisions_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirRevisionManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_document_revisions(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetDocumentRevisions')
    assert normalize_for_comparison(result) == mock_response['documentRevisions']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetGeoLocationResult":{"type":"object","properties":{"projectLocation":{"type":"object","properties":{"longitude":{"type":"number","description":"longitude in degrees"},"latitude":{"type":"number","description":"latitude in degrees"},"altitude":{"type":"number","description":"altitude in meters"},"north":{"type":"number","description":"north direction in radians"}},"additionalProperties":false,"required":["longitude","latitude","altitude","north"]},"surveyPoint":{"type":"object","properties":{"position":{"type":"object","properties":{"eastings":{"type":"number","description":"Location along the easting of the coordinate system of the target map coordinate reference system."},"northings":{"type":"number","description":"Location along the northing of the coordinate system of the target map coordinate reference system."},"elevation":{"type":"number","description":"Orthogonal height relative to the vertical datum specified."}},"additionalProperties":false,"required":["eastings","northings","elevation"]},"geoReferencingParameters":{"type":"object","properties":{"crsName":{"type":"string","description":"Name by which the coordinate reference system is identified."},"description":{"type":"string","description":"Informal description of this coordinate reference system."},"geodeticDatum":{"type":"string","description":"Name by which this datum is identified."},"verticalDatum":{"type":"string","description":"Name by which the vertical datum is identified."},"mapProjection":{"type":"string","description":"Name by which the map projection is identified."},"mapZone":{"type":"string","description":"Name by which the map zone, relating to the MapProjection, is identified."}},"additionalProperties":false,"required":["crsName","description","geodeticDatum","verticalDatum","mapProjection","mapZone"]}},"additionalProperties":false,"required":["position","geoReferencingParameters"]}},"additionalProperties":false,"required":["projectLocation","surveyPoint"]}},"$ref":"#/$defs/GetGeoLocationResult"}')))
def test_get_geo_location_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_geo_location(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetGeoLocation')
    assert result == commands.GetGeoLocationResult.model_validate(mock_response)


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetHotlinksResult":{"type":"object","properties":{"hotlinks":{"$ref":"#/$defs/Hotlinks"}},"additionalProperties":false,"required":["hotlinks"]},"Hotlinks":{"type":"array","description":"A list of hotlink nodes.","items":{"$ref":"#/$defs/Hotlink"}},"Hotlink":{"type":"object","description":"The details of a hotlink node.","properties":{"location":{"type":"string","description":"The path of the hotlink file."}},"additionalProperties":false,"required":["location"]}},"$ref":"#/$defs/GetHotlinksResult"}')))
def test_get_hotlinks_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_hotlinks(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetHotlinks')
    assert normalize_for_comparison(result) == mock_response['hotlinks']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetIssuesResult":{"type":"object","properties":{"issues":{"type":"array","description":"A list of existing issues.","items":{"type":"object","properties":{"issueId":{"$ref":"#/$defs/IssueId"},"name":{"type":"string","description":"Issue name"},"parentIssueId":{"$ref":"#/$defs/IssueId"},"creaTime":{"type":"integer","description":"Issue creation time"},"modiTime":{"type":"integer","description":"Issue modification time"},"tagText":{"type":"string","description":"Issue tag text - labels"},"tagTextElementId":{"$ref":"#/$defs/ElementId"},"isTagTextElemVisible":{"type":"boolean","description":"The visibility of the attached tag text element"}},"additionalProperties":false,"required":["issueId","name","parentIssueId","creaTime","modiTime","tagText","tagTextElementId","isTagTextElemVisible"]}}},"additionalProperties":false,"required":["issues"]},"IssueId":{"type":"object","description":"The identifier of an issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetIssuesResult"}')))
def test_get_issues_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirIssueManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_issues(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetIssues')
    assert normalize_for_comparison(result) == mock_response['issues']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetLibrariesResult":{"type":"object","properties":{"libraries":{"type":"array","description":"A list of project libraries.","items":{"type":"object","description":"Library","properties":{"name":{"type":"string","description":"Library name."},"path":{"type":"string","description":"A filesystem path to library location."},"type":{"type":"string","description":"Library type."},"available":{"type":"boolean","description":"Is library not missing."},"readOnly":{"type":"boolean","description":"Is library not writable."},"twServerUrl":{"type":"string","description":"URL address of the TeamWork server hosting the library."},"urlWebLibrary":{"type":"string","description":"URL of the downloaded Internet library."}},"additionalProperties":false,"required":["name","type","path"]}}},"additionalProperties":false,"required":["libraries"]}},"$ref":"#/$defs/GetLibrariesResult"}')))
def test_get_libraries_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirLibraryCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_libraries(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetLibraries')
    assert normalize_for_comparison(result) == mock_response['libraries']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetModelViewOptionsResult":{"type":"object","properties":{"modelViewOptions":{"type":"array","items":{"type":"object","description":"Represents the model view options.","properties":{"name":{"type":"string"}},"additionalProperties":false,"required":["name"]}}},"additionalProperties":false,"required":["modelViewOptions"]}},"$ref":"#/$defs/GetModelViewOptionsResult"}')))
def test_get_model_view_options_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirNavigatorCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_model_view_options(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetModelViewOptions')
    assert normalize_for_comparison(result) == mock_response['modelViewOptions']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetProjectInfoFieldsResult":{"type":"object","properties":{"fields":{"type":"array","description":"A list of project info fields.","items":{"type":"object","properties":{"projectInfoId":{"type":"string","description":"The id of the project info field."},"projectInfoName":{"type":"string","description":"The name of the project info field visible on UI."},"projectInfoValue":{"type":"string","description":"The value of the project info field."}}}}},"additionalProperties":false,"required":["fields"]}},"$ref":"#/$defs/GetProjectInfoFieldsResult"}')))
def test_get_project_info_fields_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_project_info_fields(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetProjectInfoFields')
    assert normalize_for_comparison(result) == mock_response['fields']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetProjectInfoResult":{"type":"object","properties":{"isUntitled":{"type":"boolean","description":"True, if the project is not saved yet."},"isTeamwork":{"type":"boolean","description":"True, if the project is a Teamwork (BIMcloud) project."},"projectLocation":{"type":"string","description":"The location of the project in the filesystem or a BIMcloud project reference.","minLength":1},"projectPath":{"type":"string","description":"The path of the project. A filesystem path or a BIMcloud server relative path.","minLength":1},"projectName":{"type":"string","description":"The name of the project.","minLength":1}},"additionalProperties":false,"required":["isUntitled","isTeamwork"]}},"$ref":"#/$defs/GetProjectInfoResult"}')))
def test_get_project_info_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_project_info(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetProjectInfo')
    assert result == commands.GetProjectInfoResult.model_validate(mock_response)


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetRevisionChangesResult":{"type":"object","properties":{"revisionChanges":{"type":"array","items":{"$ref":"#/$defs/RevisionChange"}}},"additionalProperties":false,"required":["revisionChanges"]},"RevisionChange":{"type":"object","properties":{"id":{"type":"string"},"description":{"type":"string"},"lastModifiedTime":{"type":"string"},"modifiedByUser":{"type":"string"},"isIssued":{"type":"boolean"},"firstRevisionIssueId":{"$ref":"#/$defs/RevisionIssueId","description":"The identifier of the first issue in which the given change is issued."},"isArchived":{"type":"boolean"},"customSchemeData":{"$ref":"#/$defs/RevisionCustomSchemeData"}},"additionalProperties":false,"required":["id","description","lastModifiedTime","modifiedByUser","isIssued","isArchived"]},"RevisionIssueId":{"type":"object","description":"The identifier of a revision issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"RevisionCustomSchemeData":{"type":"array","items":{"type":"object","properties":{"customSchemeKey":{"$ref":"#/$defs/Guid"},"customSchemeValue":{"type":"string"}},"additionalProperties":false,"required":["customSchemeKey","customSchemeValue"]}}},"$ref":"#/$defs/GetRevisionChangesResult"}')))
def test_get_revision_changes_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirRevisionManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_revision_changes(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetRevisionChanges')
    assert normalize_for_comparison(result) == mock_response['revisionChanges']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetRevisionIssuesResult":{"type":"object","properties":{"revisionIssues":{"type":"array","items":{"$ref":"#/$defs/RevisionIssue"}}},"additionalProperties":false,"required":["revisionIssues"]},"RevisionIssue":{"type":"object","properties":{"revisionIssueId":{"$ref":"#/$defs/RevisionIssueId"},"id":{"type":"string"},"description":{"type":"string"},"issueTime":{"type":"string"},"issuedByUser":{"type":"string"},"overrideRevisionIDOfAllIncludedLayouts":{"type":"boolean"},"createNewRevisionInAllIncludedLayouts":{"type":"boolean"},"markersVisibleSinceIndex":{"type":"integer"},"isIssued":{"type":"boolean"},"documentRevisions":{"$ref":"#/$defs/DocumentRevisionReferences"},"customSchemeData":{"$ref":"#/$defs/RevisionCustomSchemeData"}},"additionalProperties":false,"required":["revisionIssueId","id","description","issueTime","issuedByUser","overrideRevisionIDOfAllIncludedLayouts","createNewRevisionInAllIncludedLayouts","isIssued"]},"RevisionIssueId":{"type":"object","description":"The identifier of a revision issue.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"},"RevisionCustomSchemeData":{"type":"array","items":{"type":"object","properties":{"customSchemeKey":{"$ref":"#/$defs/Guid"},"customSchemeValue":{"type":"string"}},"additionalProperties":false,"required":["customSchemeKey","customSchemeValue"]}},"DocumentRevisionReferences":{"type":"array","description":"All document revisions belong to the current issue.","items":{"$ref":"#/$defs/DocumentRevisionReference"}},"DocumentRevisionReference":{"type":"object","description":"A reference to a document revision belonging to the current issue","properties":{"revisionId":{"$ref":"#/$defs/DocumentRevisionId"}},"additionalProperties":false,"required":["revisionId"]},"DocumentRevisionId":{"type":"object","description":"The identifier of a document revision.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]}},"$ref":"#/$defs/GetRevisionIssuesResult"}')))
def test_get_revision_issues_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirRevisionManagementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_revision_issues(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetRevisionIssues')
    assert normalize_for_comparison(result) == mock_response['revisionIssues']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetSelectedElementsResult":{"type":"object","properties":{"elements":{"$ref":"#/$defs/Elements"}},"additionalProperties":false,"required":["elements"]},"Elements":{"type":"array","description":"A list of elements.","items":{"$ref":"#/$defs/ElementIdArrayItem"}},"ElementIdArrayItem":{"type":"object","properties":{"elementId":{"$ref":"#/$defs/ElementId"}},"additionalProperties":false,"required":["elementId"]},"ElementId":{"type":"object","description":"The identifier of an element.","properties":{"guid":{"$ref":"#/$defs/Guid"}},"additionalProperties":false,"required":["guid"]},"Guid":{"type":"string","description":"A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.","format":"uuid","pattern":"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}},"$ref":"#/$defs/GetSelectedElementsResult"}')))
def test_get_selected_elements_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirElementCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_selected_elements(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetSelectedElements')
    assert normalize_for_comparison(result) == mock_response['elements']


@given(mock_response=from_schema(json.loads('{"$schema":"http://json-schema.org/draft-07/schema#","$defs":{"GetStoriesResult":{"type":"object","properties":{"firstStory":{"type":"integer","description":"First story index."},"lastStory":{"type":"integer","description":"Last story index."},"actStory":{"type":"integer","description":"Actual (currently visible in 2D) story index."},"skipNullFloor":{"type":"boolean","description":"Floor indices above ground-floor level may start with 1 instead of 0."},"stories":{"$ref":"#/$defs/StoriesParameters"}},"additionalProperties":false,"required":["firstStory","lastStory","actStory","skipNullFloor","stories"]},"StoriesParameters":{"type":"array","description":"A list of project stories, each with their complete parameters.","items":{"$ref":"#/$defs/StoryParameters"}},"StoryParameters":{"type":"object","description":"Represents all parameters of a single project story, including its unique identifiers. Used in API responses.","properties":{"index":{"type":"integer","description":"The story index."},"floorId":{"type":"integer","description":"Unique ID of the story."},"dispOnSections":{"type":"boolean","description":"Story level lines should appear on sections and elevations."},"level":{"type":"number","description":"The story level."},"name":{"type":"string","description":"The name of the story."}},"additionalProperties":false,"required":["index","floorId","dispOnSections","level","name"]}},"$ref":"#/$defs/GetStoriesResult"}')))
def test_get_stories_logic(mock_response: dict):
    # 1. ARRANGE
    command_group = TapirProjectCommands(core=MagicMock())
    command_group._core.post_tapir_command.return_value = mock_response

    # 2. ACT
    kwargs = {}
    result = command_group.get_stories(**kwargs)

    # 3. ASSERT
    command_group._core.post_tapir_command.assert_called_once_with('GetStories')
    assert result == commands.GetStoriesResult.model_validate(mock_response)