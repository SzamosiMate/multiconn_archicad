
# This file is automatically generated by the pipeline. Do not edit directly.

import pytest
import json
from hypothesis import given, settings, HealthCheck
from hypothesis_jsonschema import from_schema
from typeguard import check_type

# Import modules with aliases to avoid name collisions and improve clarity
import multiconn_archicad.models.tapir.commands as models
import multiconn_archicad.dicts.tapir.commands as dicts

# Increase deadline and disable the 'too_slow' health check for complex models.
settings.register_profile("ci", deadline=1000, suppress_health_check=[HealthCheck.too_slow])
settings.load_profile("ci")
pytestmark = pytest.mark.generated



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"AddCommentToIssueParameters": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}, "author": {"type": "string", "description": "The author of the new comment."}, "status": {"$ref": "#/$defs/IssueCommentStatus"}, "text": {"type": "string", "description": "Comment text to add."}}, "additionalProperties": false, "required": ["issueId", "text"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "IssueCommentStatus": {"type": "string", "description": "The status of an issue comment.", "enum": ["Error", "Warning", "Info", "Unknown"]}}, "$ref": "#/$defs/AddCommentToIssueParameters"}')))
def test_runtime_validation_AddCommentToIssueParameters(data: dict):
    try:
        check_type(data, dicts.AddCommentToIssueParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.AddCommentToIssueParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.AddCommentToIssueParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.AddCommentToIssueParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ApplyFavoritesToElementDefaultsParameters": {"type": "object", "properties": {"favorites": {"$ref": "#/$defs/Favorites"}}, "additionalProperties": false, "required": ["favorites"]}, "Favorites": {"type": "array", "description": "A list of favorite names", "items": {"type": "string", "description": "The name of a favorite."}}}, "$ref": "#/$defs/ApplyFavoritesToElementDefaultsParameters"}')))
def test_runtime_validation_ApplyFavoritesToElementDefaultsParameters(data: dict):
    try:
        check_type(data, dicts.ApplyFavoritesToElementDefaultsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ApplyFavoritesToElementDefaultsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.ApplyFavoritesToElementDefaultsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ApplyFavoritesToElementDefaultsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ApplyFavoritesToElementDefaultsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/ApplyFavoritesToElementDefaultsResult"}')))
def test_runtime_validation_ApplyFavoritesToElementDefaultsResult(data: dict):
    try:
        check_type(data, dicts.ApplyFavoritesToElementDefaultsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ApplyFavoritesToElementDefaultsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.ApplyFavoritesToElementDefaultsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ApplyFavoritesToElementDefaultsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"AttachElementsToIssueParameters": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}, "elements": {"$ref": "#/$defs/Elements"}, "type": {"$ref": "#/$defs/IssueElementType"}}, "additionalProperties": false, "required": ["issueId", "elements", "type"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "IssueElementType": {"type": "string", "description": "The attachment type of an element component of an issue.", "enum": ["Creation", "Highlight", "Deletion", "Modification"]}}, "$ref": "#/$defs/AttachElementsToIssueParameters"}')))
def test_runtime_validation_AttachElementsToIssueParameters(data: dict):
    try:
        check_type(data, dicts.AttachElementsToIssueParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.AttachElementsToIssueParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.AttachElementsToIssueParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.AttachElementsToIssueParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ChangeSelectionOfElementsParameters": {"type": "object", "properties": {"addElementsToSelection": {"$ref": "#/$defs/Elements"}, "removeElementsFromSelection": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": []}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/ChangeSelectionOfElementsParameters"}')))
def test_runtime_validation_ChangeSelectionOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.ChangeSelectionOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ChangeSelectionOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.ChangeSelectionOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ChangeSelectionOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ChangeSelectionOfElementsResult": {"type": "object", "properties": {"executionResultsOfAddToSelection": {"$ref": "#/$defs/ExecutionResults"}, "executionResultsOfRemoveFromSelection": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResultsOfAddToSelection", "executionResultsOfRemoveFromSelection"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/ChangeSelectionOfElementsResult"}')))
def test_runtime_validation_ChangeSelectionOfElementsResult(data: dict):
    try:
        check_type(data, dicts.ChangeSelectionOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ChangeSelectionOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.ChangeSelectionOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ChangeSelectionOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateBuildingMaterialsParameters": {"type": "object", "properties": {"buildingMaterialDataArray": {"type": "array", "description": "Array of data to create new Building Materials.", "items": {"type": "object", "description": "Data to create a Building Material.", "properties": {"name": {"type": "string", "description": "Name."}, "id": {"type": "string", "description": "Identifier."}, "manufacturer": {"type": "string", "description": "Manufacturer."}, "description": {"type": "string", "description": "Decription."}, "connPriority": {"type": "integer", "description": "Intersection priority."}, "cutFillIndex": {"type": "integer", "description": "Index of the Cut Fill."}, "cutFillPen": {"type": "integer", "description": "Cut Fill Foreground Pen."}, "cutFillBackgroundPen": {"type": "integer", "description": "Cut Fill Background Pen."}, "cutSurfaceIndex": {"type": "integer", "description": "Index of the Cut Surface."}, "thermalConductivity": {"type": "number", "description": "Thermal Conductivity."}, "density": {"type": "number", "description": "Density."}, "heatCapacity": {"type": "number", "description": "Heat Capacity."}, "embodiedEnergy": {"type": "number", "description": "Embodied Energy."}, "embodiedCarbon": {"type": "number", "description": "Embodied Carbon."}}, "additionalProperties": false, "required": ["name"]}}, "overwriteExisting": {"type": "boolean", "description": "Overwrite the Building Material if exists with the same name. The default is false."}}, "additionalProperties": false, "required": ["buildingMaterialDataArray"]}}, "$ref": "#/$defs/CreateBuildingMaterialsParameters"}')))
def test_runtime_validation_CreateBuildingMaterialsParameters(data: dict):
    try:
        check_type(data, dicts.CreateBuildingMaterialsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateBuildingMaterialsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateBuildingMaterialsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateBuildingMaterialsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateBuildingMaterialsResult": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attributes.", "items": {"$ref": "#/$defs/AttributeIdArrayItem"}}, "AttributeIdArrayItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateBuildingMaterialsResult"}')))
def test_runtime_validation_CreateBuildingMaterialsResult(data: dict):
    try:
        check_type(data, dicts.CreateBuildingMaterialsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateBuildingMaterialsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateBuildingMaterialsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateBuildingMaterialsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateColumnsParameters": {"type": "object", "properties": {"columnsData": {"type": "array", "description": "Array of data to create Columns.", "items": {"type": "object", "description": "The parameters of the new Column.", "properties": {"coordinates": {"type": "object", "description": "3D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}, "z": {"type": "number", "description": "Z value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y", "z"]}}, "additionalProperties": false, "required": ["coordinates"]}}}, "additionalProperties": false, "required": ["columnsData"]}}, "$ref": "#/$defs/CreateColumnsParameters"}')))
def test_runtime_validation_CreateColumnsParameters(data: dict):
    try:
        check_type(data, dicts.CreateColumnsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateColumnsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateColumnsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateColumnsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateColumnsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateColumnsResult"}')))
def test_runtime_validation_CreateColumnsResult(data: dict):
    try:
        check_type(data, dicts.CreateColumnsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateColumnsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateColumnsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateColumnsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateCompositesParameters": {"type": "object", "properties": {"compositeDataArray": {"type": "array", "description": "Array of data to create Composites.", "items": {"type": "object", "description": "Data to create a Composite.", "properties": {"name": {"type": "string", "description": "Name."}, "useWith": {"type": "array", "description": "Array of types the composite can used with.", "items": {"type": "string", "description": "Element type (Wall, Slab, Roof, or Shell)"}}, "skins": {"type": "array", "description": "Array of skin data.", "items": {"type": "object", "description": "Data to represent a skin.", "properties": {"type": {"type": "string", "description": "Skin type (Core, Finish, or Other)"}, "buildingMaterialId": {"$ref": "#/$defs/AttributeIdArrayItem"}, "framePen": {"type": "integer", "description": "Skin frame pen index."}, "thickness": {"type": "number", "description": "Skin thickness (in meters)."}}, "additionalProperties": false, "required": ["type", "buildingMaterialId", "framePen", "thickness"]}}, "separators": {"type": "array", "description": "Array of skin separator data. The number of items must be the number of skins plus one.", "items": {"type": "object", "description": "Data to represent a skin separator.", "properties": {"lineTypeId": {"$ref": "#/$defs/AttributeIdArrayItem"}, "linePen": {"type": "integer", "description": "Separator line pen index."}}, "additionalProperties": false, "required": ["lineTypeId", "linePen"]}}}, "additionalProperties": false, "required": ["name", "skins", "separators"]}}, "overwriteExisting": {"type": "boolean", "description": "Overwrite the Composite if exists with the same name. The default is false."}}, "additionalProperties": false, "required": ["compositeDataArray"]}, "AttributeIdArrayItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateCompositesParameters"}')))
def test_runtime_validation_CreateCompositesParameters(data: dict):
    try:
        check_type(data, dicts.CreateCompositesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateCompositesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateCompositesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateCompositesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateCompositesResult": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attributes.", "items": {"$ref": "#/$defs/AttributeIdArrayItem"}}, "AttributeIdArrayItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateCompositesResult"}')))
def test_runtime_validation_CreateCompositesResult(data: dict):
    try:
        check_type(data, dicts.CreateCompositesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateCompositesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateCompositesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateCompositesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateFavoritesFromElementsParameters": {"type": "object", "properties": {"favoritesFromElements": {"type": "array", "items": {"type": "object", "description": "The identifier of the element and the name of the new favorite.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "favorite": {"type": "string"}}, "additionalProperties": false, "required": ["elementId", "favorite"]}}}, "additionalProperties": false, "required": ["favoritesFromElements"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateFavoritesFromElementsParameters"}')))
def test_runtime_validation_CreateFavoritesFromElementsParameters(data: dict):
    try:
        check_type(data, dicts.CreateFavoritesFromElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateFavoritesFromElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateFavoritesFromElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateFavoritesFromElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateFavoritesFromElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/CreateFavoritesFromElementsResult"}')))
def test_runtime_validation_CreateFavoritesFromElementsResult(data: dict):
    try:
        check_type(data, dicts.CreateFavoritesFromElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateFavoritesFromElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateFavoritesFromElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateFavoritesFromElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateIssueParameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the issue."}, "parentIssueId": {"$ref": "#/$defs/IssueId"}, "tagText": {"type": "string", "description": "Tag text of the issue, optional."}}, "additionalProperties": false, "required": ["name"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateIssueParameters"}')))
def test_runtime_validation_CreateIssueParameters(data: dict):
    try:
        check_type(data, dicts.CreateIssueParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateIssueParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateIssueParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateIssueParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateIssueResult": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}}, "additionalProperties": false, "required": ["issueId"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateIssueResult"}')))
def test_runtime_validation_CreateIssueResult(data: dict):
    try:
        check_type(data, dicts.CreateIssueResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateIssueResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateIssueResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateIssueResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateLayersParameters": {"type": "object", "properties": {"layerDataArray": {"type": "array", "description": "Array of data to create new Layers.", "items": {"type": "object", "description": "Data to create a Layer.", "properties": {"name": {"type": "string", "description": "Name."}, "isHidden": {"type": "boolean", "description": "Hide/Show."}, "isLocked": {"type": "boolean", "description": "Lock/Unlock."}, "isWireframe": {"type": "boolean", "description": "Force the model to wireframe."}}, "additionalProperties": false, "required": ["name"]}}, "overwriteExisting": {"type": "boolean", "description": "Overwrite the Layer if exists with the same name. The default is false."}}, "additionalProperties": false, "required": ["layerDataArray"]}}, "$ref": "#/$defs/CreateLayersParameters"}')))
def test_runtime_validation_CreateLayersParameters(data: dict):
    try:
        check_type(data, dicts.CreateLayersParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateLayersParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateLayersParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateLayersParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateLayersResult": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attributes.", "items": {"$ref": "#/$defs/AttributeIdArrayItem"}}, "AttributeIdArrayItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateLayersResult"}')))
def test_runtime_validation_CreateLayersResult(data: dict):
    try:
        check_type(data, dicts.CreateLayersResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateLayersResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateLayersResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateLayersResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateMeshesParameters": {"type": "object", "properties": {"meshesData": {"type": "array", "description": "Array of data to create Meshes.", "items": {"type": "object", "description": "The parameters of the new Mesh.", "properties": {"floorIndex": {"type": "integer"}, "level": {"type": "number", "description": "The Z reference level of coordinates."}, "skirtType": {"$ref": "#/$defs/MeshSkirtType"}, "skirtLevel": {"type": "number", "description": "The height of the skirt."}, "polygonCoordinates": {"type": "array", "description": "The 3D coordinates of the outline polygon of the mesh.", "items": {"$ref": "#/$defs/Coordinate3D"}, "minItems": 3}, "polygonArcs": {"type": "array", "description": "Polygon outline arcs of the mesh.", "items": {"$ref": "#/$defs/PolyArc"}}, "holes": {"$ref": "#/$defs/Holes3D"}, "sublines": {"type": "array", "description": "The leveling sublines inside the polygon of the mesh.", "items": {"type": "object", "properties": {"coordinates": {"type": "array", "description": "The 3D coordinates of the leveling subline of the mesh.", "items": {"$ref": "#/$defs/Coordinate3D"}}}, "additionalProperties": false, "required": ["coordinates"]}, "minItems": 1}}, "additionalProperties": false, "required": ["polygonCoordinates"]}}}, "additionalProperties": false, "required": ["meshesData"]}, "Holes3D": {"type": "array", "description": "A list of 3D holes in an element defined by closed polylines", "items": {"$ref": "#/$defs/Hole3D"}}, "Hole3D": {"type": "object", "description": "A 3D hole in an element defined by closed polylines", "properties": {"polygonCoordinates": {"type": "array", "description": "The 3D coordinates of the polygon of the hole.", "items": {"$ref": "#/$defs/Coordinate3D"}, "minItems": 3}, "polygonArcs": {"type": "array", "description": "Polygon outline arcs of the hole.", "items": {"$ref": "#/$defs/PolyArc"}}}, "additionalProperties": false, "required": ["polygonCoordinates"]}, "Coordinate3D": {"type": "object", "description": "3D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}, "z": {"type": "number", "description": "Z value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y", "z"]}, "PolyArc": {"type": "object", "description": "Representation of an arc segment of a two dimensional polygon/polyline.", "properties": {"begIndex": {"type": "integer", "description": "Node index of one end point of the arc."}, "endIndex": {"type": "integer", "description": "Node index of the other end point of the arc."}, "arcAngle": {"type": "number", "description": "Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}}, "additionalProperties": false, "required": ["begIndex", "endIndex", "arcAngle"]}, "MeshSkirtType": {"type": "string", "description": "The type of the skirt structure.", "enum": ["SurfaceOnlyWithoutSkirt", "WithSkirt", "SolidBodyWithSkirt"]}}, "$ref": "#/$defs/CreateMeshesParameters"}')))
def test_runtime_validation_CreateMeshesParameters(data: dict):
    try:
        check_type(data, dicts.CreateMeshesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateMeshesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateMeshesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateMeshesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateMeshesResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateMeshesResult"}')))
def test_runtime_validation_CreateMeshesResult(data: dict):
    try:
        check_type(data, dicts.CreateMeshesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateMeshesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateMeshesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateMeshesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateObjectsParameters": {"type": "object", "properties": {"objectsData": {"type": "array", "description": "Array of data to create Objects.", "items": {"type": "object", "description": "The parameters of the new Object.", "properties": {"libraryPartName": {"type": "string", "description": "The name of the library part to use."}, "coordinates": {"$ref": "#/$defs/Coordinate3D"}, "dimensions": {"$ref": "#/$defs/Dimensions3D"}}, "additionalProperties": false, "required": ["libraryPartName", "coordinates"]}}}, "additionalProperties": false, "required": ["objectsData"]}, "Coordinate3D": {"type": "object", "description": "3D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}, "z": {"type": "number", "description": "Z value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y", "z"]}, "Dimensions3D": {"type": "object", "description": "Dimensions in 3D.", "properties": {"x": {"type": "number", "description": "X dimension."}, "y": {"type": "number", "description": "Y dimension."}, "z": {"type": "number", "description": "Z dimension."}}, "additionalProperties": false, "required": ["x", "y", "z"]}}, "$ref": "#/$defs/CreateObjectsParameters"}')))
def test_runtime_validation_CreateObjectsParameters(data: dict):
    try:
        check_type(data, dicts.CreateObjectsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateObjectsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateObjectsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateObjectsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateObjectsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateObjectsResult"}')))
def test_runtime_validation_CreateObjectsResult(data: dict):
    try:
        check_type(data, dicts.CreateObjectsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateObjectsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateObjectsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateObjectsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreatePolylinesParameters": {"type": "object", "properties": {"polylinesData": {"type": "array", "description": "Array of data to create Polylines.", "items": {"type": "object", "description": "The parameters of the new Polyline.", "properties": {"floorInd": {"type": "number", "description": "The identifier of the floor. Optinal parameter, by default the current floor is used."}, "coordinates": {"type": "array", "description": "The 2D coordinates of the polyline.", "items": {"$ref": "#/$defs/Coordinate2D"}, "minItems": 2}, "arcs": {"type": "array", "description": "The arcs of the polyline.", "items": {"$ref": "#/$defs/PolyArc"}}}, "additionalProperties": false, "required": ["coordinates"]}}}, "additionalProperties": false, "required": ["polylinesData"]}, "Coordinate2D": {"type": "object", "description": "2D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y"]}, "PolyArc": {"type": "object", "description": "Representation of an arc segment of a two dimensional polygon/polyline.", "properties": {"begIndex": {"type": "integer", "description": "Node index of one end point of the arc."}, "endIndex": {"type": "integer", "description": "Node index of the other end point of the arc."}, "arcAngle": {"type": "number", "description": "Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}}, "additionalProperties": false, "required": ["begIndex", "endIndex", "arcAngle"]}}, "$ref": "#/$defs/CreatePolylinesParameters"}')))
def test_runtime_validation_CreatePolylinesParameters(data: dict):
    try:
        check_type(data, dicts.CreatePolylinesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreatePolylinesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreatePolylinesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreatePolylinesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreatePolylinesResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreatePolylinesResult"}')))
def test_runtime_validation_CreatePolylinesResult(data: dict):
    try:
        check_type(data, dicts.CreatePolylinesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreatePolylinesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreatePolylinesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreatePolylinesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreatePropertyDefinitionsParameters": {"type": "object", "properties": {"propertyDefinitions": {"type": "array", "description": "The parameters of the new properties.", "items": {"$ref": "#/$defs/PropertyDefinitionArrayItem"}}}, "additionalProperties": false, "required": ["propertyDefinitions"]}, "PropertyDefinitionArrayItem": {"description": "A wrapper containing a property definition", "type": "object", "properties": {"propertyDefinition": {"$ref": "#/$defs/PropertyDefinition"}}, "additionalProperties": false, "required": ["propertyDefinition"]}, "PropertyDefinition": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "type": {"$ref": "#/$defs/PropertyDataType"}, "isEditable": {"type": "boolean"}, "defaultValue": {"$ref": "#/$defs/PropertyDefaultValue"}, "possibleEnumValues": {"type": "array", "description": "The possible enum values of the property when the property type is enumeration.", "items": {"type": "object", "properties": {"enumValue": {"type": "object", "description": "The description of an enumeration value.", "properties": {"enumValueId": {"$ref": "#/$defs/EnumValueId"}, "displayValue": {"type": "string", "description": "Displayed value of the enumeration."}, "nonLocalizedValue": {"type": "string", "description": "Nonlocalized value of the enumeration if there is one."}}, "additionalProperties": false, "required": ["displayValue"]}}, "additionalProperties": false, "required": ["enumValue"]}}, "availability": {"type": "array", "description": "The identifiers of classification items the new property is available for.", "items": {"$ref": "#/$defs/ClassificationItemIdArrayItem"}}, "group": {"type": "object", "description": "The property group defined by name or id. If both fields exists the id will be used.", "properties": {"propertyGroupId": {"$ref": "#/$defs/PropertyGroupId"}, "name": {"type": "string"}}, "additionalProperties": false, "required": []}}, "additionalProperties": false, "required": ["name", "description", "type", "isEditable", "availability", "group"]}, "PropertyDataType": {"type": "string", "enum": ["number", "integer", "string", "boolean", "length", "area", "volume", "angle", "numberList", "integerList", "stringList", "booleanList", "lengthList", "areaList", "volumeList", "angleList", "singleEnum", "multiEnum"]}, "ClassificationItemIdArrayItem": {"type": "object", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}}, "additionalProperties": false, "required": ["classificationItemId"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyDefaultValue": {"type": "object", "oneOf": [{"$ref": "#/$defs/BasicDefaultValue"}, {"$ref": "#/$defs/ExpressionDefaultValue"}]}, "BasicDefaultValue": {"type": "object", "description": "Default value of the property in case of a basic property value (ie. not an expression).", "properties": {"basicDefaultValue": {"$ref": "#/$defs/PropertyValueDetails"}}, "additionalProperties": false, "required": ["basicDefaultValue"]}, "PropertyValueDetails": {"type": "object", "description": "A normal, userUndefined, notAvailable or notEvaluated property value.", "oneOf": [{"$ref": "#/$defs/NormalOrUserUndefinedPropertyValue"}, {"$ref": "#/$defs/NotAvailablePropertyValue"}]}, "NotAvailablePropertyValue": {"type": "object", "description": "A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).", "properties": {"type": {"$ref": "#/$defs/PropertyDataType"}, "status": {"type": "string", "enum": ["notAvailable"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalOrUserUndefinedPropertyValue": {"type": "object", "description": "A normal or a userUndefined property value.", "oneOf": [{"$ref": "#/$defs/NormalNumberPropertyValue"}, {"$ref": "#/$defs/NormalIntegerPropertyValue"}, {"$ref": "#/$defs/NormalStringPropertyValue"}, {"$ref": "#/$defs/NormalBooleanPropertyValue"}, {"$ref": "#/$defs/NormalLengthPropertyValue"}, {"$ref": "#/$defs/NormalAreaPropertyValue"}, {"$ref": "#/$defs/NormalVolumePropertyValue"}, {"$ref": "#/$defs/NormalAnglePropertyValue"}, {"$ref": "#/$defs/NormalNumberListPropertyValue"}, {"$ref": "#/$defs/NormalIntegerListPropertyValue"}, {"$ref": "#/$defs/NormalStringListPropertyValue"}, {"$ref": "#/$defs/NormalBooleanListPropertyValue"}, {"$ref": "#/$defs/NormalLengthListPropertyValue"}, {"$ref": "#/$defs/NormalAreaListPropertyValue"}, {"$ref": "#/$defs/NormalVolumeListPropertyValue"}, {"$ref": "#/$defs/NormalAngleListPropertyValue"}, {"$ref": "#/$defs/NormalSingleEnumPropertyValue"}, {"$ref": "#/$defs/NormalMultiEnumPropertyValue"}, {"$ref": "#/$defs/UserUndefinedPropertyValue"}]}, "NormalAnglePropertyValue": {"type": "object", "description": "An angle property value containing a real angle. The value is measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angle"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAngleListPropertyValue": {"type": "object", "description": "An angle list property value containing angles in an array. The values are measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angleList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumePropertyValue": {"type": "object", "description": "A volume property value containing a real volume. The value is measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volume"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerListPropertyValue": {"type": "object", "description": "An integer list property value containing integers in an array.", "properties": {"type": {"type": "string", "enum": ["integerList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "integer"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaPropertyValue": {"type": "object", "description": "An area property value containing a real area. The value is measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["area"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalNumberPropertyValue": {"type": "object", "description": "A number property value containing a valid numeric value.", "properties": {"type": {"type": "string", "enum": ["number"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringPropertyValue": {"type": "object", "description": "A string property value containing a valid string.", "properties": {"type": {"type": "string", "enum": ["string"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "string"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalMultiEnumPropertyValue": {"type": "object", "description": "A multiple choice enumeration property value containing the IDs of the selected enum values in an array.", "properties": {"type": {"type": "string", "enum": ["multiEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueIds"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "EnumValueIds": {"type": "array", "description": "A list of enumeration identifiers.", "items": {"$ref": "#/$defs/EnumValueIdArrayItem"}}, "EnumValueIdArrayItem": {"type": "object", "description": "A wrapper containing the identifier of a property enumeration value.", "properties": {"enumValueId": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["enumValueId"]}, "EnumValueId": {"type": "object", "description": "The identifier of a property enumeration value.", "oneOf": [{"$ref": "#/$defs/DisplayValueEnumId"}, {"$ref": "#/$defs/NonLocalizedValueEnumId"}]}, "DisplayValueEnumId": {"type": "object", "description": "An enumeration value identifier using the displayed value.", "properties": {"type": {"type": "string", "enum": ["displayValue"]}, "displayValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "displayValue"]}, "NonLocalizedValueEnumId": {"type": "object", "description": "An enumeration value identifier using the nonlocalized value.", "properties": {"type": {"type": "string", "enum": ["nonLocalizedValue"]}, "nonLocalizedValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "nonLocalizedValue"]}, "NormalNumberListPropertyValue": {"type": "object", "description": "A number list property value containing numbers in an array.", "properties": {"type": {"type": "string", "enum": ["numberList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanPropertyValue": {"type": "object", "description": "A boolean property value containing a valid boolean value.", "properties": {"type": {"type": "string", "enum": ["boolean"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "boolean"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaListPropertyValue": {"type": "object", "description": "An area list property value containing areas in an array. The values are measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["areaList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalLengthListPropertyValue": {"type": "object", "description": "A length list property value containing length values in an array. The values are measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["lengthList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanListPropertyValue": {"type": "object", "description": "A boolean list property value containing boolean values in an array.", "properties": {"type": {"type": "string", "enum": ["booleanList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "boolean"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringListPropertyValue": {"type": "object", "description": "A string list property value containing strings in an array.", "properties": {"type": {"type": "string", "enum": ["stringList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "string"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumeListPropertyValue": {"type": "object", "description": "A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volumeList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalSingleEnumPropertyValue": {"type": "object", "description": "A single enumeration property value containing the ID of the selected enum value.", "properties": {"type": {"type": "string", "enum": ["singleEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerPropertyValue": {"type": "object", "description": "An integer property value containing a valid integer number.", "properties": {"type": {"type": "string", "enum": ["integer"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "integer"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "UserUndefinedPropertyValue": {"type": "object", "description": "A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.", "properties": {"type": {"$ref": "#/$defs/PropertyDataType"}, "status": {"type": "string", "enum": ["userUndefined"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalLengthPropertyValue": {"type": "object", "description": "A length property value containing a real length value. The value is measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["length"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "ExpressionDefaultValue": {"type": "object", "description": "Default value of the property in case of an expression based property value.", "properties": {"expressions": {"type": "array", "items": {"type": "string"}}}, "additionalProperties": false, "required": ["expressions"]}, "PropertyGroupId": {"type": "object", "description": "The identifier of a property group.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/CreatePropertyDefinitionsParameters"}')))
def test_runtime_validation_CreatePropertyDefinitionsParameters(data: dict):
    try:
        check_type(data, dicts.CreatePropertyDefinitionsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreatePropertyDefinitionsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreatePropertyDefinitionsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreatePropertyDefinitionsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreatePropertyDefinitionsResult": {"type": "object", "properties": {"propertyIds": {"$ref": "#/$defs/PropertyIdOrErrorArray"}}, "additionalProperties": false, "required": ["propertyIds"]}, "PropertyIdOrErrorArray": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdOrError"}}, "PropertyIdOrError": {"type": "object", "description": "A propertyId or an error.", "oneOf": [{"$ref": "#/$defs/PropertyIdArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "PropertyIdArrayItem": {"type": "object", "description": "A wrapper containing the property identifier.", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/CreatePropertyDefinitionsResult"}')))
def test_runtime_validation_CreatePropertyDefinitionsResult(data: dict):
    try:
        check_type(data, dicts.CreatePropertyDefinitionsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreatePropertyDefinitionsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreatePropertyDefinitionsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreatePropertyDefinitionsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreatePropertyGroupsParameters": {"type": "object", "properties": {"propertyGroups": {"type": "array", "description": "The parameters of the new property groups.", "items": {"$ref": "#/$defs/PropertyGroupArrayItem"}}}, "additionalProperties": false, "required": ["propertyGroups"]}, "PropertyGroupArrayItem": {"description": "A wrapper containing a property group", "type": "object", "properties": {"propertyGroup": {"$ref": "#/$defs/PropertyGroup"}}, "additionalProperties": false, "required": ["propertyGroup"]}, "PropertyGroup": {"description": "Represents a property group.", "type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}}, "additionalProperties": false, "required": ["name"]}}, "$ref": "#/$defs/CreatePropertyGroupsParameters"}')))
def test_runtime_validation_CreatePropertyGroupsParameters(data: dict):
    try:
        check_type(data, dicts.CreatePropertyGroupsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreatePropertyGroupsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreatePropertyGroupsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreatePropertyGroupsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreatePropertyGroupsResult": {"type": "object", "properties": {"propertyGroupIds": {"type": "array", "description": "The identifiers of the created property groups.", "items": {"$ref": "#/$defs/PropertyGroupIdArrayItem"}}}, "additionalProperties": false, "required": ["propertyGroupIds"]}, "PropertyGroupIdArrayItem": {"type": "object", "description": "A wrapper containing the property group identifier.", "properties": {"propertyGroupId": {"$ref": "#/$defs/PropertyGroupId"}}, "additionalProperties": false, "required": ["propertyGroupId"]}, "PropertyGroupId": {"type": "object", "description": "The identifier of a property group.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreatePropertyGroupsResult"}')))
def test_runtime_validation_CreatePropertyGroupsResult(data: dict):
    try:
        check_type(data, dicts.CreatePropertyGroupsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreatePropertyGroupsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreatePropertyGroupsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreatePropertyGroupsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateSlabsParameters": {"type": "object", "properties": {"slabsData": {"type": "array", "description": "Array of data to create Slabs.", "items": {"type": "object", "description": "The parameters of the new Slab.", "properties": {"level": {"type": "number", "description": "The Z coordinate value of the reference line of the slab."}, "polygonCoordinates": {"type": "array", "description": "The 2D coordinates of the edge of the slab.", "items": {"$ref": "#/$defs/Coordinate2D"}, "minItems": 3}, "polygonArcs": {"type": "array", "description": "Polygon outline arcs of the slab.", "items": {"$ref": "#/$defs/PolyArc"}}, "holes": {"$ref": "#/$defs/Holes2D"}}, "additionalProperties": false, "required": ["level", "polygonCoordinates"]}}}, "additionalProperties": false, "required": ["slabsData"]}, "Coordinate2D": {"type": "object", "description": "2D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y"]}, "Holes2D": {"type": "array", "description": "A list of 2D holes in an element defined by closed polylines", "items": {"$ref": "#/$defs/Hole2D"}}, "Hole2D": {"type": "object", "description": "A 2D hole in an element defined by closed polylines", "properties": {"polygonCoordinates": {"type": "array", "description": "The 2D coordinates of the edge of the hole.", "items": {"$ref": "#/$defs/Coordinate2D"}, "minItems": 3}, "polygonArcs": {"type": "array", "description": "Polygon outline arcs of the hole.", "items": {"$ref": "#/$defs/PolyArc"}}}, "additionalProperties": false, "required": ["polygonCoordinates"]}, "PolyArc": {"type": "object", "description": "Representation of an arc segment of a two dimensional polygon/polyline.", "properties": {"begIndex": {"type": "integer", "description": "Node index of one end point of the arc."}, "endIndex": {"type": "integer", "description": "Node index of the other end point of the arc."}, "arcAngle": {"type": "number", "description": "Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}}, "additionalProperties": false, "required": ["begIndex", "endIndex", "arcAngle"]}}, "$ref": "#/$defs/CreateSlabsParameters"}')))
def test_runtime_validation_CreateSlabsParameters(data: dict):
    try:
        check_type(data, dicts.CreateSlabsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateSlabsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateSlabsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateSlabsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateSlabsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateSlabsResult"}')))
def test_runtime_validation_CreateSlabsResult(data: dict):
    try:
        check_type(data, dicts.CreateSlabsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateSlabsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateSlabsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateSlabsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateZonesParameters": {"type": "object", "properties": {"zonesData": {"type": "array", "description": "Array of data to create Zones.", "items": {"type": "object", "description": "The parameters of the new Zone.", "properties": {"floorIndex": {"type": "number"}, "name": {"type": "string", "description": "Name of the zone."}, "numberStr": {"type": "string", "description": "Zone number."}, "categoryAttributeId": {"$ref": "#/$defs/AttributeId", "description": "The identifier of the zone category attribute."}, "stampPosition": {"$ref": "#/$defs/Coordinate2D", "description": "Position of the origin of the zone stamp."}, "geometry": {"type": "object", "oneOf": [{"$ref": "#/$defs/AutomaticZoneGeometry"}, {"$ref": "#/$defs/ManualZoneGeometry"}]}}, "additionalProperties": false, "required": ["name", "numberStr", "geometry"]}}}, "additionalProperties": false, "required": ["zonesData"]}, "Coordinate2D": {"type": "object", "description": "2D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ManualZoneGeometry": {"type": "object", "description": "Manual zone placement.", "properties": {"polygonCoordinates": {"type": "array", "description": "The 2D coordinates of the edge of the zone.", "items": {"$ref": "#/$defs/Coordinate2D"}, "minItems": 3}, "polygonArcs": {"type": "array", "description": "Polygon outline arcs of the zone.", "items": {"$ref": "#/$defs/PolyArc"}}, "holes": {"$ref": "#/$defs/Holes2D"}}, "additionalProperties": false, "required": ["polygonCoordinates"]}, "Holes2D": {"type": "array", "description": "A list of 2D holes in an element defined by closed polylines", "items": {"$ref": "#/$defs/Hole2D"}}, "Hole2D": {"type": "object", "description": "A 2D hole in an element defined by closed polylines", "properties": {"polygonCoordinates": {"type": "array", "description": "The 2D coordinates of the edge of the hole.", "items": {"$ref": "#/$defs/Coordinate2D"}, "minItems": 3}, "polygonArcs": {"type": "array", "description": "Polygon outline arcs of the hole.", "items": {"$ref": "#/$defs/PolyArc"}}}, "additionalProperties": false, "required": ["polygonCoordinates"]}, "PolyArc": {"type": "object", "description": "Representation of an arc segment of a two dimensional polygon/polyline.", "properties": {"begIndex": {"type": "integer", "description": "Node index of one end point of the arc."}, "endIndex": {"type": "integer", "description": "Node index of the other end point of the arc."}, "arcAngle": {"type": "number", "description": "Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}}, "additionalProperties": false, "required": ["begIndex", "endIndex", "arcAngle"]}, "AutomaticZoneGeometry": {"type": "object", "description": "Automatic zone placement.", "properties": {"referencePosition": {"$ref": "#/$defs/Coordinate2D", "description": "Reference point to automatically find zone."}}, "additionalProperties": false, "required": ["referencePosition"]}}, "$ref": "#/$defs/CreateZonesParameters"}')))
def test_runtime_validation_CreateZonesParameters(data: dict):
    try:
        check_type(data, dicts.CreateZonesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateZonesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateZonesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateZonesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateZonesResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateZonesResult"}')))
def test_runtime_validation_CreateZonesResult(data: dict):
    try:
        check_type(data, dicts.CreateZonesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.CreateZonesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.CreateZonesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.CreateZonesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/DeleteElementsParameters"}')))
def test_runtime_validation_DeleteElementsParameters(data: dict):
    try:
        check_type(data, dicts.DeleteElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.DeleteElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.DeleteElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.DeleteElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteIssueParameters": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}, "acceptAllElements": {"type": "boolean", "description": "Accept all creation/deletion/modification of the deleted issue. By default false."}}, "additionalProperties": false, "required": ["issueId"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/DeleteIssueParameters"}')))
def test_runtime_validation_DeleteIssueParameters(data: dict):
    try:
        check_type(data, dicts.DeleteIssueParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.DeleteIssueParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.DeleteIssueParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.DeleteIssueParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeletePropertyDefinitionsParameters": {"type": "object", "properties": {"propertyIds": {"type": "array", "description": "The identifiers of properties to delete.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}}, "additionalProperties": false, "required": ["propertyIds"]}, "PropertyIdArrayItem": {"type": "object", "description": "A wrapper containing the property identifier.", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/DeletePropertyDefinitionsParameters"}')))
def test_runtime_validation_DeletePropertyDefinitionsParameters(data: dict):
    try:
        check_type(data, dicts.DeletePropertyDefinitionsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.DeletePropertyDefinitionsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.DeletePropertyDefinitionsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.DeletePropertyDefinitionsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeletePropertyDefinitionsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/DeletePropertyDefinitionsResult"}')))
def test_runtime_validation_DeletePropertyDefinitionsResult(data: dict):
    try:
        check_type(data, dicts.DeletePropertyDefinitionsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.DeletePropertyDefinitionsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.DeletePropertyDefinitionsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.DeletePropertyDefinitionsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeletePropertyGroupsParameters": {"type": "object", "properties": {"propertyGroupIds": {"type": "array", "description": "The identifiers of property groups to delete.", "items": {"$ref": "#/$defs/PropertyGroupIdArrayItem"}}}, "additionalProperties": false, "required": ["propertyGroupIds"]}, "PropertyGroupIdArrayItem": {"type": "object", "description": "A wrapper containing the property group identifier.", "properties": {"propertyGroupId": {"$ref": "#/$defs/PropertyGroupId"}}, "additionalProperties": false, "required": ["propertyGroupId"]}, "PropertyGroupId": {"type": "object", "description": "The identifier of a property group.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/DeletePropertyGroupsParameters"}')))
def test_runtime_validation_DeletePropertyGroupsParameters(data: dict):
    try:
        check_type(data, dicts.DeletePropertyGroupsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.DeletePropertyGroupsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.DeletePropertyGroupsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.DeletePropertyGroupsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeletePropertyGroupsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/DeletePropertyGroupsResult"}')))
def test_runtime_validation_DeletePropertyGroupsResult(data: dict):
    try:
        check_type(data, dicts.DeletePropertyGroupsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.DeletePropertyGroupsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.DeletePropertyGroupsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.DeletePropertyGroupsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DetachElementsFromIssueParameters": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}, "elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["issueId", "elements"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/DetachElementsFromIssueParameters"}')))
def test_runtime_validation_DetachElementsFromIssueParameters(data: dict):
    try:
        check_type(data, dicts.DetachElementsFromIssueParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.DetachElementsFromIssueParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.DetachElementsFromIssueParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.DetachElementsFromIssueParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ExportIssuesToBCFParameters": {"type": "object", "properties": {"issues": {"$ref": "#/$defs/Issues", "description": "Leave it empty to export all issues."}, "exportPath": {"type": "string", "description": "The os path to the bcf file, including it\'s name."}, "useExternalId": {"type": "boolean", "description": "Use external IFC ID or Archicad IFC ID as referenced in BCF topics."}, "alignBySurveyPoint": {"type": "boolean", "description": "Align BCF views by Archicad Survey Point or Archicad Project Origin."}}, "additionalProperties": false, "required": ["exportPath", "useExternalId", "alignBySurveyPoint"]}, "Issues": {"type": "array", "description": "A list of Issues.", "items": {"$ref": "#/$defs/IssueIdArrayItem"}}, "IssueIdArrayItem": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}}, "additionalProperties": false, "required": ["issueId"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/ExportIssuesToBCFParameters"}')))
def test_runtime_validation_ExportIssuesToBCFParameters(data: dict):
    try:
        check_type(data, dicts.ExportIssuesToBCFParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ExportIssuesToBCFParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.ExportIssuesToBCFParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ExportIssuesToBCFParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"FilterElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "filters": {"type": "array", "items": {"$ref": "#/$defs/ElementFilter"}, "minItems": 1}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ElementFilter": {"type": "string", "description": "A filter type for an element.", "enum": ["IsEditable", "IsVisibleByLayer", "IsVisibleByRenovation", "IsVisibleByStructureDisplay", "IsVisibleIn3D", "OnActualFloor", "OnActualLayout", "InMyWorkspace", "IsIndependent", "InCroppedView", "HasAccessRight", "IsOverriddenByRenovation"]}}, "$ref": "#/$defs/FilterElementsParameters"}')))
def test_runtime_validation_FilterElementsParameters(data: dict):
    try:
        check_type(data, dicts.FilterElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.FilterElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.FilterElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.FilterElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"FilterElementsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/FilterElementsResult"}')))
def test_runtime_validation_FilterElementsResult(data: dict):
    try:
        check_type(data, dicts.FilterElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.FilterElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.FilterElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.FilterElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GenerateDocumentationParameters": {"type": "object", "properties": {"destinationFolder": {"type": "string", "description": "Destination folder for the generated documentation files.", "minLength": 1}}, "additionalProperties": false, "required": ["destinationFolder"]}}, "$ref": "#/$defs/GenerateDocumentationParameters"}')))
def test_runtime_validation_GenerateDocumentationParameters(data: dict):
    try:
        check_type(data, dicts.GenerateDocumentationParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GenerateDocumentationParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GenerateDocumentationParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GenerateDocumentationParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"Get3DBoundingBoxesParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/Get3DBoundingBoxesParameters"}')))
def test_runtime_validation_Get3DBoundingBoxesParameters(data: dict):
    try:
        check_type(data, dicts.Get3DBoundingBoxesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.Get3DBoundingBoxesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.Get3DBoundingBoxesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.Get3DBoundingBoxesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"Get3DBoundingBoxesResult": {"type": "object", "properties": {"boundingBoxes3D": {"$ref": "#/$defs/BoundingBoxes3D"}}, "additionalProperties": false, "required": ["boundingBoxes3D"]}, "BoundingBoxes3D": {"type": "array", "description": "A list of 3D bounding boxes.", "items": {"$ref": "#/$defs/BoundingBox3DOrError"}}, "BoundingBox3DOrError": {"type": "object", "description": "A 3D bounding box or an error.", "oneOf": [{"$ref": "#/$defs/BoundingBox3DArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "BoundingBox3DArrayItem": {"type": "object", "description": "A wrapper containing a 3D bounding box.", "properties": {"boundingBox3D": {"$ref": "#/$defs/BoundingBox3D"}}, "additionalProperties": false, "required": ["boundingBox3D"]}, "BoundingBox3D": {"type": "object", "description": "A 3D bounding box of an element.", "properties": {"xMin": {"type": "number", "description": "The minimum X value of the bounding box."}, "yMin": {"type": "number", "description": "The minimum Y value of the bounding box."}, "zMin": {"type": "number", "description": "The minimum Z value of the bounding box."}, "xMax": {"type": "number", "description": "The maximum X value of the bounding box."}, "yMax": {"type": "number", "description": "The maximum Y value of the bounding box."}, "zMax": {"type": "number", "description": "The maximum Z value of the bounding box."}}, "additionalProperties": false, "required": ["xMin", "yMin", "zMin", "xMax", "yMax", "zMax"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/Get3DBoundingBoxesResult"}')))
def test_runtime_validation_Get3DBoundingBoxesResult(data: dict):
    try:
        check_type(data, dicts.Get3DBoundingBoxesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.Get3DBoundingBoxesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.Get3DBoundingBoxesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.Get3DBoundingBoxesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAddOnVersionResult": {"type": "object", "properties": {"version": {"type": "string", "description": "Version number in the form of \\"1.1.1\\".", "minLength": 1}}, "additionalProperties": false, "required": ["version"]}}, "$ref": "#/$defs/GetAddOnVersionResult"}')))
def test_runtime_validation_GetAddOnVersionResult(data: dict):
    try:
        check_type(data, dicts.GetAddOnVersionResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetAddOnVersionResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetAddOnVersionResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetAddOnVersionResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllElementsParameters": {"type": "object", "properties": {"filters": {"type": "array", "items": {"$ref": "#/$defs/ElementFilter"}, "minItems": 1}, "databases": {"$ref": "#/$defs/Databases"}}, "additionalProperties": false, "required": []}, "ElementFilter": {"type": "string", "description": "A filter type for an element.", "enum": ["IsEditable", "IsVisibleByLayer", "IsVisibleByRenovation", "IsVisibleByStructureDisplay", "IsVisibleIn3D", "OnActualFloor", "OnActualLayout", "InMyWorkspace", "IsIndependent", "InCroppedView", "HasAccessRight", "IsOverriddenByRenovation"]}, "Databases": {"type": "array", "description": "A list of Archicad databases.", "items": {"$ref": "#/$defs/DatabaseIdArrayItem"}}, "DatabaseIdArrayItem": {"type": "object", "properties": {"databaseId": {"$ref": "#/$defs/DatabaseId"}}, "additionalProperties": false, "required": ["databaseId"]}, "DatabaseId": {"type": "object", "description": "The identifier of a database", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAllElementsParameters"}')))
def test_runtime_validation_GetAllElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetAllElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetAllElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetAllElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetAllElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllElementsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "executionResultForDatabases": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetAllElementsResult"}')))
def test_runtime_validation_GetAllElementsResult(data: dict):
    try:
        check_type(data, dicts.GetAllElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetAllElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetAllElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetAllElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertiesResult": {"type": "object", "properties": {"properties": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyDetails"}}}, "additionalProperties": false, "required": ["properties"]}, "PropertyDetails": {"type": "object", "description": "The details of the property.", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}, "propertyType": {"type": "string", "enum": ["StaticBuiltIn", "DynamicBuiltIn", "Custom"]}, "propertyGroupName": {"type": "string"}, "propertyName": {"type": "string"}, "propertyCollectionType": {"type": "string", "enum": ["Undefined", "Single", "List", "SingleChoiceEnumeration", "MultipleChoiceEnumeration"]}, "propertyValueType": {"type": "string", "enum": ["Undefined", "Integer", "Real", "String", "Boolean", "Guid"]}, "propertyMeasureType": {"type": "string", "enum": ["Undefined", "Default", "Length", "Area", "Volume", "Angle"]}, "propertyIsEditable": {"type": "boolean"}}, "additionalProperties": false, "required": ["propertyId", "propertyType", "propertyGroupName", "propertyName", "propertyCollectionType", "propertyValueType", "propertyMeasureType", "propertyIsEditable"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAllPropertiesResult"}')))
def test_runtime_validation_GetAllPropertiesResult(data: dict):
    try:
        check_type(data, dicts.GetAllPropertiesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetAllPropertiesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetAllPropertiesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetAllPropertiesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetArchicadLocationResult": {"type": "object", "properties": {"archicadLocation": {"type": "string", "description": "The location of the Archicad executable in the filesystem.", "minLength": 1}}, "additionalProperties": false, "required": ["archicadLocation"]}}, "$ref": "#/$defs/GetArchicadLocationResult"}')))
def test_runtime_validation_GetArchicadLocationResult(data: dict):
    try:
        check_type(data, dicts.GetArchicadLocationResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetArchicadLocationResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetArchicadLocationResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetArchicadLocationResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributesByTypeParameters": {"type": "object", "properties": {"attributeType": {"$ref": "#/$defs/AttributeType"}}, "additionalProperties": false, "required": ["attributeType"]}, "AttributeType": {"type": "string", "description": "The type of an attribute.", "enum": ["Layer", "Line", "Fill", "Composite", "Surface", "LayerCombination", "ZoneCategory", "Profile", "PenTable", "MEPSystem", "OperationProfile", "BuildingMaterial"]}}, "$ref": "#/$defs/GetAttributesByTypeParameters"}')))
def test_runtime_validation_GetAttributesByTypeParameters(data: dict):
    try:
        check_type(data, dicts.GetAttributesByTypeParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetAttributesByTypeParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetAttributesByTypeParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetAttributesByTypeParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributesByTypeResult": {"type": "object", "properties": {"attributes": {"type": "array", "description": "Details of attributes.", "items": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "index": {"type": "number", "description": "Index of the attribute."}, "name": {"type": "string", "description": "Name of the attribute."}}, "additionalProperties": false, "required": ["attributeId", "index", "name"]}}}, "additionalProperties": false, "required": ["attributes"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAttributesByTypeResult"}')))
def test_runtime_validation_GetAttributesByTypeResult(data: dict):
    try:
        check_type(data, dicts.GetAttributesByTypeResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetAttributesByTypeResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetAttributesByTypeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetAttributesByTypeResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetBuildingMaterialPhysicalPropertiesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attributes.", "items": {"$ref": "#/$defs/AttributeIdArrayItem"}}, "AttributeIdArrayItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetBuildingMaterialPhysicalPropertiesParameters"}')))
def test_runtime_validation_GetBuildingMaterialPhysicalPropertiesParameters(data: dict):
    try:
        check_type(data, dicts.GetBuildingMaterialPhysicalPropertiesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetBuildingMaterialPhysicalPropertiesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetBuildingMaterialPhysicalPropertiesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetBuildingMaterialPhysicalPropertiesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetBuildingMaterialPhysicalPropertiesResult": {"type": "object", "properties": {"properties": {"type": "array", "description": "Physical properties list.", "items": {"type": "object", "properties": {"properties": {"type": "object", "description": "Physical properties.", "properties": {"thermalConductivity": {"type": "number", "description": "Thermal Conductivity."}, "density": {"type": "number", "description": "Density."}, "heatCapacity": {"type": "number", "description": "Heat Capacity."}, "embodiedEnergy": {"type": "number", "description": "Embodied Energy."}, "embodiedCarbon": {"type": "number", "description": "Embodied Carbon."}}}}}}}, "additionalProperties": false, "required": ["properties"]}}, "$ref": "#/$defs/GetBuildingMaterialPhysicalPropertiesResult"}')))
def test_runtime_validation_GetBuildingMaterialPhysicalPropertiesResult(data: dict):
    try:
        check_type(data, dicts.GetBuildingMaterialPhysicalPropertiesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetBuildingMaterialPhysicalPropertiesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetBuildingMaterialPhysicalPropertiesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetBuildingMaterialPhysicalPropertiesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationsOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "classificationSystemIds": {"$ref": "#/$defs/ClassificationSystemIds"}}, "additionalProperties": false, "required": ["elements", "classificationSystemIds"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ClassificationSystemIds": {"type": "array", "description": "A list of classification system identifiers.", "items": {"$ref": "#/$defs/ClassificationSystemIdArrayItem"}}, "ClassificationSystemIdArrayItem": {"type": "object", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetClassificationsOfElementsParameters"}')))
def test_runtime_validation_GetClassificationsOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetClassificationsOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetClassificationsOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetClassificationsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetClassificationsOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationsOfElementsResult": {"type": "object", "properties": {"elementClassifications": {"$ref": "#/$defs/ElementClassificationsOrErrors", "description": "The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects."}}, "additionalProperties": false, "required": ["elementClassifications"]}, "ElementClassificationsOrErrors": {"type": "array", "description": "A list of element classification identifiers or errors.", "items": {"$ref": "#/$defs/ElementClassificationOrError"}}, "ElementClassificationOrError": {"type": "object", "description": "Element classification identifiers or errors.", "oneOf": [{"$ref": "#/$defs/ElementClassificationItemArray"}, {"$ref": "#/$defs/ErrorItem"}]}, "ElementClassificationItemArray": {"description": "A wrapper containing a list of element classification identifiers or errors.", "properties": {"classificationIds": {"$ref": "#/$defs/ClassificationIdsOrErrors"}}, "additionalProperties": false, "required": ["classificationIds"]}, "ClassificationIdsOrErrors": {"type": "array", "description": "A list of element classification identifiers or errors.", "items": {"$ref": "#/$defs/ClassificationIdOrError"}}, "ClassificationIdOrError": {"type": "object", "description": "A classification identifier or an error.", "oneOf": [{"$ref": "#/$defs/ClassificationIdArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "ClassificationIdArrayItem": {"type": "object", "description": "A wrapper containing the classification identifier.", "properties": {"classificationId": {"$ref": "#/$defs/ClassificationId"}}, "additionalProperties": false, "required": ["classificationId"]}, "ClassificationId": {"type": "object", "description": "The element classification identifier.", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}, "classificationItemId": {"$ref": "#/$defs/ClassificationItemId", "description": "The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetClassificationsOfElementsResult"}')))
def test_runtime_validation_GetClassificationsOfElementsResult(data: dict):
    try:
        check_type(data, dicts.GetClassificationsOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetClassificationsOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetClassificationsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetClassificationsOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCollisionsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "settings": {"type": "object", "properties": {"volumeTolerance": {"type": "number", "description": "Intersection body volume greater then this value will be considered as a collision. Default value is 0.001."}, "performSurfaceCheck": {"type": "boolean", "description": "Enables surface collision check. If disabled the surfaceTolerance value will be ignored. By default it\'s false."}, "surfaceTolerance": {"type": "number", "description": "Intersection body surface area greater then this value will be considered as a collision. Default value is 0.001."}}, "additionalProperties": false, "required": ["volumeTolerance", "performSurfaceCheck", "surfaceTolerance"]}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetCollisionsParameters"}')))
def test_runtime_validation_GetCollisionsParameters(data: dict):
    try:
        check_type(data, dicts.GetCollisionsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetCollisionsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetCollisionsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetCollisionsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCollisionsResult": {"type": "object", "properties": {"collisions": {"type": "array", "items": {"type": "object", "properties": {"elementId1": {"$ref": "#/$defs/ElementId"}, "elementId2": {"$ref": "#/$defs/ElementId"}, "hasBodyCollision": {"type": "boolean"}, "hasClearenceCollision": {"type": "boolean"}}, "additionalProperties": false, "required": ["elementId1", "elementId2", "hasBodyCollision", "hasClearenceCollision"]}}}, "additionalProperties": false, "required": ["collisions"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetCollisionsResult"}')))
def test_runtime_validation_GetCollisionsResult(data: dict):
    try:
        check_type(data, dicts.GetCollisionsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetCollisionsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetCollisionsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetCollisionsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCommentsFromIssueParameters": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}}, "additionalProperties": false, "required": ["issueId"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetCommentsFromIssueParameters"}')))
def test_runtime_validation_GetCommentsFromIssueParameters(data: dict):
    try:
        check_type(data, dicts.GetCommentsFromIssueParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetCommentsFromIssueParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetCommentsFromIssueParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetCommentsFromIssueParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCommentsFromIssueResult": {"type": "object", "properties": {"comments": {"type": "array", "description": "A list of existing comments.", "items": {"type": "object", "properties": {"guid": {"$ref": "#/$defs/Guid", "description": "Comment identifier"}, "author": {"type": "string", "description": "Comment author"}, "text": {"type": "string", "description": "Comment text"}, "status": {"$ref": "#/$defs/IssueCommentStatus"}, "creaTime": {"type": "integer", "description": "Comment creation time"}}, "additionalProperties": false, "required": ["guid", "author", "text", "status", "creaTime"]}}}, "additionalProperties": false, "required": ["comments"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "IssueCommentStatus": {"type": "string", "description": "The status of an issue comment.", "enum": ["Error", "Warning", "Info", "Unknown"]}}, "$ref": "#/$defs/GetCommentsFromIssueResult"}')))
def test_runtime_validation_GetCommentsFromIssueResult(data: dict):
    try:
        check_type(data, dicts.GetCommentsFromIssueResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetCommentsFromIssueResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetCommentsFromIssueResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetCommentsFromIssueResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetConnectedElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "connectedElementType": {"$ref": "#/$defs/ElementType"}}, "additionalProperties": false, "required": ["elements", "connectedElementType"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Dimension", "RadialDimension", "LevelDimension", "AngleDimension", "Text", "Label", "Zone", "Hatch", "Line", "PolyLine", "Arc", "Circle", "Spline", "Hotspot", "CutPlane", "Camera", "CamSet", "Group", "SectElem", "Drawing", "Picture", "Detail", "Elevation", "InteriorElevation", "Worksheet", "Hotlink", "CurtainWall", "CurtainWallSegment", "CurtainWallFrame", "CurtainWallPanel", "CurtainWallJunction", "CurtainWallAccessory", "Shell", "Skylight", "Morph", "ChangeMarker", "Stair", "Riser", "Tread", "StairStructure", "Railing", "RailingToprail", "RailingHandrail", "RailingRail", "RailingPost", "RailingInnerPost", "RailingBaluster", "RailingPanel", "RailingSegment", "RailingNode", "RailingBalusterSet", "RailingPattern", "RailingToprailEnd", "RailingHandrailEnd", "RailingRailEnd", "RailingToprailConnection", "RailingHandrailConnection", "RailingRailConnection", "RailingEndFinish", "BeamSegment", "ColumnSegment", "Opening", "Unknown"]}}, "$ref": "#/$defs/GetConnectedElementsParameters"}')))
def test_runtime_validation_GetConnectedElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetConnectedElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetConnectedElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetConnectedElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetConnectedElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetConnectedElementsResult": {"type": "object", "properties": {"connectedElements": {"type": "array", "items": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}}}, "additionalProperties": false, "required": ["connectedElements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetConnectedElementsResult"}')))
def test_runtime_validation_GetConnectedElementsResult(data: dict):
    try:
        check_type(data, dicts.GetConnectedElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetConnectedElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetConnectedElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetConnectedElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCurrentRevisionChangesOfLayoutsParameters": {"type": "object", "properties": {"layoutDatabaseIds": {"$ref": "#/$defs/Databases"}}, "additionalProperties": false, "required": ["layoutDatabaseIds"]}, "Databases": {"type": "array", "description": "A list of Archicad databases.", "items": {"$ref": "#/$defs/DatabaseIdArrayItem"}}, "DatabaseIdArrayItem": {"type": "object", "properties": {"databaseId": {"$ref": "#/$defs/DatabaseId"}}, "additionalProperties": false, "required": ["databaseId"]}, "DatabaseId": {"type": "object", "description": "The identifier of a database", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetCurrentRevisionChangesOfLayoutsParameters"}')))
def test_runtime_validation_GetCurrentRevisionChangesOfLayoutsParameters(data: dict):
    try:
        check_type(data, dicts.GetCurrentRevisionChangesOfLayoutsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetCurrentRevisionChangesOfLayoutsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetCurrentRevisionChangesOfLayoutsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetCurrentRevisionChangesOfLayoutsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCurrentRevisionChangesOfLayoutsResult": {"type": "object", "properties": {"currentRevisionChangesOfLayouts": {"$ref": "#/$defs/RevisionChangesOfEntities"}}, "additionalProperties": false, "required": ["currentRevisionChangesOfLayouts"]}, "RevisionChangesOfEntities": {"type": "object", "oneOf": [{"$ref": "#/$defs/RevisionChangesArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "RevisionChangesArrayItem": {"type": "object", "description": "A wrapper containing an array of revision changes", "properties": {"revisionChanges": {"type": "array", "items": {"$ref": "#/$defs/RevisionChange"}}}, "additionalProperties": false, "required": ["revisionChange"]}, "RevisionChange": {"type": "object", "properties": {"id": {"type": "string"}, "description": {"type": "string"}, "lastModifiedTime": {"type": "string"}, "modifiedByUser": {"type": "string"}, "isIssued": {"type": "boolean"}, "firstRevisionIssueId": {"$ref": "#/$defs/RevisionIssueId", "description": "The identifier of the first issue in which the given change is issued."}, "isArchived": {"type": "boolean"}, "customSchemeData": {"$ref": "#/$defs/RevisionCustomSchemeData"}}, "additionalProperties": false, "required": ["id", "description", "lastModifiedTime", "modifiedByUser", "isIssued", "isArchived"]}, "RevisionIssueId": {"type": "object", "description": "The identifier of a revision issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "RevisionCustomSchemeData": {"type": "array", "items": {"type": "object", "properties": {"customSchemeKey": {"$ref": "#/$defs/Guid"}, "customSchemeValue": {"type": "string"}}, "additionalProperties": false, "required": ["customSchemeKey", "customSchemeValue"]}}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetCurrentRevisionChangesOfLayoutsResult"}')))
def test_runtime_validation_GetCurrentRevisionChangesOfLayoutsResult(data: dict):
    try:
        check_type(data, dicts.GetCurrentRevisionChangesOfLayoutsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetCurrentRevisionChangesOfLayoutsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetCurrentRevisionChangesOfLayoutsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetCurrentRevisionChangesOfLayoutsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCurrentWindowTypeResult": {"type": "object", "properties": {"currentWindowType": {"$ref": "#/$defs/WindowType"}}, "additionalProperties": false, "required": ["currentWindowType"]}, "WindowType": {"type": "string", "description": "The type of a window.", "enum": ["FloorPlan", "Section", "Details", "3DModel", "Layout", "Drawing", "CustomText", "CustomDraw", "MasterLayout", "Elevation", "InteriorElevation", "Worksheet", "Report", "3DDocument", "External3D", "Movie3D", "MovieRendering", "Rendering", "ModelCompare", "Interactive Schedule", "Unknown"]}}, "$ref": "#/$defs/GetCurrentWindowTypeResult"}')))
def test_runtime_validation_GetCurrentWindowTypeResult(data: dict):
    try:
        check_type(data, dicts.GetCurrentWindowTypeResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetCurrentWindowTypeResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetCurrentWindowTypeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetCurrentWindowTypeResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDatabaseIdFromNavigatorItemIdParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"$ref": "#/$defs/NavigatorItemIdArrayItem"}}, "NavigatorItemIdArrayItem": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDatabaseIdFromNavigatorItemIdParameters"}')))
def test_runtime_validation_GetDatabaseIdFromNavigatorItemIdParameters(data: dict):
    try:
        check_type(data, dicts.GetDatabaseIdFromNavigatorItemIdParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetDatabaseIdFromNavigatorItemIdParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetDatabaseIdFromNavigatorItemIdParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetDatabaseIdFromNavigatorItemIdParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDatabaseIdFromNavigatorItemIdResult": {"type": "object", "properties": {"databases": {"$ref": "#/$defs/Databases"}}, "additionalProperties": false, "required": ["databases"]}, "Databases": {"type": "array", "description": "A list of Archicad databases.", "items": {"$ref": "#/$defs/DatabaseIdArrayItem"}}, "DatabaseIdArrayItem": {"type": "object", "properties": {"databaseId": {"$ref": "#/$defs/DatabaseId"}}, "additionalProperties": false, "required": ["databaseId"]}, "DatabaseId": {"type": "object", "description": "The identifier of a database", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDatabaseIdFromNavigatorItemIdResult"}')))
def test_runtime_validation_GetDatabaseIdFromNavigatorItemIdResult(data: dict):
    try:
        check_type(data, dicts.GetDatabaseIdFromNavigatorItemIdResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetDatabaseIdFromNavigatorItemIdResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetDatabaseIdFromNavigatorItemIdResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetDatabaseIdFromNavigatorItemIdResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailsOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDetailsOfElementsParameters"}')))
def test_runtime_validation_GetDetailsOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetDetailsOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetDetailsOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetDetailsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetDetailsOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailsOfElementsResult": {"type": "object", "properties": {"detailsOfElements": {"type": "array", "items": {"type": "object", "description": "Details of an element.", "properties": {"type": {"const": "Wall"}, "id": {"type": "string"}, "floorIndex": {"type": "number"}, "layerIndex": {"type": "number"}, "drawIndex": {"type": "number"}, "details": {"$ref": "#/$defs/TypeSpecificDetails"}}, "additionalProperties": false, "required": ["type", "id", "floorIndex", "layerIndex", "drawIndex", "details"]}}}, "additionalProperties": false, "required": ["detailsOfElements"]}, "TypeSpecificDetails": {"$ref": "#/$defs/WallDetails"}, "WallDetails": {"type": "object", "properties": {"geometryType": {"type": "string", "enum": ["Straight", "Trapezoid", "Polygonal"]}, "begCoordinate": {"$ref": "#/$defs/Coordinate2D"}, "endCoordinate": {"$ref": "#/$defs/Coordinate2D"}, "zCoordinate": {"type": "number"}, "height": {"type": "number", "description": "height relative to bottom"}, "bottomOffset": {"type": "number", "description": "base level of the wall relative to the floor level"}, "offset": {"type": "number", "description": "wall\'s base line\'s offset from ref. line"}, "arcAngle": {"type": "number", "description": "The arc angle of the curved wall in radians."}, "begThickness": {"type": "number", "description": "Thickness at the beginning in case of trapezoid wall"}, "endThickness": {"type": "number", "description": "Thickness at the end in case of trapezoid wall"}, "polygonOutline": {"type": "array", "description": "Polygon outline in case of polygonal wall", "items": {"$ref": "#/$defs/Coordinate2D"}}, "polygonArcs": {"type": "array", "description": "Polygon arcs in case of polygonal wall", "items": {"$ref": "#/$defs/PolyArc"}}}, "additionalProperties": false, "required": ["geometryType", "begCoordinate", "endCoordinate", "zCoordinate", "height", "bottomOffset", "offset"]}, "Coordinate2D": {"type": "object", "description": "2D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y"]}, "PolyArc": {"type": "object", "description": "Representation of an arc segment of a two dimensional polygon/polyline.", "properties": {"begIndex": {"type": "integer", "description": "Node index of one end point of the arc."}, "endIndex": {"type": "integer", "description": "Node index of the other end point of the arc."}, "arcAngle": {"type": "number", "description": "Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."}}, "additionalProperties": false, "required": ["begIndex", "endIndex", "arcAngle"]}}, "$ref": "#/$defs/GetDetailsOfElementsResult"}')))
def test_runtime_validation_GetDetailsOfElementsResult(data: dict):
    try:
        check_type(data, dicts.GetDetailsOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetDetailsOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetDetailsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetDetailsOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDocumentRevisionsResult": {"type": "object", "properties": {"documentRevisions": {"type": "array", "items": {"$ref": "#/$defs/DocumentRevision"}}}, "additionalProperties": false, "required": ["documentRevisions"]}, "DocumentRevision": {"type": "object", "properties": {"revisionId": {"$ref": "#/$defs/DocumentRevisionId"}, "id": {"type": "string"}, "finalId": {"type": "string"}, "ownerUser": {"type": "string"}, "status": {"type": "string", "enum": ["Actual", "Issued"]}, "changes": {"type": "array", "description": "All changes belong to the given document revision.", "items": {"type": "object", "properties": {"id": {"type": "string"}}, "additionalProperties": false, "required": ["id"]}}, "layoutInfo": {"$ref": "#/$defs/LayoutInfo"}}, "additionalProperties": false, "required": ["revisionId", "id", "finalId", "ownerUser", "status", "layoutInfo"]}, "DocumentRevisionId": {"type": "object", "description": "The identifier of a document revision.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "LayoutInfo": {"type": "object", "properties": {"id": {"type": "string"}, "databaseId": {"$ref": "#/$defs/DatabaseId"}, "name": {"type": "string"}, "masterLayoutName": {"type": "string"}, "width": {"type": "number"}, "height": {"type": "number"}, "subsetId": {"type": "string"}, "subsetName": {"type": "string"}, "ownerUser": {"type": "string"}, "customSchemeData": {"$ref": "#/$defs/RevisionCustomSchemeData"}}, "additionalProperties": false, "required": ["id", "databaseId", "name", "masterLayoutName", "width", "height", "subsetId", "subsetName", "ownerUser"]}, "RevisionCustomSchemeData": {"type": "array", "items": {"type": "object", "properties": {"customSchemeKey": {"$ref": "#/$defs/Guid"}, "customSchemeValue": {"type": "string"}}, "additionalProperties": false, "required": ["customSchemeKey", "customSchemeValue"]}}, "DatabaseId": {"type": "object", "description": "The identifier of a database", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetDocumentRevisionsResult"}')))
def test_runtime_validation_GetDocumentRevisionsResult(data: dict):
    try:
        check_type(data, dicts.GetDocumentRevisionsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetDocumentRevisionsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetDocumentRevisionsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetDocumentRevisionsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsAttachedToIssueParameters": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}, "type": {"$ref": "#/$defs/IssueElementType"}}, "additionalProperties": false, "required": ["issueId", "type"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "IssueElementType": {"type": "string", "description": "The attachment type of an element component of an issue.", "enum": ["Creation", "Highlight", "Deletion", "Modification"]}}, "$ref": "#/$defs/GetElementsAttachedToIssueParameters"}')))
def test_runtime_validation_GetElementsAttachedToIssueParameters(data: dict):
    try:
        check_type(data, dicts.GetElementsAttachedToIssueParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetElementsAttachedToIssueParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetElementsAttachedToIssueParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetElementsAttachedToIssueParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsAttachedToIssueResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetElementsAttachedToIssueResult"}')))
def test_runtime_validation_GetElementsAttachedToIssueResult(data: dict):
    try:
        check_type(data, dicts.GetElementsAttachedToIssueResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetElementsAttachedToIssueResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetElementsAttachedToIssueResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetElementsAttachedToIssueResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsByTypeParameters": {"type": "object", "properties": {"elementType": {"$ref": "#/$defs/ElementType"}, "filters": {"type": "array", "items": {"$ref": "#/$defs/ElementFilter"}, "minItems": 1}, "databases": {"$ref": "#/$defs/Databases"}}, "additionalProperties": false, "required": ["elementType"]}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Dimension", "RadialDimension", "LevelDimension", "AngleDimension", "Text", "Label", "Zone", "Hatch", "Line", "PolyLine", "Arc", "Circle", "Spline", "Hotspot", "CutPlane", "Camera", "CamSet", "Group", "SectElem", "Drawing", "Picture", "Detail", "Elevation", "InteriorElevation", "Worksheet", "Hotlink", "CurtainWall", "CurtainWallSegment", "CurtainWallFrame", "CurtainWallPanel", "CurtainWallJunction", "CurtainWallAccessory", "Shell", "Skylight", "Morph", "ChangeMarker", "Stair", "Riser", "Tread", "StairStructure", "Railing", "RailingToprail", "RailingHandrail", "RailingRail", "RailingPost", "RailingInnerPost", "RailingBaluster", "RailingPanel", "RailingSegment", "RailingNode", "RailingBalusterSet", "RailingPattern", "RailingToprailEnd", "RailingHandrailEnd", "RailingRailEnd", "RailingToprailConnection", "RailingHandrailConnection", "RailingRailConnection", "RailingEndFinish", "BeamSegment", "ColumnSegment", "Opening", "Unknown"]}, "ElementFilter": {"type": "string", "description": "A filter type for an element.", "enum": ["IsEditable", "IsVisibleByLayer", "IsVisibleByRenovation", "IsVisibleByStructureDisplay", "IsVisibleIn3D", "OnActualFloor", "OnActualLayout", "InMyWorkspace", "IsIndependent", "InCroppedView", "HasAccessRight", "IsOverriddenByRenovation"]}, "Databases": {"type": "array", "description": "A list of Archicad databases.", "items": {"$ref": "#/$defs/DatabaseIdArrayItem"}}, "DatabaseIdArrayItem": {"type": "object", "properties": {"databaseId": {"$ref": "#/$defs/DatabaseId"}}, "additionalProperties": false, "required": ["databaseId"]}, "DatabaseId": {"type": "object", "description": "The identifier of a database", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetElementsByTypeParameters"}')))
def test_runtime_validation_GetElementsByTypeParameters(data: dict):
    try:
        check_type(data, dicts.GetElementsByTypeParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetElementsByTypeParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetElementsByTypeParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetElementsByTypeParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsByTypeResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "executionResultForDatabases": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetElementsByTypeResult"}')))
def test_runtime_validation_GetElementsByTypeResult(data: dict):
    try:
        check_type(data, dicts.GetElementsByTypeResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetElementsByTypeResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetElementsByTypeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetElementsByTypeResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetFavoritesByTypeParameters": {"type": "object", "properties": {"elementType": {"$ref": "#/$defs/ElementType"}}, "additionalProperties": false, "required": ["elementType"]}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Dimension", "RadialDimension", "LevelDimension", "AngleDimension", "Text", "Label", "Zone", "Hatch", "Line", "PolyLine", "Arc", "Circle", "Spline", "Hotspot", "CutPlane", "Camera", "CamSet", "Group", "SectElem", "Drawing", "Picture", "Detail", "Elevation", "InteriorElevation", "Worksheet", "Hotlink", "CurtainWall", "CurtainWallSegment", "CurtainWallFrame", "CurtainWallPanel", "CurtainWallJunction", "CurtainWallAccessory", "Shell", "Skylight", "Morph", "ChangeMarker", "Stair", "Riser", "Tread", "StairStructure", "Railing", "RailingToprail", "RailingHandrail", "RailingRail", "RailingPost", "RailingInnerPost", "RailingBaluster", "RailingPanel", "RailingSegment", "RailingNode", "RailingBalusterSet", "RailingPattern", "RailingToprailEnd", "RailingHandrailEnd", "RailingRailEnd", "RailingToprailConnection", "RailingHandrailConnection", "RailingRailConnection", "RailingEndFinish", "BeamSegment", "ColumnSegment", "Opening", "Unknown"]}}, "$ref": "#/$defs/GetFavoritesByTypeParameters"}')))
def test_runtime_validation_GetFavoritesByTypeParameters(data: dict):
    try:
        check_type(data, dicts.GetFavoritesByTypeParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetFavoritesByTypeParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetFavoritesByTypeParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetFavoritesByTypeParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetFavoritesByTypeResult": {"type": "object", "properties": {"favorites": {"$ref": "#/$defs/Favorites"}}, "additionalProperties": false, "required": ["favorites"]}, "Favorites": {"type": "array", "description": "A list of favorite names", "items": {"type": "string", "description": "The name of a favorite."}}}, "$ref": "#/$defs/GetFavoritesByTypeResult"}')))
def test_runtime_validation_GetFavoritesByTypeResult(data: dict):
    try:
        check_type(data, dicts.GetFavoritesByTypeResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetFavoritesByTypeResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetFavoritesByTypeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetFavoritesByTypeResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetGDLParametersOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetGDLParametersOfElementsParameters"}')))
def test_runtime_validation_GetGDLParametersOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetGDLParametersOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetGDLParametersOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetGDLParametersOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetGDLParametersOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetGDLParametersOfElementsResult": {"type": "object", "properties": {"gdlParametersOfElements": {"type": "array", "description": "The GDL parameters of elements.", "items": {"$ref": "#/$defs/GDLParameterList"}}}, "additionalProperties": false, "required": ["gdlParametersOfElements"]}, "GDLParameterList": {"type": "object", "description": "The list of GDL parameters.", "properties": {"parameters": {"$ref": "#/$defs/GDLParameterArray"}}, "additionalProperties": false, "required": ["parameters"]}, "GDLParameterArray": {"type": "array", "description": "The list of GDL parameters.", "items": {"$ref": "#/$defs/GDLParameterDetails"}}, "GDLParameterDetails": {"type": "object", "description": "Details of a GDL parameter.", "properties": {"name": {"type": "string", "description": "The name of the parameter."}, "index": {"type": "string", "description": "The index of the parameter."}, "type": {"type": "string", "description": "The type of the parameter."}, "dimension1": {"type": "number", "description": "The 1st dimension of array (in case of array value)."}, "dimension2": {"type": "number", "description": "The 2nd dimension of array (in case of array value)."}, "value": {"description": "The value of the parameter."}}, "additionalProperties": false, "required": ["index", "type", "value"]}}, "$ref": "#/$defs/GetGDLParametersOfElementsResult"}')))
def test_runtime_validation_GetGDLParametersOfElementsResult(data: dict):
    try:
        check_type(data, dicts.GetGDLParametersOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetGDLParametersOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetGDLParametersOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetGDLParametersOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetGeoLocationResult": {"type": "object", "properties": {"projectLocation": {"type": "object", "properties": {"longitude": {"type": "number", "description": "longitude in degrees"}, "latitude": {"type": "number", "description": "latitude in degrees"}, "altitude": {"type": "number", "description": "altitude in meters"}, "north": {"type": "number", "description": "north direction in radians"}}, "additionalProperties": false, "required": ["longitude", "latitude", "altitude", "north"]}, "surveyPoint": {"type": "object", "properties": {"position": {"type": "object", "properties": {"eastings": {"type": "number", "description": "Location along the easting of the coordinate system of the target map coordinate reference system."}, "northings": {"type": "number", "description": "Location along the northing of the coordinate system of the target map coordinate reference system."}, "elevation": {"type": "number", "description": "Orthogonal height relative to the vertical datum specified."}}, "additionalProperties": false, "required": ["eastings", "northings", "elevation"]}, "geoReferencingParameters": {"type": "object", "properties": {"crsName": {"type": "string", "description": "Name by which the coordinate reference system is identified."}, "description": {"type": "string", "description": "Informal description of this coordinate reference system."}, "geodeticDatum": {"type": "string", "description": "Name by which this datum is identified."}, "verticalDatum": {"type": "string", "description": "Name by which the vertical datum is identified."}, "mapProjection": {"type": "string", "description": "Name by which the map projection is identified."}, "mapZone": {"type": "string", "description": "Name by which the map zone, relating to the MapProjection, is identified."}}, "additionalProperties": false, "required": ["crsName", "description", "geodeticDatum", "verticalDatum", "mapProjection", "mapZone"]}}, "additionalProperties": false, "required": ["position", "geoReferencingParameters"]}}, "additionalProperties": false, "required": ["projectLocation", "surveyPoint"]}}, "$ref": "#/$defs/GetGeoLocationResult"}')))
def test_runtime_validation_GetGeoLocationResult(data: dict):
    try:
        check_type(data, dicts.GetGeoLocationResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetGeoLocationResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetGeoLocationResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetGeoLocationResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetHotlinksResult": {"type": "object", "properties": {"hotlinks": {"$ref": "#/$defs/Hotlinks"}}, "additionalProperties": false, "required": ["hotlinks"]}, "Hotlinks": {"type": "array", "description": "A list of hotlink nodes.", "items": {"$ref": "#/$defs/Hotlink"}}, "Hotlink": {"type": "object", "description": "The details of a hotlink node.", "properties": {"location": {"type": "string", "description": "The path of the hotlink file."}}, "additionalProperties": false, "required": ["location"]}}, "$ref": "#/$defs/GetHotlinksResult"}')))
def test_runtime_validation_GetHotlinksResult(data: dict):
    try:
        check_type(data, dicts.GetHotlinksResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetHotlinksResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetHotlinksResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetHotlinksResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetIssuesResult": {"type": "object", "properties": {"issues": {"type": "array", "description": "A list of existing issues.", "items": {"type": "object", "properties": {"issueId": {"$ref": "#/$defs/IssueId"}, "name": {"type": "string", "description": "Issue name"}, "parentIssueId": {"$ref": "#/$defs/IssueId"}, "creaTime": {"type": "integer", "description": "Issue creation time"}, "modiTime": {"type": "integer", "description": "Issue modification time"}, "tagText": {"type": "string", "description": "Issue tag text - labels"}, "tagTextElementId": {"$ref": "#/$defs/ElementId"}, "isTagTextElemVisible": {"type": "boolean", "description": "The visibility of the attached tag text element"}}, "additionalProperties": false, "required": ["issueId", "name", "parentIssueId", "creaTime", "modiTime", "tagText", "tagTextElementId", "isTagTextElemVisible"]}}}, "additionalProperties": false, "required": ["issues"]}, "IssueId": {"type": "object", "description": "The identifier of an issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetIssuesResult"}')))
def test_runtime_validation_GetIssuesResult(data: dict):
    try:
        check_type(data, dicts.GetIssuesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetIssuesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetIssuesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetIssuesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLibrariesResult": {"type": "object", "properties": {"libraries": {"type": "array", "description": "A list of project libraries.", "items": {"type": "object", "description": "Library", "properties": {"name": {"type": "string", "description": "Library name."}, "path": {"type": "string", "description": "A filesystem path to library location."}, "type": {"type": "string", "description": "Library type."}, "available": {"type": "boolean", "description": "Is library not missing."}, "readOnly": {"type": "boolean", "description": "Is library not writable."}, "twServerUrl": {"type": "string", "description": "URL address of the TeamWork server hosting the library."}, "urlWebLibrary": {"type": "string", "description": "URL of the downloaded Internet library."}}, "additionalProperties": false, "required": ["name", "type", "path"]}}}, "additionalProperties": false, "required": ["libraries"]}}, "$ref": "#/$defs/GetLibrariesResult"}')))
def test_runtime_validation_GetLibrariesResult(data: dict):
    try:
        check_type(data, dicts.GetLibrariesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetLibrariesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetLibrariesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetLibrariesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetModelViewOptionsResult": {"type": "object", "properties": {"modelViewOptions": {"type": "array", "items": {"type": "object", "description": "Represents the model view options.", "properties": {"name": {"type": "string"}}, "additionalProperties": false, "required": ["name"]}}}, "additionalProperties": false, "required": ["modelViewOptions"]}}, "$ref": "#/$defs/GetModelViewOptionsResult"}')))
def test_runtime_validation_GetModelViewOptionsResult(data: dict):
    try:
        check_type(data, dicts.GetModelViewOptionsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetModelViewOptionsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetModelViewOptionsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetModelViewOptionsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetProjectInfoFieldsResult": {"type": "object", "properties": {"fields": {"type": "array", "description": "A list of project info fields.", "items": {"type": "object", "properties": {"projectInfoId": {"type": "string", "description": "The id of the project info field."}, "projectInfoName": {"type": "string", "description": "The name of the project info field visible on UI."}, "projectInfoValue": {"type": "string", "description": "The value of the project info field."}}}}}, "additionalProperties": false, "required": ["fields"]}}, "$ref": "#/$defs/GetProjectInfoFieldsResult"}')))
def test_runtime_validation_GetProjectInfoFieldsResult(data: dict):
    try:
        check_type(data, dicts.GetProjectInfoFieldsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetProjectInfoFieldsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetProjectInfoFieldsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetProjectInfoFieldsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetProjectInfoResult": {"type": "object", "properties": {"isUntitled": {"type": "boolean", "description": "True, if the project is not saved yet."}, "isTeamwork": {"type": "boolean", "description": "True, if the project is a Teamwork (BIMcloud) project."}, "projectLocation": {"type": "string", "description": "The location of the project in the filesystem or a BIMcloud project reference.", "minLength": 1}, "projectPath": {"type": "string", "description": "The path of the project. A filesystem path or a BIMcloud server relative path.", "minLength": 1}, "projectName": {"type": "string", "description": "The name of the project.", "minLength": 1}}, "additionalProperties": false, "required": ["isUntitled", "isTeamwork"]}}, "$ref": "#/$defs/GetProjectInfoResult"}')))
def test_runtime_validation_GetProjectInfoResult(data: dict):
    try:
        check_type(data, dicts.GetProjectInfoResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetProjectInfoResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetProjectInfoResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetProjectInfoResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}, "properties": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["attributeIds", "properties"]}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "description": "A wrapper containing the property identifier.", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeIds": {"type": "array", "description": "A list of attributes.", "items": {"$ref": "#/$defs/AttributeIdArrayItem"}}, "AttributeIdArrayItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetPropertyValuesOfAttributesParameters"}')))
def test_runtime_validation_GetPropertyValuesOfAttributesParameters(data: dict):
    try:
        check_type(data, dicts.GetPropertyValuesOfAttributesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetPropertyValuesOfAttributesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetPropertyValuesOfAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetPropertyValuesOfAttributesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfAttributesResult": {"type": "object", "properties": {"propertyValuesForAttributes": {"$ref": "#/$defs/PropertyValuesOrErrorArray", "description": "List of property value lists. The order of the outer list is that of the given attributes. The order of the inner lists are that of the given properties."}}, "additionalProperties": false, "required": ["propertyValuesForAttributes"]}, "PropertyValuesOrErrorArray": {"type": "array", "description": "A list of property value lists.", "items": {"$ref": "#/$defs/PropertyValuesOrError"}}, "PropertyValuesOrError": {"type": "object", "description": "A list of property values or an error.", "oneOf": [{"$ref": "#/$defs/PropertyValuesArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "PropertyValuesArrayItem": {"description": "A wrapper containing the property values.", "properties": {"propertyValues": {"$ref": "#/$defs/PropertyValues"}}, "additionalProperties": false, "required": ["propertyValues"]}, "PropertyValues": {"type": "array", "description": "A list of property values.", "items": {"$ref": "#/$defs/PropertyValueOrErrorItem"}}, "PropertyValueOrErrorItem": {"type": "object", "description": "A property value or an error", "oneOf": [{"$ref": "#/$defs/PropertyValueArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "PropertyValueArrayItem": {"type": "object", "description": "A wrapper containing the property value.", "properties": {"propertyValue": {"$ref": "#/$defs/PropertyValue"}}, "additionalProperties": false, "required": ["propertyValue"]}, "PropertyValue": {"type": "object", "description": "The display string value of a property.", "properties": {"value": {"type": "string"}}, "additionalProperties": false, "required": ["value"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetPropertyValuesOfAttributesResult"}')))
def test_runtime_validation_GetPropertyValuesOfAttributesResult(data: dict):
    try:
        check_type(data, dicts.GetPropertyValuesOfAttributesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetPropertyValuesOfAttributesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetPropertyValuesOfAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetPropertyValuesOfAttributesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "properties": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["elements", "properties"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "description": "A wrapper containing the property identifier.", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetPropertyValuesOfElementsParameters"}')))
def test_runtime_validation_GetPropertyValuesOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetPropertyValuesOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetPropertyValuesOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetPropertyValuesOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetPropertyValuesOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfElementsResult": {"type": "object", "properties": {"propertyValuesForElements": {"$ref": "#/$defs/PropertyValuesOrErrorArray", "description": "List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."}}, "additionalProperties": false, "required": ["propertyValuesForElements"]}, "PropertyValuesOrErrorArray": {"type": "array", "description": "A list of property value lists.", "items": {"$ref": "#/$defs/PropertyValuesOrError"}}, "PropertyValuesOrError": {"type": "object", "description": "A list of property values or an error.", "oneOf": [{"$ref": "#/$defs/PropertyValuesArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "PropertyValuesArrayItem": {"description": "A wrapper containing the property values.", "properties": {"propertyValues": {"$ref": "#/$defs/PropertyValues"}}, "additionalProperties": false, "required": ["propertyValues"]}, "PropertyValues": {"type": "array", "description": "A list of property values.", "items": {"$ref": "#/$defs/PropertyValueOrErrorItem"}}, "PropertyValueOrErrorItem": {"type": "object", "description": "A property value or an error", "oneOf": [{"$ref": "#/$defs/PropertyValueArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "PropertyValueArrayItem": {"type": "object", "description": "A wrapper containing the property value.", "properties": {"propertyValue": {"$ref": "#/$defs/PropertyValue"}}, "additionalProperties": false, "required": ["propertyValue"]}, "PropertyValue": {"type": "object", "description": "The display string value of a property.", "properties": {"value": {"type": "string"}}, "additionalProperties": false, "required": ["value"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetPropertyValuesOfElementsResult"}')))
def test_runtime_validation_GetPropertyValuesOfElementsResult(data: dict):
    try:
        check_type(data, dicts.GetPropertyValuesOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetPropertyValuesOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetPropertyValuesOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetPropertyValuesOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetRevisionChangesOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetRevisionChangesOfElementsParameters"}')))
def test_runtime_validation_GetRevisionChangesOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetRevisionChangesOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetRevisionChangesOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetRevisionChangesOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetRevisionChangesOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetRevisionChangesOfElementsResult": {"type": "object", "properties": {"revisionChangesOfElements": {"$ref": "#/$defs/RevisionChangesOfEntities"}}, "additionalProperties": false, "required": ["revisionChangesOfElements"]}, "RevisionChangesOfEntities": {"type": "object", "oneOf": [{"$ref": "#/$defs/RevisionChangesArrayItem"}, {"$ref": "#/$defs/ErrorItem"}]}, "RevisionChangesArrayItem": {"type": "object", "description": "A wrapper containing an array of revision changes", "properties": {"revisionChanges": {"type": "array", "items": {"$ref": "#/$defs/RevisionChange"}}}, "additionalProperties": false, "required": ["revisionChange"]}, "RevisionChange": {"type": "object", "properties": {"id": {"type": "string"}, "description": {"type": "string"}, "lastModifiedTime": {"type": "string"}, "modifiedByUser": {"type": "string"}, "isIssued": {"type": "boolean"}, "firstRevisionIssueId": {"$ref": "#/$defs/RevisionIssueId", "description": "The identifier of the first issue in which the given change is issued."}, "isArchived": {"type": "boolean"}, "customSchemeData": {"$ref": "#/$defs/RevisionCustomSchemeData"}}, "additionalProperties": false, "required": ["id", "description", "lastModifiedTime", "modifiedByUser", "isIssued", "isArchived"]}, "RevisionIssueId": {"type": "object", "description": "The identifier of a revision issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "RevisionCustomSchemeData": {"type": "array", "items": {"type": "object", "properties": {"customSchemeKey": {"$ref": "#/$defs/Guid"}, "customSchemeValue": {"type": "string"}}, "additionalProperties": false, "required": ["customSchemeKey", "customSchemeValue"]}}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetRevisionChangesOfElementsResult"}')))
def test_runtime_validation_GetRevisionChangesOfElementsResult(data: dict):
    try:
        check_type(data, dicts.GetRevisionChangesOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetRevisionChangesOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetRevisionChangesOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetRevisionChangesOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetRevisionChangesResult": {"type": "object", "properties": {"revisionChanges": {"type": "array", "items": {"$ref": "#/$defs/RevisionChange"}}}, "additionalProperties": false, "required": ["revisionChanges"]}, "RevisionChange": {"type": "object", "properties": {"id": {"type": "string"}, "description": {"type": "string"}, "lastModifiedTime": {"type": "string"}, "modifiedByUser": {"type": "string"}, "isIssued": {"type": "boolean"}, "firstRevisionIssueId": {"$ref": "#/$defs/RevisionIssueId", "description": "The identifier of the first issue in which the given change is issued."}, "isArchived": {"type": "boolean"}, "customSchemeData": {"$ref": "#/$defs/RevisionCustomSchemeData"}}, "additionalProperties": false, "required": ["id", "description", "lastModifiedTime", "modifiedByUser", "isIssued", "isArchived"]}, "RevisionIssueId": {"type": "object", "description": "The identifier of a revision issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "RevisionCustomSchemeData": {"type": "array", "items": {"type": "object", "properties": {"customSchemeKey": {"$ref": "#/$defs/Guid"}, "customSchemeValue": {"type": "string"}}, "additionalProperties": false, "required": ["customSchemeKey", "customSchemeValue"]}}}, "$ref": "#/$defs/GetRevisionChangesResult"}')))
def test_runtime_validation_GetRevisionChangesResult(data: dict):
    try:
        check_type(data, dicts.GetRevisionChangesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetRevisionChangesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetRevisionChangesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetRevisionChangesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetRevisionIssuesResult": {"type": "object", "properties": {"revisionIssues": {"type": "array", "items": {"$ref": "#/$defs/RevisionIssue"}}}, "additionalProperties": false, "required": ["revisionIssues"]}, "RevisionIssue": {"type": "object", "properties": {"revisionIssueId": {"$ref": "#/$defs/RevisionIssueId"}, "id": {"type": "string"}, "description": {"type": "string"}, "issueTime": {"type": "string"}, "issuedByUser": {"type": "string"}, "overrideRevisionIDOfAllIncludedLayouts": {"type": "boolean"}, "createNewRevisionInAllIncludedLayouts": {"type": "boolean"}, "markersVisibleSinceIndex": {"type": "integer"}, "isIssued": {"type": "boolean"}, "documentRevisions": {"$ref": "#/$defs/DocumentRevisionReferences"}, "customSchemeData": {"$ref": "#/$defs/RevisionCustomSchemeData"}}, "additionalProperties": false, "required": ["revisionIssueId", "id", "description", "issueTime", "issuedByUser", "overrideRevisionIDOfAllIncludedLayouts", "createNewRevisionInAllIncludedLayouts", "isIssued"]}, "RevisionCustomSchemeData": {"type": "array", "items": {"type": "object", "properties": {"customSchemeKey": {"$ref": "#/$defs/Guid"}, "customSchemeValue": {"type": "string"}}, "additionalProperties": false, "required": ["customSchemeKey", "customSchemeValue"]}}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "RevisionIssueId": {"type": "object", "description": "The identifier of a revision issue.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "DocumentRevisionReferences": {"type": "array", "description": "All document revisions belong to the current issue.", "items": {"$ref": "#/$defs/DocumentRevisionReference"}}, "DocumentRevisionReference": {"type": "object", "description": "A reference to a document revision belonging to the current issue", "properties": {"revisionId": {"$ref": "#/$defs/DocumentRevisionId"}}, "additionalProperties": false, "required": ["revisionId"]}, "DocumentRevisionId": {"type": "object", "description": "The identifier of a document revision.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetRevisionIssuesResult"}')))
def test_runtime_validation_GetRevisionIssuesResult(data: dict):
    try:
        check_type(data, dicts.GetRevisionIssuesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetRevisionIssuesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetRevisionIssuesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetRevisionIssuesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSelectedElementsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetSelectedElementsResult"}')))
def test_runtime_validation_GetSelectedElementsResult(data: dict):
    try:
        check_type(data, dicts.GetSelectedElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetSelectedElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetSelectedElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetSelectedElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetStoriesResult": {"type": "object", "properties": {"firstStory": {"type": "integer", "description": "First story index."}, "lastStory": {"type": "integer", "description": "Last story index."}, "actStory": {"type": "integer", "description": "Actual (currently visible in 2D) story index."}, "skipNullFloor": {"type": "boolean", "description": "Floor indices above ground-floor level may start with 1 instead of 0."}, "stories": {"$ref": "#/$defs/StoriesParameters"}}, "additionalProperties": false, "required": ["firstStory", "lastStory", "actStory", "skipNullFloor", "stories"]}, "StoriesParameters": {"type": "array", "description": "A list of project stories, each with their complete parameters.", "items": {"$ref": "#/$defs/StoryParameters"}}, "StoryParameters": {"type": "object", "description": "Represents all parameters of a single project story, including its unique identifiers. Used in API responses.", "properties": {"index": {"type": "integer", "description": "The story index."}, "floorId": {"type": "integer", "description": "Unique ID of the story."}, "dispOnSections": {"type": "boolean", "description": "Story level lines should appear on sections and elevations."}, "level": {"type": "number", "description": "The story level."}, "name": {"type": "string", "description": "The name of the story."}}, "additionalProperties": false, "required": ["index", "floorId", "dispOnSections", "level", "name"]}}, "$ref": "#/$defs/GetStoriesResult"}')))
def test_runtime_validation_GetStoriesResult(data: dict):
    try:
        check_type(data, dicts.GetStoriesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetStoriesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetStoriesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetStoriesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSubelementsOfHierarchicalElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetSubelementsOfHierarchicalElementsParameters"}')))
def test_runtime_validation_GetSubelementsOfHierarchicalElementsParameters(data: dict):
    try:
        check_type(data, dicts.GetSubelementsOfHierarchicalElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetSubelementsOfHierarchicalElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetSubelementsOfHierarchicalElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetSubelementsOfHierarchicalElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSubelementsOfHierarchicalElementsResult": {"type": "object", "properties": {"subelements": {"type": "array", "items": {"type": "object", "description": "Subelements grouped by type.", "properties": {"cWallSegments": {"$ref": "#/$defs/Elements"}, "cWallFrames": {"$ref": "#/$defs/Elements"}, "cWallPanels": {"$ref": "#/$defs/Elements"}, "cWallJunctions": {"$ref": "#/$defs/Elements"}, "cWallAccessories": {"$ref": "#/$defs/Elements"}, "stairRisers": {"$ref": "#/$defs/Elements"}, "stairTreads": {"$ref": "#/$defs/Elements"}, "stairStructures": {"$ref": "#/$defs/Elements"}, "railingNodes": {"$ref": "#/$defs/Elements"}, "railingSegments": {"$ref": "#/$defs/Elements"}, "railingPosts": {"$ref": "#/$defs/Elements"}, "railingRailEnds": {"$ref": "#/$defs/Elements"}, "railingRailConnections": {"$ref": "#/$defs/Elements"}, "railingHandrailEnds": {"$ref": "#/$defs/Elements"}, "railingHandrailConnections": {"$ref": "#/$defs/Elements"}, "railingToprailEnds": {"$ref": "#/$defs/Elements"}, "railingToprailConnections": {"$ref": "#/$defs/Elements"}, "railingRails": {"$ref": "#/$defs/Elements"}, "railingToprails": {"$ref": "#/$defs/Elements"}, "railingHandrails": {"$ref": "#/$defs/Elements"}, "railingPatterns": {"$ref": "#/$defs/Elements"}, "railingInnerPosts": {"$ref": "#/$defs/Elements"}, "railingPanels": {"$ref": "#/$defs/Elements"}, "railingBalusterSets": {"$ref": "#/$defs/Elements"}, "railingBalusters": {"$ref": "#/$defs/Elements"}, "beamSegments": {"$ref": "#/$defs/Elements"}, "columnSegments": {"$ref": "#/$defs/Elements"}}}}}, "additionalProperties": false, "required": ["subelements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetSubelementsOfHierarchicalElementsResult"}')))
def test_runtime_validation_GetSubelementsOfHierarchicalElementsResult(data: dict):
    try:
        check_type(data, dicts.GetSubelementsOfHierarchicalElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetSubelementsOfHierarchicalElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetSubelementsOfHierarchicalElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetSubelementsOfHierarchicalElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetView2DTransformationsParameters": {"type": "object", "properties": {"databases": {"$ref": "#/$defs/Databases"}}, "additionalProperties": false, "required": []}, "Databases": {"type": "array", "description": "A list of Archicad databases.", "items": {"$ref": "#/$defs/DatabaseIdArrayItem"}}, "DatabaseIdArrayItem": {"type": "object", "properties": {"databaseId": {"$ref": "#/$defs/DatabaseId"}}, "additionalProperties": false, "required": ["databaseId"]}, "DatabaseId": {"type": "object", "description": "The identifier of a database", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetView2DTransformationsParameters"}')))
def test_runtime_validation_GetView2DTransformationsParameters(data: dict):
    try:
        check_type(data, dicts.GetView2DTransformationsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetView2DTransformationsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetView2DTransformationsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetView2DTransformationsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetView2DTransformationsResult": {"type": "object", "properties": {"transformations": {"type": "array", "items": {"$ref": "#/$defs/ViewTransformationsOrError"}}}, "additionalProperties": false, "required": ["transformations"]}, "ViewTransformationsOrError": {"type": "object", "oneOf": [{"$ref": "#/$defs/ViewTransformations"}, {"$ref": "#/$defs/ErrorItem"}]}, "ViewTransformations": {"type": "object", "properties": {"zoom": {"type": "object", "description": "The actual zoom parameters, rectangular region of the model.", "properties": {"xMin": {"type": "number", "description": "The minimum X value of the zoom box."}, "yMin": {"type": "number", "description": "The minimum Y value of the zoom box."}, "xMax": {"type": "number", "description": "The maximum X value of the zoom box."}, "yMax": {"type": "number", "description": "The maximum Y value of the zoom box."}}, "additionalProperties": false, "required": ["xMin", "yMin", "xMax", "yMax"]}, "rotation": {"type": "number", "description": "The orientation in radian."}}, "additionalProperties": false, "required": ["zoom", "rotation"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetView2DTransformationsResult"}')))
def test_runtime_validation_GetView2DTransformationsResult(data: dict):
    try:
        check_type(data, dicts.GetView2DTransformationsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetView2DTransformationsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetView2DTransformationsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetView2DTransformationsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetViewSettingsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"$ref": "#/$defs/NavigatorItemIdArrayItem"}}, "NavigatorItemIdArrayItem": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetViewSettingsParameters"}')))
def test_runtime_validation_GetViewSettingsParameters(data: dict):
    try:
        check_type(data, dicts.GetViewSettingsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetViewSettingsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.GetViewSettingsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetViewSettingsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetViewSettingsResult": {"type": "object", "properties": {"viewSettings": {"type": "array", "items": {"$ref": "#/$defs/ViewSettingsOrError"}}}, "additionalProperties": false, "required": ["viewSettings"]}, "ViewSettingsOrError": {"type": "object", "oneOf": [{"$ref": "#/$defs/ViewSettings"}, {"$ref": "#/$defs/ErrorItem"}]}, "ViewSettings": {"type": "object", "description": "The settings of a navigator view", "properties": {"modelViewOptions": {"type": "string", "description": "The name of the model view options. If empty, the view has custom model view options."}, "layerCombination": {"type": "string", "description": "The name of the layer combination. If empty, the view has custom layer combination."}, "dimensionStyle": {"type": "string", "description": "The name of the dimension style. If empty, the view has custom dimension style."}, "penSetName": {"type": "string", "description": "The name of the pen set. If empty, the view has custom pen set."}, "graphicOverrideCombination": {"type": "string", "description": "The name of the graphic override combination. If empty, the view has custom graphic override combination."}}, "additionalProperties": false, "required": []}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetViewSettingsResult"}')))
def test_runtime_validation_GetViewSettingsResult(data: dict):
    try:
        check_type(data, dicts.GetViewSettingsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.GetViewSettingsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.GetViewSettingsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.GetViewSettingsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"HighlightElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "highlightedColors": {"type": "array", "description": "A list of colors to highlight elements.", "items": {"type": "array", "description": "Color of the highlighted element as an [r, g, b, a] array. Each component must be in the 0-255 range.", "items": {"type": "integer"}, "minItems": 4, "maxItems": 4}}, "wireframe3D": {"type": "boolean", "description": "Optional parameter. Switch non highlighted elements in the 3D window to wireframe."}, "nonHighlightedColor": {"type": "array", "description": "Optional parameter. Color of the non highlighted elements as an [r, g, b, a] array. Each component must be in the 0-255 range.", "items": {"type": "integer"}, "minItems": 4, "maxItems": 4}}, "additionalProperties": false, "required": ["elements", "highlightedColors"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/HighlightElementsParameters"}')))
def test_runtime_validation_HighlightElementsParameters(data: dict):
    try:
        check_type(data, dicts.HighlightElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.HighlightElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.HighlightElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.HighlightElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ImportIssuesFromBCFParameters": {"type": "object", "properties": {"importPath": {"type": "string", "description": "The os path to the bcf file, including it\'s name."}, "alignBySurveyPoint": {"type": "boolean", "description": "Align BCF views by Archicad Survey Point or Archicad Project Origin."}}, "additionalProperties": false, "required": ["importPath", "alignBySurveyPoint"]}}, "$ref": "#/$defs/ImportIssuesFromBCFParameters"}')))
def test_runtime_validation_ImportIssuesFromBCFParameters(data: dict):
    try:
        check_type(data, dicts.ImportIssuesFromBCFParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ImportIssuesFromBCFParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.ImportIssuesFromBCFParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ImportIssuesFromBCFParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"MoveElementsParameters": {"type": "object", "properties": {"elementsWithMoveVectors": {"type": "array", "description": "The elements with move vector pairs.", "items": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "moveVector": {"type": "object", "description": "Move vector of a 3D point.", "properties": {"x": {"type": "number", "description": "X value of the vector."}, "y": {"type": "number", "description": "Y value of the vector."}, "z": {"type": "number", "description": "Z value of the vector."}}, "additionalProperties": false, "required": ["x", "y", "z"]}, "copy": {"type": "boolean", "description": "Optional parameter. If true, then a copy of the element will be moved. By default it\'s false."}}, "additionalProperties": false, "required": ["elementId", "moveVector"]}}}, "additionalProperties": false, "required": ["elementsWithMoveVectors"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/MoveElementsParameters"}')))
def test_runtime_validation_MoveElementsParameters(data: dict):
    try:
        check_type(data, dicts.MoveElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.MoveElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.MoveElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.MoveElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"MoveElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/MoveElementsResult"}')))
def test_runtime_validation_MoveElementsResult(data: dict):
    try:
        check_type(data, dicts.MoveElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.MoveElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.MoveElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.MoveElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"OpenProjectParameters": {"type": "object", "properties": {"projectFilePath": {"type": "string", "description": "The target project file to open."}}, "additionalProperties": false, "required": ["projectFilePath"]}}, "$ref": "#/$defs/OpenProjectParameters"}')))
def test_runtime_validation_OpenProjectParameters(data: dict):
    try:
        check_type(data, dicts.OpenProjectParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.OpenProjectParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.OpenProjectParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.OpenProjectParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"PublishPublisherSetParameters": {"type": "object", "properties": {"publisherSetName": {"type": "string", "description": "The name of the publisher set.", "minLength": 1}, "outputPath": {"type": "string", "description": "Full local or LAN path for publishing. Optional, by default the path set in the settings of the publiser set will be used.", "minLength": 1}}, "additionalProperties": false, "required": ["publisherSetName"]}}, "$ref": "#/$defs/PublishPublisherSetParameters"}')))
def test_runtime_validation_PublishPublisherSetParameters(data: dict):
    try:
        check_type(data, dicts.PublishPublisherSetParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.PublishPublisherSetParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.PublishPublisherSetParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.PublishPublisherSetParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ReleaseElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/ReleaseElementsParameters"}')))
def test_runtime_validation_ReleaseElementsParameters(data: dict):
    try:
        check_type(data, dicts.ReleaseElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ReleaseElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.ReleaseElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ReleaseElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ReserveElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/ReserveElementsParameters"}')))
def test_runtime_validation_ReserveElementsParameters(data: dict):
    try:
        check_type(data, dicts.ReserveElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ReserveElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.ReserveElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ReserveElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ReserveElementsResult": {"type": "object", "properties": {"executionResult": {"$ref": "#/$defs/ExecutionResult"}, "conflicts": {"type": "array", "items": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "user": {"type": "object", "properties": {"userId": {"type": "number"}, "userName": {"type": "string"}}, "additionalProperties": false, "required": ["userId", "userName"]}}, "additionalProperties": false, "required": ["elementId", "user"]}}}, "additionalProperties": false, "required": ["executionResult"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/ReserveElementsResult"}')))
def test_runtime_validation_ReserveElementsResult(data: dict):
    try:
        check_type(data, dicts.ReserveElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.ReserveElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.ReserveElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.ReserveElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetClassificationsOfElementsParameters": {"type": "object", "properties": {"elementClassifications": {"$ref": "#/$defs/ElementClassifications"}}, "additionalProperties": false, "required": ["elementClassifications"]}, "ElementClassifications": {"type": "array", "description": "A list of element classification identifiers.", "items": {"$ref": "#/$defs/ElementClassification"}}, "ElementClassification": {"type": "object", "description": "The classification of an element.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "classificationId": {"$ref": "#/$defs/ClassificationId"}}, "additionalProperties": false, "required": ["elementId", "classificationId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ClassificationId": {"type": "object", "description": "The element classification identifier.", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}, "classificationItemId": {"$ref": "#/$defs/ClassificationItemId", "description": "The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/SetClassificationsOfElementsParameters"}')))
def test_runtime_validation_SetClassificationsOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.SetClassificationsOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetClassificationsOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetClassificationsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetClassificationsOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetClassificationsOfElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/SetClassificationsOfElementsResult"}')))
def test_runtime_validation_SetClassificationsOfElementsResult(data: dict):
    try:
        check_type(data, dicts.SetClassificationsOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetClassificationsOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.SetClassificationsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetClassificationsOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetDetailsOfElementsParameters": {"type": "object", "properties": {"elementsWithDetails": {"type": "array", "description": "The elements with parameters.", "items": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "details": {"type": "object", "description": "Details of an element.", "properties": {"floorIndex": {"type": "number"}, "layerIndex": {"type": "number"}, "drawIndex": {"type": "number"}, "typeSpecificDetails": {"$ref": "#/$defs/TypeSpecificSettings"}}, "additionalProperties": false, "required": []}}, "additionalProperties": false, "required": ["elementId", "details"]}}}, "additionalProperties": false, "required": ["elementsWithDetails"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "TypeSpecificSettings": {"description": "Defines the modifiable type-specific settings for an element. Used as input for SET requests.", "type": "object", "oneOf": [{"$ref": "#/$defs/WallSettings"}]}, "WallSettings": {"type": "object", "description": "Settings for modifying a wall.", "properties": {"begCoordinate": {"$ref": "#/$defs/Coordinate2D"}, "endCoordinate": {"$ref": "#/$defs/Coordinate2D"}, "height": {"type": "number", "description": "height relative to bottom"}, "bottomOffset": {"type": "number", "description": "base level of the wall relative to the floor level"}, "offset": {"type": "number", "description": "wall\'s base line\'s offset from ref. line"}, "begThickness": {"type": "number", "description": "Thickness at the beginning in case of trapezoid wall"}, "endThickness": {"type": "number", "description": "Thickness at the end in case of trapezoid wall"}}, "additionalProperties": false, "required": []}, "Coordinate2D": {"type": "object", "description": "2D coordinate.", "properties": {"x": {"type": "number", "description": "X value of the coordinate."}, "y": {"type": "number", "description": "Y value of the coordinate."}}, "additionalProperties": false, "required": ["x", "y"]}}, "$ref": "#/$defs/SetDetailsOfElementsParameters"}')))
def test_runtime_validation_SetDetailsOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.SetDetailsOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetDetailsOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetDetailsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetDetailsOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetDetailsOfElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/SetDetailsOfElementsResult"}')))
def test_runtime_validation_SetDetailsOfElementsResult(data: dict):
    try:
        check_type(data, dicts.SetDetailsOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetDetailsOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.SetDetailsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetDetailsOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetGDLParametersOfElementsParameters": {"type": "object", "properties": {"elementsWithGDLParameters": {"type": "array", "description": "The elements with GDL parameters dictionary pairs.", "items": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "gdlParameters": {"$ref": "#/$defs/GDLParameterArray"}}, "additionalProperties": false, "required": ["elementId", "gdlParameters"]}}}, "additionalProperties": false, "required": ["elementsWithGDLParameters"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "GDLParameterArray": {"type": "array", "description": "The list of GDL parameters.", "items": {"$ref": "#/$defs/GDLParameterDetails"}}, "GDLParameterDetails": {"type": "object", "description": "Details of a GDL parameter.", "properties": {"name": {"type": "string", "description": "The name of the parameter."}, "index": {"type": "string", "description": "The index of the parameter."}, "type": {"type": "string", "description": "The type of the parameter."}, "dimension1": {"type": "number", "description": "The 1st dimension of array (in case of array value)."}, "dimension2": {"type": "number", "description": "The 2nd dimension of array (in case of array value)."}, "value": {"description": "The value of the parameter."}}, "additionalProperties": false, "required": ["index", "type", "value"]}}, "$ref": "#/$defs/SetGDLParametersOfElementsParameters"}')))
def test_runtime_validation_SetGDLParametersOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.SetGDLParametersOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetGDLParametersOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetGDLParametersOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetGDLParametersOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetGDLParametersOfElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/SetGDLParametersOfElementsResult"}')))
def test_runtime_validation_SetGDLParametersOfElementsResult(data: dict):
    try:
        check_type(data, dicts.SetGDLParametersOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetGDLParametersOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.SetGDLParametersOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetGDLParametersOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetProjectInfoFieldParameters": {"type": "object", "properties": {"projectInfoId": {"type": "string", "description": "The id of the project info field.", "minLength": 1}, "projectInfoValue": {"type": "string", "description": "The new value of the project info field.", "minLength": 1}}, "additionalProperties": false, "required": ["projectInfoId", "projectInfoValue"]}}, "$ref": "#/$defs/SetProjectInfoFieldParameters"}')))
def test_runtime_validation_SetProjectInfoFieldParameters(data: dict):
    try:
        check_type(data, dicts.SetProjectInfoFieldParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetProjectInfoFieldParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetProjectInfoFieldParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetProjectInfoFieldParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetPropertyValuesOfAttributesParameters": {"type": "object", "properties": {"attributePropertyValues": {"$ref": "#/$defs/AttributePropertyValues"}}, "additionalProperties": false, "required": ["attributePropertyValues"]}, "AttributePropertyValues": {"type": "array", "description": "A list of attribute property values.", "items": {"$ref": "#/$defs/AttributePropertyValue"}}, "AttributePropertyValue": {"type": "object", "description": "A property value with the identifiers of the property and its owner attribute.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "propertyId": {"$ref": "#/$defs/PropertyId"}, "propertyValue": {"$ref": "#/$defs/PropertyValue"}}, "additionalProperties": false, "required": ["attributeId", "propertyId", "propertyValue"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "PropertyValue": {"type": "object", "description": "The display string value of a property.", "properties": {"value": {"type": "string"}}, "additionalProperties": false, "required": ["value"]}}, "$ref": "#/$defs/SetPropertyValuesOfAttributesParameters"}')))
def test_runtime_validation_SetPropertyValuesOfAttributesParameters(data: dict):
    try:
        check_type(data, dicts.SetPropertyValuesOfAttributesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetPropertyValuesOfAttributesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetPropertyValuesOfAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetPropertyValuesOfAttributesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetPropertyValuesOfAttributesResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/SetPropertyValuesOfAttributesResult"}')))
def test_runtime_validation_SetPropertyValuesOfAttributesResult(data: dict):
    try:
        check_type(data, dicts.SetPropertyValuesOfAttributesResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetPropertyValuesOfAttributesResult' with data: {repr(data)}\nError: {e}")

    try:
        models.SetPropertyValuesOfAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetPropertyValuesOfAttributesResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetPropertyValuesOfElementsParameters": {"type": "object", "properties": {"elementPropertyValues": {"$ref": "#/$defs/ElementPropertyValues"}}, "additionalProperties": false, "required": ["elementPropertyValues"]}, "ElementPropertyValues": {"type": "array", "description": "A list of element property values.", "items": {"$ref": "#/$defs/ElementPropertyValue"}}, "ElementPropertyValue": {"type": "object", "description": "A property value with the identifiers of the property and its owner element.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "propertyId": {"$ref": "#/$defs/PropertyId"}, "propertyValue": {"$ref": "#/$defs/PropertyValue"}}, "additionalProperties": false, "required": ["elementId", "propertyId", "propertyValue"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "PropertyValue": {"type": "object", "description": "The display string value of a property.", "properties": {"value": {"type": "string"}}, "additionalProperties": false, "required": ["value"]}}, "$ref": "#/$defs/SetPropertyValuesOfElementsParameters"}')))
def test_runtime_validation_SetPropertyValuesOfElementsParameters(data: dict):
    try:
        check_type(data, dicts.SetPropertyValuesOfElementsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetPropertyValuesOfElementsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetPropertyValuesOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetPropertyValuesOfElementsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetPropertyValuesOfElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/SetPropertyValuesOfElementsResult"}')))
def test_runtime_validation_SetPropertyValuesOfElementsResult(data: dict):
    try:
        check_type(data, dicts.SetPropertyValuesOfElementsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetPropertyValuesOfElementsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.SetPropertyValuesOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetPropertyValuesOfElementsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetStoriesParameters": {"type": "object", "properties": {"stories": {"$ref": "#/$defs/StoriesSettings"}}, "additionalProperties": false, "required": ["stories"]}, "StoriesSettings": {"type": "array", "description": "A list of story settings, used as input for creating or modifying multiple stories.", "items": {"$ref": "#/$defs/StorySettings"}}, "StorySettings": {"type": "object", "description": "Contains the configurable settings for creating or modifying a story. Used as input in API requests.", "properties": {"dispOnSections": {"type": "boolean", "description": "Story level lines should appear on sections and elevations."}, "level": {"type": "number", "description": "The story level."}, "name": {"type": "string", "description": "The name of the story."}}, "additionalProperties": false, "required": ["dispOnSections", "level", "name"]}}, "$ref": "#/$defs/SetStoriesParameters"}')))
def test_runtime_validation_SetStoriesParameters(data: dict):
    try:
        check_type(data, dicts.SetStoriesParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetStoriesParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetStoriesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetStoriesParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetViewSettingsParameters": {"type": "object", "properties": {"navigatorItemIdsWithViewSettings": {"type": "array", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "viewSettings": {"$ref": "#/$defs/ViewSettings"}}, "additionalProperties": false, "required": ["navigatorItemId", "viewSettings"]}}}, "additionalProperties": false, "required": ["navigatorItemIdsWithViewSettings"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ViewSettings": {"type": "object", "description": "The settings of a navigator view", "properties": {"modelViewOptions": {"type": "string", "description": "The name of the model view options. If empty, the view has custom model view options."}, "layerCombination": {"type": "string", "description": "The name of the layer combination. If empty, the view has custom layer combination."}, "dimensionStyle": {"type": "string", "description": "The name of the dimension style. If empty, the view has custom dimension style."}, "penSetName": {"type": "string", "description": "The name of the pen set. If empty, the view has custom pen set."}, "graphicOverrideCombination": {"type": "string", "description": "The name of the graphic override combination. If empty, the view has custom graphic override combination."}}, "additionalProperties": false, "required": []}}, "$ref": "#/$defs/SetViewSettingsParameters"}')))
def test_runtime_validation_SetViewSettingsParameters(data: dict):
    try:
        check_type(data, dicts.SetViewSettingsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetViewSettingsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.SetViewSettingsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetViewSettingsParameters' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetViewSettingsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/SetViewSettingsResult"}')))
def test_runtime_validation_SetViewSettingsResult(data: dict):
    try:
        check_type(data, dicts.SetViewSettingsResult)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.SetViewSettingsResult' with data: {repr(data)}\nError: {e}")

    try:
        models.SetViewSettingsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.SetViewSettingsResult' with data: {repr(data)}\nError: {e}")




@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"UpdateDrawingsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/UpdateDrawingsParameters"}')))
def test_runtime_validation_UpdateDrawingsParameters(data: dict):
    try:
        check_type(data, dicts.UpdateDrawingsParameters)
    except Exception as e:
        pytest.fail(f"Typeguard validation failed for TypedDict 'dicts.UpdateDrawingsParameters' with data: {repr(data)}\nError: {e}")

    try:
        models.UpdateDrawingsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Pydantic validation failed for model 'models.UpdateDrawingsParameters' with data: {repr(data)}\nError: {e}")

