
# This file is automatically generated by the pipeline. Do not edit directly.

import pytest
import json
from hypothesis import given, settings
from hypothesis_jsonschema import from_schema

# Note: Importing from the correct final model locations
from multiconn_archicad.models.official.types import *
from multiconn_archicad.models.official.commands import *

# Increase deadline for potentially complex model generation
settings.register_profile("ci", deadline=1000)
settings.load_profile("ci")


@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CloneProjectMapItemToViewMapParameters": {"type": "object", "properties": {"projectMapNavigatorItemId": {"description": "The ID of the navigator item to be cloned. Only navigator items from the project map can be cloned.", "$ref": "#/$defs/NavigatorItemId"}, "parentNavigatorItemId": {"description": "The ID of the navigator item below which the new view will be inserted. Only navigator items from the view map are allowed.", "$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["projectMapNavigatorItemId", "parentNavigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CloneProjectMapItemToViewMapParameters"}')))
def test_instantiate_CloneProjectMapItemToViewMapParameters(data: dict):
    """
    Tests that the CloneProjectMapItemToViewMapParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CloneProjectMapItemToViewMapParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CloneProjectMapItemToViewMapParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CloneProjectMapItemToViewMapResult": {"type": "object", "properties": {"createdNavigatorItemId": {"description": "The ID of the new navigator item in view map.", "$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["createdNavigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CloneProjectMapItemToViewMapResult"}')))
def test_instantiate_CloneProjectMapItemToViewMapResult(data: dict):
    """
    Tests that the CloneProjectMapItemToViewMapResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CloneProjectMapItemToViewMapResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CloneProjectMapItemToViewMapResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateAttributeFoldersParameters": {"type": "object", "properties": {"attributeFolders": {"type": "array", "items": {"$ref": "#/$defs/AttributeFolderCreationParameters"}}}, "additionalProperties": false, "required": ["attributeFolders"]}, "AttributeFolderCreationParameters": {"type": "object", "description": "Used to create an attribute folder. The folder type and it\'s path needs to be provided.", "properties": {"attributeType": {"$ref": "#/$defs/AttributeType"}, "path": {"$ref": "#/$defs/AttributeFolderPath"}}, "additionalProperties": false, "required": ["attributeType", "path"]}, "AttributeFolderPath": {"type": "array", "description": "A list of attribute folder names. May be empty.", "items": {"$ref": "#/$defs/AttributeFolderName"}}, "AttributeFolderName": {"type": "string", "description": "The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.", "minLength": 1}, "AttributeType": {"type": "string", "description": "The type of an attribute.", "enum": ["BuildingMaterial", "Composite", "Fill", "Layer", "LayerCombination", "Line", "PenTable", "Profile", "Surface", "ZoneCategory"]}}, "$ref": "#/$defs/CreateAttributeFoldersParameters"}')))
def test_instantiate_CreateAttributeFoldersParameters(data: dict):
    """
    Tests that the CreateAttributeFoldersParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateAttributeFoldersParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateAttributeFoldersParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateAttributeFoldersResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}}, "$ref": "#/$defs/CreateAttributeFoldersResult"}')))
def test_instantiate_CreateAttributeFoldersResult(data: dict):
    """
    Tests that the CreateAttributeFoldersResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateAttributeFoldersResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateAttributeFoldersResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateLayoutParameters": {"type": "object", "properties": {"layoutName": {"type": "string", "description": "The name of the layout.", "minLength": 1}, "layoutParameters": {"$ref": "#/$defs/LayoutParameters"}, "masterNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "parentNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["layoutName", "layoutParameters", "masterNavigatorItemId", "parentNavigatorItemId"]}, "LayoutParameters": {"type": "object", "description": "The parameters of the layout.", "properties": {"horizontalSize": {"type": "number", "description": "The horizontal size of the layout in millimeters."}, "verticalSize": {"type": "number", "description": "The vertical size of the layout in millimeters."}, "leftMargin": {"type": "number", "description": "The layout margin from the left side of the paper."}, "topMargin": {"type": "number", "description": "The layout margin from the top side of the paper."}, "rightMargin": {"type": "number", "description": "The layout margin from the right side of the paper."}, "bottomMargin": {"type": "number", "description": "The layout margin from the bottom side of the paper."}, "customLayoutNumber": {"type": "string", "description": "The custom ID."}, "customLayoutNumbering": {"type": "boolean", "description": "Defines whether a unique ID is used for the current layout or not."}, "doNotIncludeInNumbering": {"type": "boolean", "description": "Defines whether this layout is included in automatic ID assignment or not."}, "displayMasterLayoutBelow": {"type": "boolean", "description": "Defines whether to display the master layout above or below the layout."}, "layoutPageNumber": {"type": "integer", "description": "The page number of layout when this layout contains multi-page drawings."}, "actPageIndex": {"type": "integer", "description": "The actual index of layout inside the multi-page layout."}, "currentRevisionId": {"type": "string", "description": "The ID of the current document revision of the layout."}, "currentFinalRevisionId": {"type": "string", "description": "The ID with optional suffix of the current document revision of the layout."}, "hasIssuedRevision": {"type": "boolean", "description": "Defines whether one or more issued document revisions have already been created for the layout or not."}, "hasActualRevision": {"type": "boolean", "description": "Defines whether an open document revision exists for the layout or not."}}, "additionalProperties": false, "required": ["horizontalSize", "verticalSize", "leftMargin", "topMargin", "rightMargin", "bottomMargin", "customLayoutNumber", "customLayoutNumbering", "doNotIncludeInNumbering", "displayMasterLayoutBelow", "layoutPageNumber", "actPageIndex", "currentRevisionId", "currentFinalRevisionId", "hasIssuedRevision", "hasActualRevision"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateLayoutParameters"}')))
def test_instantiate_CreateLayoutParameters(data: dict):
    """
    Tests that the CreateLayoutParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateLayoutParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateLayoutParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateLayoutResult": {"type": "object", "properties": {"createdNavigatorItemId": {"description": "The ID of the new layout navigator item in the layout book.", "$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["createdNavigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateLayoutResult"}')))
def test_instantiate_CreateLayoutResult(data: dict):
    """
    Tests that the CreateLayoutResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateLayoutResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateLayoutResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateLayoutSubsetParameters": {"type": "object", "properties": {"subsetParameters": {"$ref": "#/$defs/Subset"}, "parentNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["subsetParameters", "parentNavigatorItemId"]}, "Subset": {"type": "object", "description": "A set of options used to assign IDs to the layouts contained in the subset.", "properties": {"name": {"type": "string", "description": "The name for the layout subset.", "minLength": 1}, "includeToIDSequence": {"type": "boolean", "description": "Defines whether this subset is included in automatic ID assignment or not."}, "customNumbering": {"type": "boolean", "description": "Defines whether the IDs are generated automatically or a custom numbering is used."}, "continueNumbering": {"type": "boolean", "description": "Defines whether to continue using the ID assignment of the upper levels or not. If \'true\', layouts within this subset are going to be assigned IDs as if they were not within this subset, but part of the level above. In this case you only use the Subset as a logical grouping which has no effect on IDs."}, "useUpperPrefix": {"type": "boolean", "description": "Defines whether to use the prefix and ID of the upper levels or not. If \'true\', layouts in this subset will be assigned IDs based on the previous layout in the layout book structure."}, "addOwnPrefix": {"type": "boolean", "description": "Defines whether to add own prefix to the subset or not."}, "customNumber": {"type": "string", "description": "The custom subset ID."}, "autoNumber": {"type": "string", "description": "The automatic subset ID."}, "numberingStyle": {"$ref": "#/$defs/NumberingStyle", "description": "The style of the ID formatting."}, "startAt": {"type": "integer", "description": "The starting value of the numbering."}, "ownPrefix": {"type": "string", "description": "The custom prefix for the subset."}}, "additionalProperties": false, "required": ["name", "includeToIDSequence", "customNumbering", "continueNumbering", "useUpperPrefix", "addOwnPrefix", "customNumber", "autoNumber", "numberingStyle", "startAt", "ownPrefix"]}, "NumberingStyle": {"type": "string", "description": "A supported numbering style.", "enum": ["Undefined", "abc", "ABC", "1", "01", "001", "0001", "noID"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateLayoutSubsetParameters"}')))
def test_instantiate_CreateLayoutSubsetParameters(data: dict):
    """
    Tests that the CreateLayoutSubsetParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateLayoutSubsetParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateLayoutSubsetParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateLayoutSubsetResult": {"type": "object", "properties": {"createdSubsetId": {"description": "The ID of the new subset navigator item in the layout book.", "$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["createdSubsetId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateLayoutSubsetResult"}')))
def test_instantiate_CreateLayoutSubsetResult(data: dict):
    """
    Tests that the CreateLayoutSubsetResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateLayoutSubsetResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateLayoutSubsetResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateViewMapFolderParameters": {"type": "object", "properties": {"folderParameters": {"$ref": "#/$defs/FolderParameters", "description": "This is the name of the new folder."}, "parentNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId", "description": "The newly created folder will be placed under this parent item. If this parameter is not given the folder will be created as the first item in the View Map list."}, "previousNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId", "description": "The newly created folder will be placed after this sibling item. If this parameter is not given the folder will be created as the first item under the parent."}}, "additionalProperties": false, "required": ["folderParameters"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "FolderParameters": {"type": "object", "description": "The parameters of a folder.", "properties": {"name": {"type": "string", "description": "The name of the folder."}}, "additionalProperties": false, "required": ["name"]}}, "$ref": "#/$defs/CreateViewMapFolderParameters"}')))
def test_instantiate_CreateViewMapFolderParameters(data: dict):
    """
    Tests that the CreateViewMapFolderParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateViewMapFolderParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateViewMapFolderParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"CreateViewMapFolderResult": {"type": "object", "properties": {"createdFolderNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["createdFolderNavigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/CreateViewMapFolderResult"}')))
def test_instantiate_CreateViewMapFolderResult(data: dict):
    """
    Tests that the CreateViewMapFolderResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        CreateViewMapFolderResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate CreateViewMapFolderResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteAttributeFoldersParameters": {"type": "object", "properties": {"attributeFolderIds": {"$ref": "#/$defs/AttributeFolderIds"}}, "additionalProperties": false, "required": ["attributeFolderIds"]}, "AttributeFolderIds": {"type": "array", "description": "A list of attribute folder identifiers.", "items": {"$ref": "#/$defs/AttributeFolderIdWrapperItem"}}, "AttributeFolderIdWrapperItem": {"type": "object", "properties": {"attributeFolderId": {"$ref": "#/$defs/AttributeFolderId"}}, "additionalProperties": false, "required": ["attributeFolderId"]}, "AttributeFolderId": {"type": "object", "description": "The identifier of an attribute folder.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/DeleteAttributeFoldersParameters"}')))
def test_instantiate_DeleteAttributeFoldersParameters(data: dict):
    """
    Tests that the DeleteAttributeFoldersParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        DeleteAttributeFoldersParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate DeleteAttributeFoldersParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteAttributeFoldersResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}}, "$ref": "#/$defs/DeleteAttributeFoldersResult"}')))
def test_instantiate_DeleteAttributeFoldersResult(data: dict):
    """
    Tests that the DeleteAttributeFoldersResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        DeleteAttributeFoldersResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate DeleteAttributeFoldersResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/DeleteAttributesParameters"}')))
def test_instantiate_DeleteAttributesParameters(data: dict):
    """
    Tests that the DeleteAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        DeleteAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate DeleteAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteAttributesResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}}, "$ref": "#/$defs/DeleteAttributesResult"}')))
def test_instantiate_DeleteAttributesResult(data: dict):
    """
    Tests that the DeleteAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        DeleteAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate DeleteAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/DeleteNavigatorItemsParameters"}')))
def test_instantiate_DeleteNavigatorItemsParameters(data: dict):
    """
    Tests that the DeleteNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        DeleteNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate DeleteNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"DeleteNavigatorItemsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}}, "$ref": "#/$defs/DeleteNavigatorItemsResult"}')))
def test_instantiate_DeleteNavigatorItemsResult(data: dict):
    """
    Tests that the DeleteNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        DeleteNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate DeleteNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ExecuteAddOnCommandParameters": {"type": "object", "properties": {"addOnCommandId": {"$ref": "#/$defs/AddOnCommandId"}, "addOnCommandParameters": {"$ref": "#/$defs/AddOnCommandParameters"}}, "additionalProperties": false, "required": ["addOnCommandId"]}, "AddOnCommandParameters": {"type": "object", "description": "The input parameters of an Add-On command.", "additionalProperties": true}, "AddOnCommandId": {"type": "object", "description": "The identifier of an Add-On command.", "properties": {"commandNamespace": {"type": "string", "description": "The namespace of the Add-On command.", "minLength": 1}, "commandName": {"type": "string", "description": "The name of the Add-On command.", "minLength": 1}}, "additionalProperties": false, "required": ["commandNamespace", "commandName"]}}, "$ref": "#/$defs/ExecuteAddOnCommandParameters"}')))
def test_instantiate_ExecuteAddOnCommandParameters(data: dict):
    """
    Tests that the ExecuteAddOnCommandParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        ExecuteAddOnCommandParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate ExecuteAddOnCommandParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"ExecuteAddOnCommandResult": {"type": "object", "properties": {"addOnCommandResponse": {"$ref": "#/$defs/AddOnCommandResponse"}}, "additionalProperties": false, "required": ["addOnCommandResponse"]}, "AddOnCommandResponse": {"type": "object", "description": "The response returned by an Add-On command.", "additionalProperties": true}}, "$ref": "#/$defs/ExecuteAddOnCommandResult"}')))
def test_instantiate_ExecuteAddOnCommandResult(data: dict):
    """
    Tests that the ExecuteAddOnCommandResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        ExecuteAddOnCommandResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate ExecuteAddOnCommandResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"Get2DBoundingBoxesParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/Get2DBoundingBoxesParameters"}')))
def test_instantiate_Get2DBoundingBoxesParameters(data: dict):
    """
    Tests that the Get2DBoundingBoxesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        Get2DBoundingBoxesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate Get2DBoundingBoxesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"Get2DBoundingBoxesResult": {"type": "object", "properties": {"boundingBoxes2D": {"$ref": "#/$defs/BoundingBoxes2D"}}, "additionalProperties": false, "required": ["boundingBoxes2D"]}, "BoundingBoxes2D": {"type": "array", "description": "A list of 2D bounding boxes.", "items": {"$ref": "#/$defs/BoundingBox2DOrError"}}, "BoundingBox2DOrError": {"type": "object", "description": "A 2D bounding box or an error.", "oneOf": [{"title": "boundingBox2D", "properties": {"boundingBox2D": {"$ref": "#/$defs/BoundingBox2D"}}, "additionalProperties": false, "required": ["boundingBox2D"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "BoundingBox2D": {"type": "object", "description": "The 2D bounding box of an element.", "properties": {"xMin": {"type": "number", "description": "The minimum X value of the bounding box."}, "yMin": {"type": "number", "description": "The minimum Y value of the bounding box."}, "xMax": {"type": "number", "description": "The maximum X value of the bounding box."}, "yMax": {"type": "number", "description": "The maximum Y value of the bounding box."}}, "additionalProperties": false, "required": ["xMin", "yMin", "xMax", "yMax"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/Get2DBoundingBoxesResult"}')))
def test_instantiate_Get2DBoundingBoxesResult(data: dict):
    """
    Tests that the Get2DBoundingBoxesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        Get2DBoundingBoxesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate Get2DBoundingBoxesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"Get3DBoundingBoxesParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/Get3DBoundingBoxesParameters"}')))
def test_instantiate_Get3DBoundingBoxesParameters(data: dict):
    """
    Tests that the Get3DBoundingBoxesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        Get3DBoundingBoxesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate Get3DBoundingBoxesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"Get3DBoundingBoxesResult": {"type": "object", "properties": {"boundingBoxes3D": {"$ref": "#/$defs/BoundingBoxes3D"}}, "additionalProperties": false, "required": ["boundingBoxes3D"]}, "BoundingBoxes3D": {"type": "array", "description": "A list of 3D bounding boxes.", "items": {"$ref": "#/$defs/BoundingBox3DOrError"}}, "BoundingBox3DOrError": {"type": "object", "description": "A 3D bounding box or an error.", "oneOf": [{"title": "boundingBox3D", "properties": {"boundingBox3D": {"$ref": "#/$defs/BoundingBox3D"}}, "additionalProperties": false, "required": ["boundingBox3D"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "BoundingBox3D": {"type": "object", "description": "A 3D bounding box of an element.", "properties": {"xMin": {"type": "number", "description": "The minimum X value of the bounding box."}, "yMin": {"type": "number", "description": "The minimum Y value of the bounding box."}, "zMin": {"type": "number", "description": "The minimum Z value of the bounding box."}, "xMax": {"type": "number", "description": "The maximum X value of the bounding box."}, "yMax": {"type": "number", "description": "The maximum Y value of the bounding box."}, "zMax": {"type": "number", "description": "The maximum Z value of the bounding box."}}, "additionalProperties": false, "required": ["xMin", "yMin", "zMin", "xMax", "yMax", "zMax"]}}, "$ref": "#/$defs/Get3DBoundingBoxesResult"}')))
def test_instantiate_Get3DBoundingBoxesResult(data: dict):
    """
    Tests that the Get3DBoundingBoxesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        Get3DBoundingBoxesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate Get3DBoundingBoxesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetActivePenTablesResult": {"type": "object", "properties": {"modelViewPenTableId": {"$ref": "#/$defs/AttributeIdOrError", "description": "Model view pen table identifier or an error."}, "layoutBookPenTableId": {"$ref": "#/$defs/AttributeIdOrError", "description": "Layout book pen table identifier or an error."}}, "additionalProperties": false, "required": ["modelViewPenTableId", "layoutBookPenTableId"]}, "AttributeIdOrError": {"type": "object", "description": "The attribute\'s identifier or an error.", "oneOf": [{"title": "attributeId", "$ref": "#/$defs/AttributeIdWrapperItem"}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetActivePenTablesResult"}')))
def test_instantiate_GetActivePenTablesResult(data: dict):
    """
    Tests that the GetActivePenTablesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetActivePenTablesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetActivePenTablesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllClassificationSystemsResult": {"type": "object", "properties": {"classificationSystems": {"$ref": "#/$defs/ClassificationSystems"}}, "additionalProperties": false, "required": ["classificationSystems"]}, "ClassificationSystems": {"type": "array", "description": "A list of classification systems.", "items": {"$ref": "#/$defs/ClassificationSystem"}}, "ClassificationSystem": {"type": "object", "description": "The details of a classification system.", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}, "name": {"type": "string", "description": "The display name of the classification system."}, "description": {"type": "string", "description": "The description of the classification system."}, "source": {"type": "string", "description": "The source of the classification system (e.g. URL to a classification system standard)."}, "version": {"type": "string", "description": "The version of the classification system."}, "date": {"$ref": "#/$defs/Date", "description": "The release date of the classification system\'s current version."}}, "additionalProperties": false, "required": ["classificationSystemId", "name", "description", "source", "version", "date"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "Date": {"type": "string", "description": "A date in its string representation as defined in ISO 8601: YYYY-MM-DD.", "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"}}, "$ref": "#/$defs/GetAllClassificationSystemsResult"}')))
def test_instantiate_GetAllClassificationSystemsResult(data: dict):
    """
    Tests that the GetAllClassificationSystemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllClassificationSystemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllClassificationSystemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllClassificationsInSystemParameters": {"type": "object", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAllClassificationsInSystemParameters"}')))
def test_instantiate_GetAllClassificationsInSystemParameters(data: dict):
    """
    Tests that the GetAllClassificationsInSystemParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllClassificationsInSystemParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllClassificationsInSystemParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllClassificationsInSystemResult": {"type": "object", "properties": {"classificationItems": {"$ref": "#/$defs/ClassificationItems"}}, "additionalProperties": false, "required": ["classificationItems"]}, "ClassificationItems": {"type": "array", "description": "A list of classification items.", "items": {"$ref": "#/$defs/ClassificationItemArrayItem"}}, "ClassificationItemArrayItem": {"type": "object", "properties": {"classificationItem": {"$ref": "#/$defs/ClassificationItemInTree"}}, "additionalProperties": false, "required": ["classificationItem"]}, "ClassificationItemInTree": {"type": "object", "description": "The details of a classification item.", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}, "id": {"type": "string", "description": "The unique identifier of the classification item as specified by the user."}, "name": {"type": "string", "description": "The display name of the classification item."}, "description": {"type": "string", "description": "The description of the classification item."}}, "additionalProperties": false, "required": ["classificationItemId", "id", "name", "description"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAllClassificationsInSystemResult"}')))
def test_instantiate_GetAllClassificationsInSystemResult(data: dict):
    """
    Tests that the GetAllClassificationsInSystemResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllClassificationsInSystemResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllClassificationsInSystemResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllElementsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAllElementsResult"}')))
def test_instantiate_GetAllElementsResult(data: dict):
    """
    Tests that the GetAllElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertyGroupIdsParameters": {"type": "object", "properties": {"propertyType": {"$ref": "#/$defs/PropertyType"}}, "additionalProperties": false}, "PropertyType": {"type": "string", "description": "The type of a property group or a property definition.", "enum": ["UserDefined", "BuiltIn"]}}, "$ref": "#/$defs/GetAllPropertyGroupIdsParameters"}')))
def test_instantiate_GetAllPropertyGroupIdsParameters(data: dict):
    """
    Tests that the GetAllPropertyGroupIdsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllPropertyGroupIdsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllPropertyGroupIdsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertyGroupIdsResult": {"type": "object", "properties": {"propertyGroupIds": {"$ref": "#/$defs/PropertyGroupIds"}}, "additionalProperties": false, "required": ["propertyGroupIds"]}, "PropertyGroupIds": {"type": "array", "description": "A list of property group identifiers.", "items": {"$ref": "#/$defs/PropertyGroupIdArrayItem"}}, "PropertyGroupIdArrayItem": {"type": "object", "properties": {"propertyGroupId": {"$ref": "#/$defs/PropertyGroupId"}}, "additionalProperties": false, "required": ["propertyGroupId"]}, "PropertyGroupId": {"type": "object", "description": "The identifier of a property group.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAllPropertyGroupIdsResult"}')))
def test_instantiate_GetAllPropertyGroupIdsResult(data: dict):
    """
    Tests that the GetAllPropertyGroupIdsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllPropertyGroupIdsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllPropertyGroupIdsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertyIdsOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "propertyType": {"$ref": "#/$defs/PropertyType"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyType": {"type": "string", "description": "The type of a property group or a property definition.", "enum": ["UserDefined", "BuiltIn"]}}, "$ref": "#/$defs/GetAllPropertyIdsOfElementsParameters"}')))
def test_instantiate_GetAllPropertyIdsOfElementsParameters(data: dict):
    """
    Tests that the GetAllPropertyIdsOfElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllPropertyIdsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllPropertyIdsOfElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertyIdsOfElementsResult": {"type": "object", "properties": {"propertyIdsOfElements": {"$ref": "#/$defs/PropertyIdsOfElementOrErrorArray"}}, "additionalProperties": false, "required": ["propertyIdsOfElements"]}, "PropertyIdsOfElementOrErrorArray": {"type": "array", "description": "A list of property identifiers of elements or errors.", "items": {"$ref": "#/$defs/PropertyIdsOfElementOrError"}}, "PropertyIdsOfElementOrError": {"type": "object", "description": "A list property identifiers of an owner element or an error.", "oneOf": [{"title": "propertyIdsOfElement", "properties": {"propertyIdsOfElement": {"$ref": "#/$defs/PropertyIdsOfElement"}}, "additionalProperties": false, "required": ["propertyIdsOfElement"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "PropertyIdsOfElement": {"type": "object", "description": "A list property identifiers of an owner element.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "propertyIds": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["elementId", "propertyIds"]}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetAllPropertyIdsOfElementsResult"}')))
def test_instantiate_GetAllPropertyIdsOfElementsResult(data: dict):
    """
    Tests that the GetAllPropertyIdsOfElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllPropertyIdsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllPropertyIdsOfElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertyIdsParameters": {"type": "object", "properties": {"propertyType": {"$ref": "#/$defs/PropertyType"}}, "additionalProperties": false}, "PropertyType": {"type": "string", "description": "The type of a property group or a property definition.", "enum": ["UserDefined", "BuiltIn"]}}, "$ref": "#/$defs/GetAllPropertyIdsParameters"}')))
def test_instantiate_GetAllPropertyIdsParameters(data: dict):
    """
    Tests that the GetAllPropertyIdsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllPropertyIdsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllPropertyIdsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertyIdsResult": {"type": "object", "properties": {"propertyIds": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["propertyIds"]}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAllPropertyIdsResult"}')))
def test_instantiate_GetAllPropertyIdsResult(data: dict):
    """
    Tests that the GetAllPropertyIdsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllPropertyIdsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllPropertyIdsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAllPropertyNamesResult": {"type": "object", "properties": {"properties": {"$ref": "#/$defs/PropertyUserIds"}}, "additionalProperties": false, "required": ["properties"]}, "PropertyUserIds": {"type": "array", "description": "A list of PropertyUserId objects.", "items": {"$ref": "#/$defs/PropertyUserId"}}, "PropertyUserId": {"type": "object", "description": "The unique identifier of a Property, identified by its name. May represent a User-Defined or a Built-In Property.", "oneOf": [{"$ref": "#/$defs/UserDefinedPropertyUserId"}, {"$ref": "#/$defs/BuiltInPropertyUserId"}]}, "BuiltInPropertyUserId": {"type": "object", "description": "The unique identifier of a Built-In Property, identified by its name.", "properties": {"type": {"type": "string", "enum": ["BuiltIn"]}, "nonLocalizedName": {"type": "string", "description": "The non-localized name of the Built-In Property."}}, "additionalProperties": false, "required": ["type", "nonLocalizedName"]}, "UserDefinedPropertyUserId": {"type": "object", "description": "The unique identifier of a User-Defined Property, identified by its name.", "properties": {"type": {"type": "string", "enum": ["UserDefined"]}, "localizedName": {"type": "array", "description": "A two-element list of the localized name parts. The first element is the name of the group the property belongs to, and the second element is the actual name of the property.", "items": {"type": "string"}, "minItems": 2, "maxItems": 2}}, "additionalProperties": false, "required": ["type", "localizedName"]}}, "$ref": "#/$defs/GetAllPropertyNamesResult"}')))
def test_instantiate_GetAllPropertyNamesResult(data: dict):
    """
    Tests that the GetAllPropertyNamesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAllPropertyNamesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAllPropertyNamesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributeFolderStructureParameters": {"type": "object", "properties": {"attributeType": {"$ref": "#/$defs/AttributeType"}, "path": {"$ref": "#/$defs/AttributeFolderPath"}}, "additionalProperties": false, "required": ["attributeType"]}, "AttributeFolderPath": {"type": "array", "description": "A list of attribute folder names. May be empty.", "items": {"$ref": "#/$defs/AttributeFolderName"}}, "AttributeFolderName": {"type": "string", "description": "The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.", "minLength": 1}, "AttributeType": {"type": "string", "description": "The type of an attribute.", "enum": ["BuildingMaterial", "Composite", "Fill", "Layer", "LayerCombination", "Line", "PenTable", "Profile", "Surface", "ZoneCategory"]}}, "$ref": "#/$defs/GetAttributeFolderStructureParameters"}')))
def test_instantiate_GetAttributeFolderStructureParameters(data: dict):
    """
    Tests that the GetAttributeFolderStructureParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributeFolderStructureParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributeFolderStructureParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributeFolderStructureResult": {"type": "object", "properties": {"attributeFolder": {"$ref": "#/$defs/AttributeFolderStructure"}}, "additionalProperties": false, "required": ["attributeFolder"]}, "AttributeFolderStructure": {"type": "object", "description": "The details of an attribute folder structure.", "properties": {"attributeFolderId": {"$ref": "#/$defs/AttributeFolderId"}, "name": {"$ref": "#/$defs/AttributeFolderName"}, "attributes": {"$ref": "#/$defs/AttributeHeaders", "description": "The names and identifiers of the attributes contained in this folder."}, "subfolders": {"$ref": "#/$defs/AttributeFolderStructures", "description": "The subfolders of this attribute folder."}}, "additionalProperties": false, "required": ["attributeFolderId", "name"]}, "AttributeFolderStructures": {"type": "array", "description": "A list of attribute folder structures.", "items": {"$ref": "#/$defs/AttributeFolderStructureArrayItem"}}, "AttributeFolderStructureArrayItem": {"type": "object", "properties": {"attributeFolder": {"$ref": "#/$defs/AttributeFolderStructure"}}, "additionalProperties": false, "required": ["attributeFolder"]}, "AttributeFolderId": {"type": "object", "description": "The identifier of an attribute folder.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeHeaders": {"type": "array", "description": "A list of attribute headers.", "items": {"$ref": "#/$defs/AttributeHeaderArrayItem"}}, "AttributeHeaderArrayItem": {"type": "object", "properties": {"attribute": {"$ref": "#/$defs/AttributeHeader"}}, "additionalProperties": false, "required": ["attribute"]}, "AttributeHeader": {"type": "object", "description": "The header object of an attribute.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}}, "additionalProperties": false, "required": ["attributeId", "name"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}, "AttributeFolderName": {"type": "string", "description": "The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.", "minLength": 1}}, "$ref": "#/$defs/GetAttributeFolderStructureResult"}')))
def test_instantiate_GetAttributeFolderStructureResult(data: dict):
    """
    Tests that the GetAttributeFolderStructureResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributeFolderStructureResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributeFolderStructureResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributeFoldersParameters": {"type": "object", "properties": {"attributeFolderIds": {"$ref": "#/$defs/AttributeFolderIds"}}, "additionalProperties": false, "required": ["attributeFolderIds"]}, "AttributeFolderIds": {"type": "array", "description": "A list of attribute folder identifiers.", "items": {"$ref": "#/$defs/AttributeFolderIdWrapperItem"}}, "AttributeFolderIdWrapperItem": {"type": "object", "properties": {"attributeFolderId": {"$ref": "#/$defs/AttributeFolderId"}}, "additionalProperties": false, "required": ["attributeFolderId"]}, "AttributeFolderId": {"type": "object", "description": "The identifier of an attribute folder.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAttributeFoldersParameters"}')))
def test_instantiate_GetAttributeFoldersParameters(data: dict):
    """
    Tests that the GetAttributeFoldersParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributeFoldersParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributeFoldersParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributeFoldersResult": {"type": "object", "properties": {"attributeFolders": {"$ref": "#/$defs/AttributeFolders"}}, "additionalProperties": false, "required": ["attributeFolders"]}, "AttributeFolders": {"type": "array", "description": "A list of attribute folders.", "items": {"$ref": "#/$defs/AttributeFolderOrError"}}, "AttributeFolderOrError": {"type": "object", "description": "An attribute folder or an error.", "oneOf": [{"title": "AttributeFolder", "properties": {"attributeFolder": {"$ref": "#/$defs/AttributeFolder"}}, "additionalProperties": false, "required": ["attributeFolder"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "AttributeFolder": {"type": "object", "description": "Identifies an attribute folder. The path of the root folder is repesented by empty array.", "properties": {"attributeType": {"$ref": "#/$defs/AttributeType"}, "path": {"$ref": "#/$defs/AttributeFolderPath"}, "attributeFolderId": {"$ref": "#/$defs/AttributeFolderId"}, "attributeIds": {"$ref": "#/$defs/AttributeIds"}, "attributeFolderIds": {"$ref": "#/$defs/AttributeFolderIds"}}, "additionalProperties": false, "required": ["attributeType", "path", "attributeFolderId", "attributeIds", "attributeFolderIds"]}, "AttributeType": {"type": "string", "description": "The type of an attribute.", "enum": ["BuildingMaterial", "Composite", "Fill", "Layer", "LayerCombination", "Line", "PenTable", "Profile", "Surface", "ZoneCategory"]}, "AttributeFolderPath": {"type": "array", "description": "A list of attribute folder names. May be empty.", "items": {"$ref": "#/$defs/AttributeFolderName"}}, "AttributeFolderName": {"type": "string", "description": "The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.", "minLength": 1}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeFolderId": {"type": "object", "description": "The identifier of an attribute folder.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "AttributeFolderIds": {"type": "array", "description": "A list of attribute folder identifiers.", "items": {"$ref": "#/$defs/AttributeFolderIdWrapperItem"}}, "AttributeFolderIdWrapperItem": {"type": "object", "properties": {"attributeFolderId": {"$ref": "#/$defs/AttributeFolderId"}}, "additionalProperties": false, "required": ["attributeFolderId"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetAttributeFoldersResult"}')))
def test_instantiate_GetAttributeFoldersResult(data: dict):
    """
    Tests that the GetAttributeFoldersResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributeFoldersResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributeFoldersResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributesByTypeParameters": {"type": "object", "properties": {"attributeType": {"$ref": "#/$defs/AttributeType"}}, "additionalProperties": false, "required": ["attributeType"]}, "AttributeType": {"type": "string", "description": "The type of an attribute.", "enum": ["BuildingMaterial", "Composite", "Fill", "Layer", "LayerCombination", "Line", "PenTable", "Profile", "Surface", "ZoneCategory"]}}, "$ref": "#/$defs/GetAttributesByTypeParameters"}')))
def test_instantiate_GetAttributesByTypeParameters(data: dict):
    """
    Tests that the GetAttributesByTypeParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributesByTypeParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributesByTypeParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributesByTypeResult": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAttributesByTypeResult"}')))
def test_instantiate_GetAttributesByTypeResult(data: dict):
    """
    Tests that the GetAttributesByTypeResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributesByTypeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributesByTypeResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributesIndicesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetAttributesIndicesParameters"}')))
def test_instantiate_GetAttributesIndicesParameters(data: dict):
    """
    Tests that the GetAttributesIndicesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributesIndicesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributesIndicesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetAttributesIndicesResult": {"type": "object", "properties": {"attributeIndicesAndGuids": {"$ref": "#/$defs/AttributeIndicesAndGuids"}}, "additionalProperties": false, "required": ["attributeIndicesAndGuids"]}, "AttributeIndicesAndGuids": {"type": "array", "description": "A list of complete attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIndexAndGuidOrError"}}, "AttributeIndexAndGuidOrError": {"type": "object", "description": "The attribute\'s identifier or an error.", "oneOf": [{"title": "attributeIndexAndGuid", "$ref": "#/$defs/AttributeIndexAndGuidWrapperItem"}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "AttributeIndexAndGuidWrapperItem": {"type": "object", "properties": {"attributeIndexAndGuid": {"$ref": "#/$defs/AttributeIndexAndGuid"}}, "additionalProperties": false, "required": ["attributeIndexAndGuid"]}, "AttributeIndexAndGuid": {"type": "object", "description": "The complete identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}, "index": {"$ref": "#/$defs/AttributeIndex"}}, "additionalProperties": false, "required": ["guid", "index"]}, "AttributeIndex": {"type": "number", "description": "The index of an attribute.", "minLength": 1}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetAttributesIndicesResult"}')))
def test_instantiate_GetAttributesIndicesResult(data: dict):
    """
    Tests that the GetAttributesIndicesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetAttributesIndicesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetAttributesIndicesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetBuildingMaterialAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetBuildingMaterialAttributesParameters"}')))
def test_instantiate_GetBuildingMaterialAttributesParameters(data: dict):
    """
    Tests that the GetBuildingMaterialAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetBuildingMaterialAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetBuildingMaterialAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetBuildingMaterialAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/BuildingMaterialAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "BuildingMaterialAttributes": {"type": "array", "description": "A list of building material attributes and potential errors.", "items": {"$ref": "#/$defs/BuildingMaterialAttributeOrError"}}, "BuildingMaterialAttributeOrError": {"type": "object", "description": "A building material attribute or an error.", "oneOf": [{"title": "BuildingMaterialAttribute", "properties": {"buildingMaterialAttribute": {"$ref": "#/$defs/BuildingMaterialAttribute"}}, "additionalProperties": false, "required": ["buildingMaterialAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "BuildingMaterialAttribute": {"type": "object", "description": "A building material attribute", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "id": {"type": "string", "description": "The id of the building material."}, "connectionPriority": {"type": "integer", "description": "The connection priority of the building material."}, "cutFillId": {"$ref": "#/$defs/AttributeIdOrError", "description": "The identifier of the building material attribute\'s fill component."}, "cutFillPenIndex": {"$ref": "#/$defs/PenIndex", "description": "The cut fill pen index of the building material."}, "cutSurfaceId": {"$ref": "#/$defs/AttributeIdOrError", "description": "The identifier of the building material attribute\'s surface component."}}, "additionalProperties": false, "required": ["attributeId", "name", "id", "connectionPriority", "cutFillId", "cutFillPenIndex", "cutSurfaceId"]}, "PenIndex": {"type": "integer", "description": "The index number of a pen.", "minimum": 0, "maximum": 255}, "AttributeIdOrError": {"type": "object", "description": "The attribute\'s identifier or an error.", "oneOf": [{"title": "attributeId", "$ref": "#/$defs/AttributeIdWrapperItem"}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}}, "$ref": "#/$defs/GetBuildingMaterialAttributesResult"}')))
def test_instantiate_GetBuildingMaterialAttributesResult(data: dict):
    """
    Tests that the GetBuildingMaterialAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetBuildingMaterialAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetBuildingMaterialAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetBuiltInContainerNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetBuiltInContainerNavigatorItemsParameters"}')))
def test_instantiate_GetBuiltInContainerNavigatorItemsParameters(data: dict):
    """
    Tests that the GetBuiltInContainerNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetBuiltInContainerNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetBuiltInContainerNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetBuiltInContainerNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/BuiltInContainerNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "BuiltInContainerNavigatorItems": {"type": "array", "description": "A list of built-in container navigator items.", "items": {"$ref": "#/$defs/BuiltInContainerNavigatorItemOrError"}}, "BuiltInContainerNavigatorItemOrError": {"type": "object", "description": "Contains a built-in container navigator item or an error.", "oneOf": [{"title": "WorksheetNavigatorItem", "properties": {"builtInContainerNavigatorItem": {"$ref": "#/$defs/BuiltInContainerNavigatorItem"}}, "additionalProperties": false, "required": ["builtInContainerNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "BuiltInContainerNavigatorItem": {"type": "object", "description": "The details of a built-in container navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}, "contentIds": {"$ref": "#/$defs/NavigatorItemIds", "description": "The identifiers of the navigator items inside the container navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name", "contentIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetBuiltInContainerNavigatorItemsResult"}')))
def test_instantiate_GetBuiltInContainerNavigatorItemsResult(data: dict):
    """
    Tests that the GetBuiltInContainerNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetBuiltInContainerNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetBuiltInContainerNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationItemAvailabilityParameters": {"type": "object", "properties": {"classificationItemIds": {"$ref": "#/$defs/ClassificationItemIds"}}, "additionalProperties": false, "required": ["classificationItemIds"]}, "ClassificationItemIds": {"type": "array", "description": "A list of classification item identifiers.", "items": {"$ref": "#/$defs/ClassificationItemIdArrayItem"}}, "ClassificationItemIdArrayItem": {"type": "object", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}}, "additionalProperties": false, "required": ["classificationItemId"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetClassificationItemAvailabilityParameters"}')))
def test_instantiate_GetClassificationItemAvailabilityParameters(data: dict):
    """
    Tests that the GetClassificationItemAvailabilityParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetClassificationItemAvailabilityParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetClassificationItemAvailabilityParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationItemAvailabilityResult": {"type": "object", "properties": {"classificationItemAvailabilityList": {"$ref": "#/$defs/ClassificationItemAvailabilityList"}}, "additionalProperties": false, "required": ["classificationItemAvailabilityList"]}, "ClassificationItemAvailabilityList": {"type": "array", "description": "A list of classification item avalabilities.", "items": {"$ref": "#/$defs/ClassificationItemAvailabilityOrError"}}, "ClassificationItemAvailabilityOrError": {"type": "object", "description": "Contains the ids of property definitions available for the given classification item or error.", "oneOf": [{"title": "classificationItemAvailability", "properties": {"classificationItemAvailability": {"$ref": "#/$defs/ClassificationItemAvailability"}}, "additionalProperties": false, "required": ["classificationItemAvailability"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ClassificationItemAvailability": {"type": "object", "description": "Contains the ids of property definitions available for the given classification item.", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}, "availableProperties": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["classificationItemId", "availableProperties"]}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetClassificationItemAvailabilityResult"}')))
def test_instantiate_GetClassificationItemAvailabilityResult(data: dict):
    """
    Tests that the GetClassificationItemAvailabilityResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetClassificationItemAvailabilityResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetClassificationItemAvailabilityResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationSystemIdsResult": {"type": "object", "properties": {"classificationSystemIds": {"$ref": "#/$defs/ClassificationSystemIds"}}, "additionalProperties": false, "required": ["classificationSystemIds"]}, "ClassificationSystemIds": {"type": "array", "description": "A list of classification system identifiers.", "items": {"$ref": "#/$defs/ClassificationSystemIdArrayItem"}}, "ClassificationSystemIdArrayItem": {"type": "object", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetClassificationSystemIdsResult"}')))
def test_instantiate_GetClassificationSystemIdsResult(data: dict):
    """
    Tests that the GetClassificationSystemIdsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetClassificationSystemIdsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetClassificationSystemIdsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationSystemsParameters": {"type": "object", "properties": {"classificationSystemIds": {"$ref": "#/$defs/ClassificationSystemIds"}}, "additionalProperties": false, "required": ["classificationSystemIds"]}, "ClassificationSystemIds": {"type": "array", "description": "A list of classification system identifiers.", "items": {"$ref": "#/$defs/ClassificationSystemIdArrayItem"}}, "ClassificationSystemIdArrayItem": {"type": "object", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetClassificationSystemsParameters"}')))
def test_instantiate_GetClassificationSystemsParameters(data: dict):
    """
    Tests that the GetClassificationSystemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetClassificationSystemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetClassificationSystemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationSystemsResult": {"type": "object", "properties": {"classificationSystems": {"$ref": "#/$defs/ClassificationSystemsOrErrors"}}, "additionalProperties": false, "required": ["classificationSystems"]}, "ClassificationSystemsOrErrors": {"type": "array", "description": "A list of classification systems or errors.", "items": {"$ref": "#/$defs/ClassificationSystemOrError"}}, "ClassificationSystemOrError": {"type": "object", "description": "Contains a classification system or error.", "oneOf": [{"title": "classificationSystem", "properties": {"classificationSystem": {"$ref": "#/$defs/ClassificationSystem"}}, "additionalProperties": false, "required": ["classificationSystem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "ClassificationSystem": {"type": "object", "description": "The details of a classification system.", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}, "name": {"type": "string", "description": "The display name of the classification system."}, "description": {"type": "string", "description": "The description of the classification system."}, "source": {"type": "string", "description": "The source of the classification system (e.g. URL to a classification system standard)."}, "version": {"type": "string", "description": "The version of the classification system."}, "date": {"$ref": "#/$defs/Date", "description": "The release date of the classification system\'s current version."}}, "additionalProperties": false, "required": ["classificationSystemId", "name", "description", "source", "version", "date"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "Date": {"type": "string", "description": "A date in its string representation as defined in ISO 8601: YYYY-MM-DD.", "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"}}, "$ref": "#/$defs/GetClassificationSystemsResult"}')))
def test_instantiate_GetClassificationSystemsResult(data: dict):
    """
    Tests that the GetClassificationSystemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetClassificationSystemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetClassificationSystemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationsOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "classificationSystemIds": {"$ref": "#/$defs/ClassificationSystemIds"}}, "additionalProperties": false, "required": ["elements", "classificationSystemIds"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ClassificationSystemIds": {"type": "array", "description": "A list of classification system identifiers.", "items": {"$ref": "#/$defs/ClassificationSystemIdArrayItem"}}, "ClassificationSystemIdArrayItem": {"type": "object", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetClassificationsOfElementsParameters"}')))
def test_instantiate_GetClassificationsOfElementsParameters(data: dict):
    """
    Tests that the GetClassificationsOfElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetClassificationsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetClassificationsOfElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetClassificationsOfElementsResult": {"type": "object", "properties": {"elementClassifications": {"description": "The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects.", "$ref": "#/$defs/ElementClassificationsOrErrors"}}, "additionalProperties": false, "required": ["elementClassifications"]}, "ElementClassificationsOrErrors": {"type": "array", "description": "A list of element classification identifiers or errors.", "items": {"$ref": "#/$defs/ElementClassificationOrError"}}, "ElementClassificationOrError": {"type": "object", "description": "Element classification identifiers or errors.", "oneOf": [{"title": "classificationIds", "properties": {"classificationIds": {"$ref": "#/$defs/ClassificationIdsOrErrors"}}, "additionalProperties": false, "required": ["classificationIds"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ClassificationIdsOrErrors": {"type": "array", "description": "A list of element classification identifiers or errors.", "items": {"$ref": "#/$defs/ClassificationIdOrError"}}, "ClassificationIdOrError": {"type": "object", "description": "A classification identifier or an error.", "oneOf": [{"title": "classificationId", "properties": {"classificationId": {"$ref": "#/$defs/ClassificationId"}}, "additionalProperties": false, "required": ["classificationId"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ClassificationId": {"type": "object", "description": "The element classification identifier.", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}, "classificationItemId": {"$ref": "#/$defs/ClassificationItemId", "description": "The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetClassificationsOfElementsResult"}')))
def test_instantiate_GetClassificationsOfElementsResult(data: dict):
    """
    Tests that the GetClassificationsOfElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetClassificationsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetClassificationsOfElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetComponentsOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetComponentsOfElementsParameters"}')))
def test_instantiate_GetComponentsOfElementsParameters(data: dict):
    """
    Tests that the GetComponentsOfElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetComponentsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetComponentsOfElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetComponentsOfElementsResult": {"type": "object", "properties": {"componentsOfElements": {"$ref": "#/$defs/ElementComponentsOrErrorArray"}}, "additionalProperties": false, "required": ["componentsOfElements"]}, "ElementComponentsOrErrorArray": {"type": "array", "description": "Array of component list or error.", "items": {"$ref": "#/$defs/ElementComponentsOrError"}}, "ElementComponentsOrError": {"type": "object", "description": "List of components or error.", "oneOf": [{"$ref": "#/$defs/ElementComponentsWrapper"}, {"$ref": "#/$defs/ErrorItem"}]}, "ElementComponentsWrapper": {"type": "object", "description": "List of components.", "properties": {"elementComponents": {"$ref": "#/$defs/ElementComponents"}}, "additionalProperties": false, "required": ["elementComponents"]}, "ElementComponents": {"type": "array", "description": "List of components of elements.", "items": {"$ref": "#/$defs/ElementComponentIdArrayItem"}}, "ElementComponentIdArrayItem": {"type": "object", "description": "An item of a component array.", "properties": {"elementComponentId": {"$ref": "#/$defs/ElementComponentId"}}, "additionalProperties": false, "required": ["elementComponentId"]}, "ElementComponentId": {"type": "object", "description": "The identifier of an element\'s component.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "componentId": {"$ref": "#/$defs/ComponentId"}}, "additionalProperties": false, "required": ["elementId", "componentId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ComponentId": {"type": "object", "description": "The identifier of a component.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetComponentsOfElementsResult"}')))
def test_instantiate_GetComponentsOfElementsResult(data: dict):
    """
    Tests that the GetComponentsOfElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetComponentsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetComponentsOfElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCompositeAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetCompositeAttributesParameters"}')))
def test_instantiate_GetCompositeAttributesParameters(data: dict):
    """
    Tests that the GetCompositeAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetCompositeAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetCompositeAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetCompositeAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/CompositeAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "CompositeAttributes": {"type": "array", "description": "A list of the composite attributes and potential errors.", "items": {"$ref": "#/$defs/CompositeAttributeOrError"}}, "CompositeAttributeOrError": {"type": "object", "description": "A composite attribute or an error.", "oneOf": [{"title": "compositeAttribute", "properties": {"compositeAttribute": {"$ref": "#/$defs/CompositeAttribute"}}, "additionalProperties": false, "required": ["compositeAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "CompositeAttribute": {"type": "object", "description": "A composite attribute.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "totalThickness": {"type": "number", "description": "The total thickness of the composite."}, "compositeSkins": {"$ref": "#/$defs/CompositeSkinList", "description": "The skins of the composite attribute."}, "compositeLines": {"$ref": "#/$defs/CompositeLineList", "description": "The contour and separator lines of the composite attribute."}, "useWith": {"$ref": "#/$defs/ElementTypes", "description": "The list of element types for which this composite is available."}}, "additionalProperties": false, "required": ["attributeId", "name", "totalThickness", "compositeSkins", "compositeLines", "useWith"]}, "ElementTypes": {"type": "array", "description": "A list of element types.", "items": {"$ref": "#/$defs/ElementType"}}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Zone", "CurtainWall", "Shell", "Skylight", "Morph", "Stair", "Railing", "Opening"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "CompositeSkinList": {"type": "array", "description": "A list of composite skins.", "items": {"$ref": "#/$defs/CompositeSkinListItem"}}, "CompositeSkinListItem": {"type": "object", "properties": {"compositeSkin": {"$ref": "#/$defs/CompositeSkin"}}, "additionalProperties": false, "required": ["compositeSkin"]}, "CompositeSkin": {"type": "object", "description": "A skin component for a composite attribute.", "properties": {"buildingMaterialId": {"$ref": "#/$defs/AttributeIdOrError"}, "framePenIndex": {"$ref": "#/$defs/PenIndex", "description": "The index of the frame pen."}, "thickness": {"type": "number", "description": "The thickness of the composite skin."}, "isCore": {"type": "boolean", "description": "Defines whether the composite skin is part of the core or not."}, "isFinish": {"type": "boolean", "description": "Defines whether the composite skin is part of the finish or not."}}, "additionalProperties": false, "required": ["buildingMaterialId", "thickness", "isCore", "isFinish"]}, "PenIndex": {"type": "integer", "description": "The index number of a pen.", "minimum": 0, "maximum": 255}, "AttributeIdOrError": {"type": "object", "description": "The attribute\'s identifier or an error.", "oneOf": [{"title": "attributeId", "$ref": "#/$defs/AttributeIdWrapperItem"}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "CompositeLineList": {"type": "array", "description": "A list of contour/separator lines for the composite.", "items": {"$ref": "#/$defs/CompositeLineListItem"}}, "CompositeLineListItem": {"type": "object", "properties": {"compositeLine": {"$ref": "#/$defs/CompositeLine"}}, "additionalProperties": false, "required": ["compositeLine"]}, "CompositeLine": {"type": "object", "description": "A contour or separator line component for a composite attribute.", "properties": {"lineId": {"$ref": "#/$defs/AttributeIdOrError"}, "linePenIndex": {"$ref": "#/$defs/PenIndex", "description": "The index of the line pen."}}, "additionalProperties": false, "required": ["lineId"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}}, "$ref": "#/$defs/GetCompositeAttributesResult"}')))
def test_instantiate_GetCompositeAttributesResult(data: dict):
    """
    Tests that the GetCompositeAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetCompositeAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetCompositeAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDetailNavigatorItemsParameters"}')))
def test_instantiate_GetDetailNavigatorItemsParameters(data: dict):
    """
    Tests that the GetDetailNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDetailNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDetailNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/DetailNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "DetailNavigatorItems": {"type": "array", "description": "A list of detail navigator items.", "items": {"$ref": "#/$defs/DetailNavigatorItemOrError"}}, "DetailNavigatorItemOrError": {"type": "object", "description": "Contains a detail navigator item or an error.", "oneOf": [{"title": "DetailNavigatorItem", "properties": {"detailNavigatorItem": {"$ref": "#/$defs/DetailNavigatorItem"}}, "additionalProperties": false, "required": ["detailNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "DetailNavigatorItem": {"type": "object", "description": "The details of a detail navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDetailNavigatorItemsResult"}')))
def test_instantiate_GetDetailNavigatorItemsResult(data: dict):
    """
    Tests that the GetDetailNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDetailNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDetailNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailsOfClassificationItemsParameters": {"type": "object", "properties": {"classificationItemIds": {"$ref": "#/$defs/ClassificationItemIds"}}, "additionalProperties": false, "required": ["classificationItemIds"]}, "ClassificationItemIds": {"type": "array", "description": "A list of classification item identifiers.", "items": {"$ref": "#/$defs/ClassificationItemIdArrayItem"}}, "ClassificationItemIdArrayItem": {"type": "object", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}}, "additionalProperties": false, "required": ["classificationItemId"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDetailsOfClassificationItemsParameters"}')))
def test_instantiate_GetDetailsOfClassificationItemsParameters(data: dict):
    """
    Tests that the GetDetailsOfClassificationItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDetailsOfClassificationItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDetailsOfClassificationItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailsOfClassificationItemsResult": {"type": "object", "properties": {"classificationItems": {"$ref": "#/$defs/ClassificationItemsOrErrors"}}, "additionalProperties": false, "required": ["classificationItems"]}, "ClassificationItemsOrErrors": {"type": "array", "description": "A list of classification items or errors.", "items": {"$ref": "#/$defs/ClassificationItemOrError"}}, "ClassificationItemOrError": {"type": "object", "description": "A classification item or an error.", "oneOf": [{"title": "classificationItem", "properties": {"classificationItem": {"$ref": "#/$defs/ClassificationItemDetails"}}, "additionalProperties": false, "required": ["classificationItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ClassificationItemDetails": {"type": "object", "description": "The details of a classification item.", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}, "id": {"type": "string", "description": "The unique identifier of the classification item as specified by the user."}, "name": {"type": "string", "description": "The display name of the classification item."}, "description": {"type": "string", "description": "The description of the classification item."}}, "additionalProperties": false, "required": ["classificationItemId", "id", "name", "description"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetDetailsOfClassificationItemsResult"}')))
def test_instantiate_GetDetailsOfClassificationItemsResult(data: dict):
    """
    Tests that the GetDetailsOfClassificationItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDetailsOfClassificationItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDetailsOfClassificationItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailsOfPropertiesParameters": {"type": "object", "properties": {"properties": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["properties"]}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDetailsOfPropertiesParameters"}')))
def test_instantiate_GetDetailsOfPropertiesParameters(data: dict):
    """
    Tests that the GetDetailsOfPropertiesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDetailsOfPropertiesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDetailsOfPropertiesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDetailsOfPropertiesResult": {"type": "object", "properties": {"propertyDefinitions": {"$ref": "#/$defs/PropertyDefinitionsOrErrors"}}, "additionalProperties": false, "required": ["propertyDefinitions"]}, "PropertyDefinitionsOrErrors": {"type": "array", "description": "A list of property definitions or errors.", "items": {"$ref": "#/$defs/PropertyDefinitionOrError"}}, "PropertyDefinitionOrError": {"type": "object", "description": "A property definition or an error.", "oneOf": [{"title": "propertyDefinition", "properties": {"propertyDefinition": {"$ref": "#/$defs/PropertyDefinition"}}, "additionalProperties": false, "required": ["propertyDefinition"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "PropertyDefinition": {"type": "object", "description": "A property definition. The default value of a property appears if and only if it is a custom property and is not an expression type property. (This may change in the future.)", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}, "group": {"$ref": "#/$defs/PropertyGroup"}, "name": {"type": "string", "description": "The localized name of the property."}, "description": {"type": "string", "description": "The description of the property."}, "isEditable": {"type": "boolean", "description": "Defines whether the property is editable or not."}, "type": {"type": "string", "description": "Defines the type of the property\'s value."}, "possibleEnumValues": {"$ref": "#/$defs/PossibleEnumValues", "description": "The possible enum values of the property when the property type is enumeration."}, "defaultValue": {"$ref": "#/$defs/PropertyDefaultValue"}}, "additionalProperties": false, "required": ["group", "name", "description", "isEditable", "type"]}, "PropertyDefaultValue": {"type": "object", "description": "Default value of the property.", "oneOf": [{"$ref": "#/$defs/PropertyBasicDefaultValue"}]}, "PropertyBasicDefaultValue": {"type": "object", "properties": {"basicDefaultValue": {"$ref": "#/$defs/PropertyValue"}}, "description": "Default value of the property in case of a basic property value (ie. not an expression).", "additionalProperties": false, "required": ["basicDefaultValue"]}, "PropertyValue": {"type": "object", "description": "A normal, userUndefined, notAvailable or notEvaluated property value.", "oneOf": [{"$ref": "#/$defs/NormalOrUserUndefinedPropertyValue"}, {"$ref": "#/$defs/NotAvailablePropertyValue"}, {"$ref": "#/$defs/NotEvaluatedPropertyValue"}]}, "NotAvailablePropertyValue": {"type": "object", "description": "A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["notAvailable"]}}, "additionalProperties": false, "required": ["type", "status"]}, "PropertyValueType": {"type": "string", "enum": ["number", "integer", "string", "boolean", "length", "area", "volume", "angle", "numberList", "integerList", "stringList", "booleanList", "lengthList", "areaList", "volumeList", "angleList", "singleEnum", "multiEnum"]}, "NotEvaluatedPropertyValue": {"type": "object", "description": "A notEvaluated value means that the property could not be evaluated for the property owner for some reason.", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["notEvaluated"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalOrUserUndefinedPropertyValue": {"type": "object", "description": "A normal or a userUndefined property value.", "oneOf": [{"$ref": "#/$defs/NormalNumberPropertyValue"}, {"$ref": "#/$defs/NormalIntegerPropertyValue"}, {"$ref": "#/$defs/NormalStringPropertyValue"}, {"$ref": "#/$defs/NormalBooleanPropertyValue"}, {"$ref": "#/$defs/NormalLengthPropertyValue"}, {"$ref": "#/$defs/NormalAreaPropertyValue"}, {"$ref": "#/$defs/NormalVolumePropertyValue"}, {"$ref": "#/$defs/NormalAnglePropertyValue"}, {"$ref": "#/$defs/NormalNumberListPropertyValue"}, {"$ref": "#/$defs/NormalIntegerListPropertyValue"}, {"$ref": "#/$defs/NormalStringListPropertyValue"}, {"$ref": "#/$defs/NormalBooleanListPropertyValue"}, {"$ref": "#/$defs/NormalLengthListPropertyValue"}, {"$ref": "#/$defs/NormalAreaListPropertyValue"}, {"$ref": "#/$defs/NormalVolumeListPropertyValue"}, {"$ref": "#/$defs/NormalAngleListPropertyValue"}, {"$ref": "#/$defs/NormalSingleEnumPropertyValue"}, {"$ref": "#/$defs/NormalMultiEnumPropertyValue"}, {"$ref": "#/$defs/UserUndefinedPropertyValue"}]}, "UserUndefinedPropertyValue": {"type": "object", "description": "A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["userUndefined"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalNumberPropertyValue": {"type": "object", "description": "A number property value containing a valid numeric value.", "properties": {"type": {"type": "string", "enum": ["number"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAnglePropertyValue": {"type": "object", "description": "An angle property value containing a real angle. The value is measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angle"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringPropertyValue": {"type": "object", "description": "A string property value containing a valid string.", "properties": {"type": {"type": "string", "enum": ["string"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "string"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringListPropertyValue": {"type": "object", "description": "A string list property value containing strings in an array.", "properties": {"type": {"type": "string", "enum": ["stringList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "string"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalLengthPropertyValue": {"type": "object", "description": "A length property value containing a real length value. The value is measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["length"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalMultiEnumPropertyValue": {"type": "object", "description": "A multiple choice enumeration property value containing the IDs of the selected enum values in an array.", "properties": {"type": {"type": "string", "enum": ["multiEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueIds"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "EnumValueIds": {"type": "array", "description": "A list of enumeration identifiers.", "items": {"type": "object", "properties": {"enumValueId": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["enumValueId"]}}, "EnumValueId": {"type": "object", "description": "The identifier of a property enumeration value.", "oneOf": [{"$ref": "#/$defs/DisplayValueEnumId"}, {"$ref": "#/$defs/NonLocalizedValueEnumId"}]}, "DisplayValueEnumId": {"type": "object", "description": "An enumeration value identifier using the displayed value.", "properties": {"type": {"type": "string", "enum": ["displayValue"]}, "displayValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "displayValue"]}, "NonLocalizedValueEnumId": {"type": "object", "description": "An enumeration value identifier using the nonlocalized value.", "properties": {"type": {"type": "string", "enum": ["nonLocalizedValue"]}, "nonLocalizedValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "nonLocalizedValue"]}, "NormalLengthListPropertyValue": {"type": "object", "description": "A length list property value containing length values in an array. The values are measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["lengthList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaListPropertyValue": {"type": "object", "description": "An area list property value containing areas in an array. The values are measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["areaList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanPropertyValue": {"type": "object", "description": "A boolean property value containing a valid boolean value.", "properties": {"type": {"type": "string", "enum": ["boolean"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "boolean"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerListPropertyValue": {"type": "object", "description": "An integer list property value containing integers in an array.", "properties": {"type": {"type": "string", "enum": ["integerList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "integer"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerPropertyValue": {"type": "object", "description": "An integer property value containing a valid integer number.", "properties": {"type": {"type": "string", "enum": ["integer"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "integer"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumePropertyValue": {"type": "object", "description": "A volume property value containing a real volume. The value is measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volume"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanListPropertyValue": {"type": "object", "description": "A boolean list property value containing boolean values in an array.", "properties": {"type": {"type": "string", "enum": ["booleanList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "boolean"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumeListPropertyValue": {"type": "object", "description": "A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volumeList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalSingleEnumPropertyValue": {"type": "object", "description": "A single enumeration property value containing the ID of the selected enum value.", "properties": {"type": {"type": "string", "enum": ["singleEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalNumberListPropertyValue": {"type": "object", "description": "A number list property value containing numbers in an array.", "properties": {"type": {"type": "string", "enum": ["numberList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaPropertyValue": {"type": "object", "description": "An area property value containing a real area. The value is measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["area"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAngleListPropertyValue": {"type": "object", "description": "An angle list property value containing angles in an array. The values are measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angleList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "PropertyGroup": {"type": "object", "description": "A property group.", "properties": {"propertyGroupId": {"$ref": "#/$defs/PropertyGroupId"}, "name": {"type": "string", "description": "The property group name."}}, "additionalProperties": false, "required": ["propertyGroupId", "name"]}, "PropertyGroupId": {"type": "object", "description": "The identifier of a property group.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PossibleEnumValues": {"type": "array", "description": "A list of enumeration values.", "items": {"$ref": "#/$defs/PossibleEnumValuesArrayItem"}, "additionalProperties": false}, "PossibleEnumValuesArrayItem": {"type": "object", "properties": {"enumValue": {"$ref": "#/$defs/PossibleEnumValue"}}, "additionalProperties": false, "required": ["enumValue"]}, "PossibleEnumValue": {"type": "object", "description": "The description of an enumeration value.", "properties": {"enumValueId": {"$ref": "#/$defs/EnumValueId"}, "displayValue": {"type": "string", "description": "Displayed value of the enumeration."}, "nonLocalizedValue": {"type": "string", "description": "Nonlocalized value of the enumeration if there is one."}}, "additionalProperties": false, "required": ["enumValueId", "displayValue"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetDetailsOfPropertiesResult"}')))
def test_instantiate_GetDetailsOfPropertiesResult(data: dict):
    """
    Tests that the GetDetailsOfPropertiesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDetailsOfPropertiesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDetailsOfPropertiesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDocument3DNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetDocument3DNavigatorItemsParameters"}')))
def test_instantiate_GetDocument3DNavigatorItemsParameters(data: dict):
    """
    Tests that the GetDocument3DNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDocument3DNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDocument3DNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetDocument3DNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/Document3DNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "Document3DNavigatorItems": {"type": "array", "description": "A list of 3D document navigator items.", "items": {"$ref": "#/$defs/Document3DNavigatorItemOrError"}}, "Document3DNavigatorItemOrError": {"type": "object", "description": "Contains a 3D document navigator item or an error.", "oneOf": [{"title": "Document3DNavigatorItem", "properties": {"document3DNavigatorItem": {"$ref": "#/$defs/Document3DNavigatorItem"}}, "additionalProperties": false, "required": ["document3DNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "Document3DNavigatorItem": {"type": "object", "description": "The details of a 3D document navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetDocument3DNavigatorItemsResult"}')))
def test_instantiate_GetDocument3DNavigatorItemsResult(data: dict):
    """
    Tests that the GetDocument3DNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetDocument3DNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetDocument3DNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsByClassificationParameters": {"type": "object", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}}, "additionalProperties": false, "required": ["classificationItemId"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetElementsByClassificationParameters"}')))
def test_instantiate_GetElementsByClassificationParameters(data: dict):
    """
    Tests that the GetElementsByClassificationParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElementsByClassificationParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElementsByClassificationParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsByClassificationResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetElementsByClassificationResult"}')))
def test_instantiate_GetElementsByClassificationResult(data: dict):
    """
    Tests that the GetElementsByClassificationResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElementsByClassificationResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElementsByClassificationResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsByTypeParameters": {"type": "object", "properties": {"elementType": {"$ref": "#/$defs/ElementType"}}, "additionalProperties": false, "required": ["elementType"]}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Zone", "CurtainWall", "Shell", "Skylight", "Morph", "Stair", "Railing", "Opening"]}}, "$ref": "#/$defs/GetElementsByTypeParameters"}')))
def test_instantiate_GetElementsByTypeParameters(data: dict):
    """
    Tests that the GetElementsByTypeParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElementsByTypeParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElementsByTypeParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsByTypeResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetElementsByTypeResult"}')))
def test_instantiate_GetElementsByTypeResult(data: dict):
    """
    Tests that the GetElementsByTypeResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElementsByTypeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElementsByTypeResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsRelatedToZonesParameters": {"type": "object", "properties": {"zones": {"$ref": "#/$defs/Elements"}, "elementTypes": {"description": "If this parameter is given, then only related elements with the requested types will be listed.", "$ref": "#/$defs/ElementTypes"}}, "additionalProperties": false, "required": ["zones"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ElementTypes": {"type": "array", "description": "A list of element types.", "items": {"$ref": "#/$defs/ElementType"}}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Zone", "CurtainWall", "Shell", "Skylight", "Morph", "Stair", "Railing", "Opening"]}}, "$ref": "#/$defs/GetElementsRelatedToZonesParameters"}')))
def test_instantiate_GetElementsRelatedToZonesParameters(data: dict):
    """
    Tests that the GetElementsRelatedToZonesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElementsRelatedToZonesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElementsRelatedToZonesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElementsRelatedToZonesResult": {"type": "object", "properties": {"elementsRelatedToZones": {"$ref": "#/$defs/ElementsOrErrorArray"}}, "additionalProperties": false, "required": ["elementsRelatedToZones"]}, "ElementsOrErrorArray": {"type": "array", "description": "A list of ElementsOrError items.", "items": {"$ref": "#/$defs/ElementsOrError"}}, "ElementsOrError": {"type": "object", "description": "A list of elements or an error.", "oneOf": [{"$ref": "#/$defs/ElementsWrapper"}, {"$ref": "#/$defs/ErrorItem"}]}, "ElementsWrapper": {"type": "object", "description": "A wrapper for a list of elements.", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetElementsRelatedToZonesResult"}')))
def test_instantiate_GetElementsRelatedToZonesResult(data: dict):
    """
    Tests that the GetElementsRelatedToZonesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElementsRelatedToZonesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElementsRelatedToZonesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElevationNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetElevationNavigatorItemsParameters"}')))
def test_instantiate_GetElevationNavigatorItemsParameters(data: dict):
    """
    Tests that the GetElevationNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElevationNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElevationNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetElevationNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/ElevationNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "ElevationNavigatorItems": {"type": "array", "description": "A list of elevation navigator items.", "items": {"$ref": "#/$defs/ElevationNavigatorItemOrError"}}, "ElevationNavigatorItemOrError": {"type": "object", "description": "Contains an elevation navigator item or an error.", "oneOf": [{"title": "ElevationNavigatorItem", "properties": {"elevationNavigatorItem": {"$ref": "#/$defs/ElevationNavigatorItem"}}, "additionalProperties": false, "required": ["elevationNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ElevationNavigatorItem": {"type": "object", "description": "The details of an elevation navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetElevationNavigatorItemsResult"}')))
def test_instantiate_GetElevationNavigatorItemsResult(data: dict):
    """
    Tests that the GetElevationNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetElevationNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetElevationNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetFillAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetFillAttributesParameters"}')))
def test_instantiate_GetFillAttributesParameters(data: dict):
    """
    Tests that the GetFillAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetFillAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetFillAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetFillAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/FillAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "FillAttributes": {"type": "array", "description": "A list of fill attributes and potential errors.", "items": {"$ref": "#/$defs/FillAttributeOrError"}}, "FillAttributeOrError": {"type": "object", "description": "A fill attribute or an error.", "oneOf": [{"title": "fillAttribute", "properties": {"fillAttribute": {"$ref": "#/$defs/FillAttribute"}}, "additionalProperties": false, "required": ["fillAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "FillAttribute": {"type": "object", "description": "A fill attribute.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "subType": {"$ref": "#/$defs/FillTypeId"}, "pattern": {"$ref": "#/$defs/FillPattern"}, "appearanceType": {"$ref": "#/$defs/AppearanceType"}}, "additionalProperties": false, "required": ["attributeId", "name", "subType", "pattern", "appearanceType"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "FillPattern": {"type": "integer", "description": "The pattern of the fill attribute, stored in a 64 bit unsigned integer, and represented as an 8x8 matrix. Each byte in the value is a row, and the bits are the columns of the matrix."}, "AppearanceType": {"type": "string", "description": "The appearance type of a line or fill attribute.", "enum": ["ScaleWithPlan", "ScaleIndependent"]}, "FillTypeId": {"type": "string", "description": "The filling type of a fill attribute.", "enum": ["Vector", "Symbol", "Solid", "Empty", "LinearGradient", "RadialGradient", "Image"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}}, "$ref": "#/$defs/GetFillAttributesResult"}')))
def test_instantiate_GetFillAttributesResult(data: dict):
    """
    Tests that the GetFillAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetFillAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetFillAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetInteriorElevationNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetInteriorElevationNavigatorItemsParameters"}')))
def test_instantiate_GetInteriorElevationNavigatorItemsParameters(data: dict):
    """
    Tests that the GetInteriorElevationNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetInteriorElevationNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetInteriorElevationNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetInteriorElevationNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/InteriorElevationNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "InteriorElevationNavigatorItems": {"type": "array", "description": "A list of interior elevation navigator items.", "items": {"$ref": "#/$defs/InteriorElevationNavigatorItemOrError"}}, "InteriorElevationNavigatorItemOrError": {"type": "object", "description": "Contains an interior elevation navigator item or an error.", "oneOf": [{"title": "InteriorElevationNavigatorItem", "properties": {"interiorElevationNavigatorItem": {"$ref": "#/$defs/InteriorElevationNavigatorItem"}}, "additionalProperties": false, "required": ["interiorElevationNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "InteriorElevationNavigatorItem": {"type": "object", "description": "The details of an interior elevation navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetInteriorElevationNavigatorItemsResult"}')))
def test_instantiate_GetInteriorElevationNavigatorItemsResult(data: dict):
    """
    Tests that the GetInteriorElevationNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetInteriorElevationNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetInteriorElevationNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLayerAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetLayerAttributesParameters"}')))
def test_instantiate_GetLayerAttributesParameters(data: dict):
    """
    Tests that the GetLayerAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLayerAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLayerAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLayerAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/LayerAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "LayerAttributes": {"type": "array", "description": "A list of layer attributes and potential errors.", "items": {"$ref": "#/$defs/LayerAttributeOrError"}}, "LayerAttributeOrError": {"type": "object", "description": "A layer attribute or an error.", "oneOf": [{"title": "layerAttribute", "properties": {"layerAttribute": {"$ref": "#/$defs/LayerAttribute"}}, "additionalProperties": false, "required": ["layerAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "LayerAttribute": {"type": "object", "description": "A layer attribute", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "intersectionGroupNr": {"type": "integer", "description": "The intersection group number"}, "isLocked": {"type": "boolean", "description": "Defines whether the layer is locked or not."}, "isHidden": {"type": "boolean", "description": "Defines whether the layer is hidden or not."}, "isWireframe": {"type": "boolean", "description": "Defines whether the elements placed on this layer are visible as wireframes or a solid model."}}, "additionalProperties": false, "required": ["attributeId", "name", "intersectionGroupNr", "isLocked", "isHidden", "isWireframe"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetLayerAttributesResult"}')))
def test_instantiate_GetLayerAttributesResult(data: dict):
    """
    Tests that the GetLayerAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLayerAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLayerAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLayerCombinationAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetLayerCombinationAttributesParameters"}')))
def test_instantiate_GetLayerCombinationAttributesParameters(data: dict):
    """
    Tests that the GetLayerCombinationAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLayerCombinationAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLayerCombinationAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLayerCombinationAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/LayerCombinationAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "LayerCombinationAttributes": {"type": "array", "description": "A list of layer combination attributes and potential errors.", "items": {"$ref": "#/$defs/LayerCombinationAttributeOrError"}}, "LayerCombinationAttributeOrError": {"type": "object", "description": "A layer combination attribute or an error.", "oneOf": [{"title": "LayerCombinationAttribute", "properties": {"layerCombinationAttribute": {"$ref": "#/$defs/LayerCombinationAttribute"}}, "additionalProperties": false, "required": ["layerCombinationAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "LayerCombinationAttribute": {"type": "object", "description": "A layer combination attribute", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "layerAttributeIds": {"description": "The list of identifiers belonging to the layer attributes referenced in this layer combination.", "$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeId", "name", "layerAttributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetLayerCombinationAttributesResult"}')))
def test_instantiate_GetLayerCombinationAttributesResult(data: dict):
    """
    Tests that the GetLayerCombinationAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLayerCombinationAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLayerCombinationAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLayoutSettingsParameters": {"type": "object", "properties": {"layoutNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["layoutNavigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetLayoutSettingsParameters"}')))
def test_instantiate_GetLayoutSettingsParameters(data: dict):
    """
    Tests that the GetLayoutSettingsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLayoutSettingsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLayoutSettingsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLayoutSettingsResult": {"type": "object", "properties": {"layoutParameters": {"$ref": "#/$defs/LayoutParameters"}}, "additionalProperties": false, "required": ["layoutParameters"]}, "LayoutParameters": {"type": "object", "description": "The parameters of the layout.", "properties": {"horizontalSize": {"type": "number", "description": "The horizontal size of the layout in millimeters."}, "verticalSize": {"type": "number", "description": "The vertical size of the layout in millimeters."}, "leftMargin": {"type": "number", "description": "The layout margin from the left side of the paper."}, "topMargin": {"type": "number", "description": "The layout margin from the top side of the paper."}, "rightMargin": {"type": "number", "description": "The layout margin from the right side of the paper."}, "bottomMargin": {"type": "number", "description": "The layout margin from the bottom side of the paper."}, "customLayoutNumber": {"type": "string", "description": "The custom ID."}, "customLayoutNumbering": {"type": "boolean", "description": "Defines whether a unique ID is used for the current layout or not."}, "doNotIncludeInNumbering": {"type": "boolean", "description": "Defines whether this layout is included in automatic ID assignment or not."}, "displayMasterLayoutBelow": {"type": "boolean", "description": "Defines whether to display the master layout above or below the layout."}, "layoutPageNumber": {"type": "integer", "description": "The page number of layout when this layout contains multi-page drawings."}, "actPageIndex": {"type": "integer", "description": "The actual index of layout inside the multi-page layout."}, "currentRevisionId": {"type": "string", "description": "The ID of the current document revision of the layout."}, "currentFinalRevisionId": {"type": "string", "description": "The ID with optional suffix of the current document revision of the layout."}, "hasIssuedRevision": {"type": "boolean", "description": "Defines whether one or more issued document revisions have already been created for the layout or not."}, "hasActualRevision": {"type": "boolean", "description": "Defines whether an open document revision exists for the layout or not."}}, "additionalProperties": false, "required": ["horizontalSize", "verticalSize", "leftMargin", "topMargin", "rightMargin", "bottomMargin", "customLayoutNumber", "customLayoutNumbering", "doNotIncludeInNumbering", "displayMasterLayoutBelow", "layoutPageNumber", "actPageIndex", "currentRevisionId", "currentFinalRevisionId", "hasIssuedRevision", "hasActualRevision"]}}, "$ref": "#/$defs/GetLayoutSettingsResult"}')))
def test_instantiate_GetLayoutSettingsResult(data: dict):
    """
    Tests that the GetLayoutSettingsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLayoutSettingsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLayoutSettingsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLineAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetLineAttributesParameters"}')))
def test_instantiate_GetLineAttributesParameters(data: dict):
    """
    Tests that the GetLineAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLineAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLineAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetLineAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/LineAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "LineAttributes": {"type": "array", "description": "A list of line attributes and potential errors.", "items": {"$ref": "#/$defs/LineAttributeOrError"}}, "LineAttributeOrError": {"type": "object", "description": "A line attribute or an error.", "oneOf": [{"title": "LineAttribute", "properties": {"lineAttribute": {"$ref": "#/$defs/LineAttribute"}}, "additionalProperties": false, "required": ["lineAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "LineAttribute": {"type": "object", "description": "A line attribute", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "appearanceType": {"$ref": "#/$defs/AppearanceType"}, "displayScale": {"type": "number", "description": "The original scale of the line."}, "period": {"type": "number", "description": "The length of the dashed or symbol line\'s period."}, "height": {"type": "number", "description": "The height of the symbol line."}, "lineType": {"$ref": "#/$defs/LineType"}, "lineItems": {"$ref": "#/$defs/LineItems"}}, "additionalProperties": false, "required": ["attributeId", "name", "appearanceType", "displayScale", "period", "height", "lineType"]}, "LineType": {"type": "string", "description": "The type of a line attribute.", "enum": ["SolidLine", "DashedLine", "SymbolLine"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AppearanceType": {"type": "string", "description": "The appearance type of a line or fill attribute.", "enum": ["ScaleWithPlan", "ScaleIndependent"]}, "LineItems": {"type": "array", "description": "A list of dash or line items.", "items": {"$ref": "#/$defs/DashOrLineItem"}}, "DashOrLineItem": {"type": "object", "description": "A dash or line item.", "oneOf": [{"title": "DashItem", "properties": {"dashItem": {"$ref": "#/$defs/DashItem"}}, "additionalProperties": false, "required": ["dashItem"]}, {"title": "LineItem", "properties": {"lineItem": {"$ref": "#/$defs/LineItem"}}, "additionalProperties": false, "required": ["lineItem"]}]}, "DashItem": {"type": "object", "description": "A dash item.", "properties": {"dash": {"type": "number", "description": "The length of the dash."}, "gap": {"type": "number", "description": "The length of the gap."}}, "additionalProperties": false, "required": ["dash", "gap"]}, "LineItem": {"type": "object", "description": "A line item.", "properties": {"lineItemType": {"$ref": "#/$defs/LineItemType"}, "centerOffset": {"type": "number", "description": "The vertical distance from the origin of the symbol line. Used in separator, center dot, and centerline item types."}, "length": {"type": "number", "description": "The length of the item. Used in centerline, right angle, and parallel item types."}, "begPosition": {"$ref": "#/$defs/Point2D", "description": "The beginning position of the item. Used in dot, right angle, parallel, line, circle, and arc item types."}, "endPosition": {"$ref": "#/$defs/Point2D", "description": "The end position of the item. Used in line item type."}, "radius": {"type": "number", "description": "The radius of the item. Used in circle and arc item types."}, "begAngle": {"type": "number", "description": "The beginning angle of the item, measured from the vertical axis. Used in the arc item type."}, "endAngle": {"type": "number", "description": "The ending angle of the item, measured from the vertical axis. Used in the arc item type."}}, "additionalProperties": false, "required": ["lineItemType", "centerOffset", "length", "begPosition", "endPosition", "radius", "begAngle", "endAngle"]}, "LineItemType": {"type": "string", "description": "The type of a line item.", "enum": ["IllegalItemType", "SeparatorItemType", "CenterDotItemType", "CenterLineItemType", "DotItemType", "RightAngleItemType", "ParallelItemType", "LineItemType", "CircItemType", "ArcItemType"]}, "Point2D": {"type": "object", "description": "Coordinates of a 2D point", "properties": {"x": {"type": "number", "description": "X coordinate of 2D point"}, "y": {"type": "number", "description": "Y coordinate of 2D point"}}, "additionalProperties": false, "required": ["x", "y"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetLineAttributesResult"}')))
def test_instantiate_GetLineAttributesResult(data: dict):
    """
    Tests that the GetLineAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetLineAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetLineAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetNavigatorItemTreeParameters": {"type": "object", "properties": {"navigatorTreeId": {"$ref": "#/$defs/NavigatorTreeId"}}, "additionalProperties": false, "required": ["navigatorTreeId"]}, "NavigatorTreeId": {"type": "object", "description": "The identifier of a navigator item tree.", "oneOf": [{"$ref": "#/$defs/PublisherSetId"}, {"$ref": "#/$defs/OtherNavigatorTreeId"}]}, "OtherNavigatorTreeId": {"type": "object", "description": "The identifier of a navigator item tree.", "properties": {"type": {"$ref": "#/$defs/NavigatorItemMapType"}}, "additionalProperties": false, "required": ["type"]}, "NavigatorItemMapType": {"type": "string", "description": "The type of the navigator item tree.", "enum": ["ProjectMap", "ViewMap", "MyViewMap", "LayoutBook"]}, "PublisherSetId": {"type": "object", "description": "The identifier of a publisher set.", "properties": {"type": {"type": "string", "description": "The type of the navigator item tree.", "enum": ["PublisherSets"]}, "name": {"type": "string", "description": "The name of the publisher set."}}, "additionalProperties": false, "required": ["type", "name"]}}, "$ref": "#/$defs/GetNavigatorItemTreeParameters"}')))
def test_instantiate_GetNavigatorItemTreeParameters(data: dict):
    """
    Tests that the GetNavigatorItemTreeParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetNavigatorItemTreeParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetNavigatorItemTreeParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetNavigatorItemTreeResult": {"type": "object", "properties": {"navigatorTree": {"$ref": "#/$defs/NavigatorTree"}}, "additionalProperties": false, "required": ["navigatorTree"]}, "NavigatorTree": {"type": "object", "description": "A tree of navigator items.", "properties": {"rootItem": {"$ref": "#/$defs/NavigatorItem"}}, "additionalProperties": false, "required": ["rootItem"]}, "NavigatorItem": {"type": "object", "description": "The details of a navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}, "type": {"$ref": "#/$defs/NavigatorItemType", "description": "The type of the navigator item."}, "sourceNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId", "description": "The source of the navigator item. For example, a navigator item in the ViewMap can be the source of a DrawingItem."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name", "type"]}, "NavigatorItemType": {"type": "string", "description": "The type of a navigator item. The \'UndefinedItem\' type is used when the actual type of the navigator item cannot be retrieved from Archicad.", "enum": ["UndefinedItem", "ProjectMapRootItem", "StoryItem", "SectionItem", "ElevationItem", "InteriorElevationItem", "WorksheetItem", "DetailItem", "DocumentFrom3DItem", "Perspective3DItem", "Axonometry3DItem", "CameraSetItem", "CameraItem", "ScheduleItem", "ProjectIndexItem", "TextListItem", "GraphicListItem", "InfoItem", "HelpItem", "FolderItem", "LayoutBookRootItem", "SubsetItem", "LayoutItem", "DrawingItem", "MasterFolderItem", "MasterLayoutItem"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetNavigatorItemTreeResult"}')))
def test_instantiate_GetNavigatorItemTreeResult(data: dict):
    """
    Tests that the GetNavigatorItemTreeResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetNavigatorItemTreeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetNavigatorItemTreeResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetNavigatorItemsTypeParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetNavigatorItemsTypeParameters"}')))
def test_instantiate_GetNavigatorItemsTypeParameters(data: dict):
    """
    Tests that the GetNavigatorItemsTypeParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetNavigatorItemsTypeParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetNavigatorItemsTypeParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetNavigatorItemsTypeResult": {"type": "object", "properties": {"navigatorItemIdAndTypeList": {"$ref": "#/$defs/NavigatorItemIdAndTypeList"}}, "additionalProperties": false, "required": ["navigatorItemIdAndTypeList"]}, "NavigatorItemIdAndTypeList": {"type": "array", "description": "A list of objects that consist of a navigator item identifier and a type.", "items": {"$ref": "#/$defs/NavigatorItemIdAndTypeOrError"}}, "NavigatorItemIdAndTypeOrError": {"type": "object", "description": "Contains a pair of navigator item type and identifier or an error.", "oneOf": [{"title": "NavigatorItemIdAndType", "properties": {"navigatorItemIdAndType": {"$ref": "#/$defs/NavigatorItemIdAndType"}}, "additionalProperties": false, "required": ["navigatorItemIdAndType"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "NavigatorItemIdAndType": {"type": "object", "description": "Consists of a navigator item type and an identifier.", "properties": {"navigatorItemType": {"$ref": "#/$defs/NavigatorItemType"}, "navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemType", "navigatorItemId"]}, "NavigatorItemType": {"type": "string", "description": "The type of a navigator item. The \'UndefinedItem\' type is used when the actual type of the navigator item cannot be retrieved from Archicad.", "enum": ["UndefinedItem", "ProjectMapRootItem", "StoryItem", "SectionItem", "ElevationItem", "InteriorElevationItem", "WorksheetItem", "DetailItem", "DocumentFrom3DItem", "Perspective3DItem", "Axonometry3DItem", "CameraSetItem", "CameraItem", "ScheduleItem", "ProjectIndexItem", "TextListItem", "GraphicListItem", "InfoItem", "HelpItem", "FolderItem", "LayoutBookRootItem", "SubsetItem", "LayoutItem", "DrawingItem", "MasterFolderItem", "MasterLayoutItem"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetNavigatorItemsTypeResult"}')))
def test_instantiate_GetNavigatorItemsTypeResult(data: dict):
    """
    Tests that the GetNavigatorItemsTypeResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetNavigatorItemsTypeResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetNavigatorItemsTypeResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPenTableAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetPenTableAttributesParameters"}')))
def test_instantiate_GetPenTableAttributesParameters(data: dict):
    """
    Tests that the GetPenTableAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPenTableAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPenTableAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPenTableAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/PenTableAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "PenTableAttributes": {"type": "array", "description": "A list of pen table attributes and potential errors.", "items": {"$ref": "#/$defs/PenTableAttributeOrError"}}, "PenTableAttributeOrError": {"type": "object", "description": "A pen table attribute or an error.", "oneOf": [{"title": "penTableAttribute", "properties": {"penTableAttribute": {"$ref": "#/$defs/PenTableAttribute"}}, "additionalProperties": false, "required": ["penTableAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "PenTableAttribute": {"type": "object", "description": "A pen table attribute.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "pens": {"$ref": "#/$defs/Pens"}}, "additionalProperties": false, "required": ["attributeId", "name", "pens"]}, "Pens": {"type": "array", "description": "A collection of pens in a pen table.", "items": {"$ref": "#/$defs/PenArrayItem"}}, "PenArrayItem": {"type": "object", "properties": {"pen": {"$ref": "#/$defs/Pen"}}, "additionalProperties": false, "required": ["pen"]}, "Pen": {"type": "object", "description": "A pen attribute.", "properties": {"index": {"$ref": "#/$defs/PenIndex", "description": "The index of the pen."}, "color": {"$ref": "#/$defs/RGBColor", "description": "The color of the pen."}, "weight": {"type": "number", "description": "The thickness of the pen defined in millimeters.", "minimum": 0}, "description": {"type": "string", "description": "The description of the pen."}}, "additionalProperties": false, "required": ["index", "color", "weight", "description"]}, "RGBColor": {"type": "object", "description": "A color model represented via its red, green and blue components.", "properties": {"red": {"type": "number", "description": "The red component of the color model.", "minimum": 0, "maximum": 1}, "green": {"type": "number", "description": "The green component of the color model.", "minimum": 0, "maximum": 1}, "blue": {"type": "number", "description": "The blue component of the color model.", "minimum": 0, "maximum": 1}}, "additionalProperties": false, "required": ["red", "green", "blue"]}, "PenIndex": {"type": "integer", "description": "The index number of a pen.", "minimum": 0, "maximum": 255}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}}, "$ref": "#/$defs/GetPenTableAttributesResult"}')))
def test_instantiate_GetPenTableAttributesResult(data: dict):
    """
    Tests that the GetPenTableAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPenTableAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPenTableAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetProductInfoResult": {"type": "object", "properties": {"version": {"type": "integer", "description": "The version of the running Archicad."}, "buildNumber": {"type": "integer", "description": "The build number of the running Archicad."}, "languageCode": {"type": "string", "description": "The language code of the running Archicad."}}, "additionalProperties": false, "required": ["version", "buildNumber", "languageCode"]}}, "$ref": "#/$defs/GetProductInfoResult"}')))
def test_instantiate_GetProductInfoResult(data: dict):
    """
    Tests that the GetProductInfoResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetProductInfoResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetProductInfoResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetProfileAttributePreviewParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}, "imageWidth": {"type": "integer", "description": "The width of the preview image."}, "imageHeight": {"type": "integer", "description": "The height of the preview image."}, "backgroundColor": {"$ref": "#/$defs/RGBColor", "description": "The background color of the preview image."}}, "additionalProperties": false, "required": ["attributeIds", "imageWidth", "imageHeight"]}, "RGBColor": {"type": "object", "description": "A color model represented via its red, green and blue components.", "properties": {"red": {"type": "number", "description": "The red component of the color model.", "minimum": 0, "maximum": 1}, "green": {"type": "number", "description": "The green component of the color model.", "minimum": 0, "maximum": 1}, "blue": {"type": "number", "description": "The blue component of the color model.", "minimum": 0, "maximum": 1}}, "additionalProperties": false, "required": ["red", "green", "blue"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetProfileAttributePreviewParameters"}')))
def test_instantiate_GetProfileAttributePreviewParameters(data: dict):
    """
    Tests that the GetProfileAttributePreviewParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetProfileAttributePreviewParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetProfileAttributePreviewParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetProfileAttributePreviewResult": {"type": "object", "properties": {"previewImages": {"$ref": "#/$defs/Images", "description": "The preview images of the profiles."}}, "additionalProperties": false, "required": ["previewImages"]}, "Images": {"type": "array", "description": "A list of images and potential errors.", "items": {"$ref": "#/$defs/ImageOrError"}}, "ImageOrError": {"type": "object", "description": "An image or an error.", "oneOf": [{"title": "image", "properties": {"image": {"$ref": "#/$defs/Image"}}, "additionalProperties": false, "required": ["image"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "Image": {"type": "object", "description": "An image encoded as a Base64 string.", "properties": {"content": {"type": "string", "description": "The image content as a string ."}}, "additionalProperties": false, "required": ["content"]}}, "$ref": "#/$defs/GetProfileAttributePreviewResult"}')))
def test_instantiate_GetProfileAttributePreviewResult(data: dict):
    """
    Tests that the GetProfileAttributePreviewResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetProfileAttributePreviewResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetProfileAttributePreviewResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetProfileAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetProfileAttributesParameters"}')))
def test_instantiate_GetProfileAttributesParameters(data: dict):
    """
    Tests that the GetProfileAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetProfileAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetProfileAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetProfileAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/ProfileAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "ProfileAttributes": {"type": "array", "description": "A list of the profile attributes and potential errors.", "items": {"$ref": "#/$defs/ProfileAttributeOrError"}}, "ProfileAttributeOrError": {"type": "object", "description": "A profile attribute or an error.", "oneOf": [{"title": "profileAttribute", "properties": {"profileAttribute": {"$ref": "#/$defs/ProfileAttribute"}}, "additionalProperties": false, "required": ["profileAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ProfileAttribute": {"type": "object", "description": "A profile attribute.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "useWith": {"$ref": "#/$defs/ElementTypes", "description": "The list of element types for which this profile is available."}, "width": {"type": "number", "description": "The default width (horizontal size) of the profile."}, "height": {"type": "number", "description": "The default height (vertical size) of the profile."}, "minimumWidth": {"type": "number", "description": "The minimum width (horizontal size) of the profile."}, "minimumHeight": {"type": "number", "description": "The minimum height (vertical size) of the profile."}, "widthStretchable": {"type": "boolean", "description": "Defines whether the profile\'s width can be increased beyond its default value or not."}, "heightStretchable": {"type": "boolean", "description": "Defines whether the profile\'s height can be increased beyond its default value or not."}, "hasCoreSkin": {"type": "boolean", "description": "Defines whether the profile has a core skin or not."}, "profileModifiers": {"$ref": "#/$defs/ProfileModifierList"}}, "additionalProperties": false, "required": ["attributeId", "name", "useWith", "width", "height", "minimumWidth", "minimumHeight", "widthStretchable", "heightStretchable", "hasCoreSkin", "profileModifiers"]}, "ElementTypes": {"type": "array", "description": "A list of element types.", "items": {"$ref": "#/$defs/ElementType"}}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Zone", "CurtainWall", "Shell", "Skylight", "Morph", "Stair", "Railing", "Opening"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ProfileModifierList": {"type": "array", "description": "A list of profile modifiers.", "items": {"$ref": "#/$defs/ProfileModifierListItem"}}, "ProfileModifierListItem": {"type": "object", "properties": {"profileModifier": {"$ref": "#/$defs/ProfileModifier"}}, "additionalProperties": false, "required": ["profileModifier"]}, "ProfileModifier": {"type": "object", "description": "A profile modifier parameter.", "properties": {"name": {"type": "string", "description": "The name of the modifier."}, "value": {"type": "number", "description": "The value of the modifier."}}, "additionalProperties": false, "required": ["name", "value"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetProfileAttributesResult"}')))
def test_instantiate_GetProfileAttributesResult(data: dict):
    """
    Tests that the GetProfileAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetProfileAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetProfileAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyDefinitionAvailabilityParameters": {"type": "object", "properties": {"propertyIds": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["propertyIds"]}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetPropertyDefinitionAvailabilityParameters"}')))
def test_instantiate_GetPropertyDefinitionAvailabilityParameters(data: dict):
    """
    Tests that the GetPropertyDefinitionAvailabilityParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyDefinitionAvailabilityParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyDefinitionAvailabilityParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyDefinitionAvailabilityResult": {"type": "object", "properties": {"propertyDefinitionAvailabilityList": {"$ref": "#/$defs/PropertyDefinitionAvailabilityList"}}, "additionalProperties": false, "required": ["propertyDefinitionAvailabilityList"]}, "PropertyDefinitionAvailabilityList": {"type": "array", "description": "A list of classification item avalabilities.", "items": {"$ref": "#/$defs/PropertyDefinitionAvailabilityOrError"}}, "PropertyDefinitionAvailabilityOrError": {"type": "object", "description": "Contains the ids of classification items the given property definiton is available for or error.", "oneOf": [{"title": "propertyAvailability", "properties": {"propertyDefinitionAvailability": {"$ref": "#/$defs/PropertyDefinitionAvailability"}}, "additionalProperties": false, "required": ["propertyDefinitionAvailability"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "PropertyDefinitionAvailability": {"type": "object", "description": "Contains the ids of classification items the given property definiton is available for.", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}, "availableClassifications": {"$ref": "#/$defs/ClassificationItemIds"}}, "additionalProperties": false, "required": ["propertyId", "availableClassifications"]}, "ClassificationItemIds": {"type": "array", "description": "A list of classification item identifiers.", "items": {"$ref": "#/$defs/ClassificationItemIdArrayItem"}}, "ClassificationItemIdArrayItem": {"type": "object", "properties": {"classificationItemId": {"$ref": "#/$defs/ClassificationItemId"}}, "additionalProperties": false, "required": ["classificationItemId"]}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetPropertyDefinitionAvailabilityResult"}')))
def test_instantiate_GetPropertyDefinitionAvailabilityResult(data: dict):
    """
    Tests that the GetPropertyDefinitionAvailabilityResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyDefinitionAvailabilityResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyDefinitionAvailabilityResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyGroupsParameters": {"type": "object", "properties": {"propertyGroupIds": {"$ref": "#/$defs/PropertyGroupIds"}}, "additionalProperties": false, "required": ["propertyGroupIds"]}, "PropertyGroupIds": {"type": "array", "description": "A list of property group identifiers.", "items": {"$ref": "#/$defs/PropertyGroupIdArrayItem"}}, "PropertyGroupIdArrayItem": {"type": "object", "properties": {"propertyGroupId": {"$ref": "#/$defs/PropertyGroupId"}}, "additionalProperties": false, "required": ["propertyGroupId"]}, "PropertyGroupId": {"type": "object", "description": "The identifier of a property group.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetPropertyGroupsParameters"}')))
def test_instantiate_GetPropertyGroupsParameters(data: dict):
    """
    Tests that the GetPropertyGroupsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyGroupsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyGroupsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyGroupsResult": {"type": "object", "properties": {"propertyGroups": {"$ref": "#/$defs/PropertyGroupsOrErrors"}}, "additionalProperties": false, "required": ["propertyGroups"]}, "PropertyGroupsOrErrors": {"type": "array", "description": "A list of property groups or errors.", "items": {"$ref": "#/$defs/PropertyGroupOrError"}}, "PropertyGroupOrError": {"type": "object", "description": "A property group or an error.", "oneOf": [{"title": "propertyGroup", "properties": {"propertyGroup": {"$ref": "#/$defs/PropertyGroup"}}, "additionalProperties": false, "required": ["propertyGroup"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "PropertyGroup": {"type": "object", "description": "A property group.", "properties": {"propertyGroupId": {"$ref": "#/$defs/PropertyGroupId"}, "name": {"type": "string", "description": "The property group name."}}, "additionalProperties": false, "required": ["propertyGroupId", "name"]}, "PropertyGroupId": {"type": "object", "description": "The identifier of a property group.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetPropertyGroupsResult"}')))
def test_instantiate_GetPropertyGroupsResult(data: dict):
    """
    Tests that the GetPropertyGroupsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyGroupsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyGroupsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyIdsParameters": {"type": "object", "properties": {"properties": {"description": "List of property names whose ids are requested.", "$ref": "#/$defs/PropertyUserIds"}}, "additionalProperties": false, "required": ["properties"]}, "PropertyUserIds": {"type": "array", "description": "A list of PropertyUserId objects.", "items": {"$ref": "#/$defs/PropertyUserId"}}, "PropertyUserId": {"type": "object", "description": "The unique identifier of a Property, identified by its name. May represent a User-Defined or a Built-In Property.", "oneOf": [{"$ref": "#/$defs/UserDefinedPropertyUserId"}, {"$ref": "#/$defs/BuiltInPropertyUserId"}]}, "BuiltInPropertyUserId": {"type": "object", "description": "The unique identifier of a Built-In Property, identified by its name.", "properties": {"type": {"type": "string", "enum": ["BuiltIn"]}, "nonLocalizedName": {"type": "string", "description": "The non-localized name of the Built-In Property."}}, "additionalProperties": false, "required": ["type", "nonLocalizedName"]}, "UserDefinedPropertyUserId": {"type": "object", "description": "The unique identifier of a User-Defined Property, identified by its name.", "properties": {"type": {"type": "string", "enum": ["UserDefined"]}, "localizedName": {"type": "array", "description": "A two-element list of the localized name parts. The first element is the name of the group the property belongs to, and the second element is the actual name of the property.", "items": {"type": "string"}, "minItems": 2, "maxItems": 2}}, "additionalProperties": false, "required": ["type", "localizedName"]}}, "$ref": "#/$defs/GetPropertyIdsParameters"}')))
def test_instantiate_GetPropertyIdsParameters(data: dict):
    """
    Tests that the GetPropertyIdsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyIdsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyIdsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyIdsResult": {"type": "object", "properties": {"properties": {"description": "List of the ids of the requested properties. Order of the ids are the same as in the input. Existing properties are represented by propertyId objects, non-existing properties are represented by error objects.", "$ref": "#/$defs/PropertyIdsOrErrors"}}, "additionalProperties": false, "required": ["properties"]}, "PropertyIdsOrErrors": {"type": "array", "description": "A list of property identifiers or errors.", "items": {"$ref": "#/$defs/PropertyIdOrError"}}, "PropertyIdOrError": {"type": "object", "description": "A property identifier or an error.", "oneOf": [{"title": "propertyId", "$ref": "#/$defs/PropertyIdArrayItem"}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetPropertyIdsResult"}')))
def test_instantiate_GetPropertyIdsResult(data: dict):
    """
    Tests that the GetPropertyIdsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyIdsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyIdsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfElementComponentsParameters": {"type": "object", "properties": {"elementComponents": {"$ref": "#/$defs/ElementComponents"}, "properties": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["elementComponents", "properties"]}, "ElementComponents": {"type": "array", "description": "List of components of elements.", "items": {"$ref": "#/$defs/ElementComponentIdArrayItem"}}, "ElementComponentIdArrayItem": {"type": "object", "description": "An item of a component array.", "properties": {"elementComponentId": {"$ref": "#/$defs/ElementComponentId"}}, "additionalProperties": false, "required": ["elementComponentId"]}, "ElementComponentId": {"type": "object", "description": "The identifier of an element\'s component.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "componentId": {"$ref": "#/$defs/ComponentId"}}, "additionalProperties": false, "required": ["elementId", "componentId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ComponentId": {"type": "object", "description": "The identifier of a component.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetPropertyValuesOfElementComponentsParameters"}')))
def test_instantiate_GetPropertyValuesOfElementComponentsParameters(data: dict):
    """
    Tests that the GetPropertyValuesOfElementComponentsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyValuesOfElementComponentsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyValuesOfElementComponentsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfElementComponentsResult": {"type": "object", "properties": {"propertyValuesForElementComponents": {"$ref": "#/$defs/PropertyValuesOrErrorArray", "description": "List of property value lists. The order of the outer list is that of the given components. The order of the inner lists are that of the given properties."}}, "additionalProperties": false, "required": ["propertyValuesForElementComponents"]}, "PropertyValuesOrErrorArray": {"type": "array", "description": "A list of property value lists.", "items": {"$ref": "#/$defs/PropertyValuesOrError"}}, "PropertyValuesOrError": {"type": "object", "description": "A list of property values or an error.", "oneOf": [{"title": "propertyValues", "properties": {"propertyValues": {"$ref": "#/$defs/PropertyValues"}}, "additionalProperties": false, "required": ["propertyValues"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "PropertyValues": {"type": "array", "description": "A list of property values.", "items": {"$ref": "#/$defs/PropertyValueOrErrorItem"}}, "PropertyValueOrErrorItem": {"type": "object", "description": "A property value or an error", "oneOf": [{"title": "propertyValue", "properties": {"propertyValue": {"$ref": "#/$defs/PropertyValue"}}, "additionalProperties": false, "required": ["propertyValue"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "PropertyValue": {"type": "object", "description": "A normal, userUndefined, notAvailable or notEvaluated property value.", "oneOf": [{"$ref": "#/$defs/NormalOrUserUndefinedPropertyValue"}, {"$ref": "#/$defs/NotAvailablePropertyValue"}, {"$ref": "#/$defs/NotEvaluatedPropertyValue"}]}, "NotAvailablePropertyValue": {"type": "object", "description": "A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["notAvailable"]}}, "additionalProperties": false, "required": ["type", "status"]}, "PropertyValueType": {"type": "string", "enum": ["number", "integer", "string", "boolean", "length", "area", "volume", "angle", "numberList", "integerList", "stringList", "booleanList", "lengthList", "areaList", "volumeList", "angleList", "singleEnum", "multiEnum"]}, "NotEvaluatedPropertyValue": {"type": "object", "description": "A notEvaluated value means that the property could not be evaluated for the property owner for some reason.", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["notEvaluated"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalOrUserUndefinedPropertyValue": {"type": "object", "description": "A normal or a userUndefined property value.", "oneOf": [{"$ref": "#/$defs/NormalNumberPropertyValue"}, {"$ref": "#/$defs/NormalIntegerPropertyValue"}, {"$ref": "#/$defs/NormalStringPropertyValue"}, {"$ref": "#/$defs/NormalBooleanPropertyValue"}, {"$ref": "#/$defs/NormalLengthPropertyValue"}, {"$ref": "#/$defs/NormalAreaPropertyValue"}, {"$ref": "#/$defs/NormalVolumePropertyValue"}, {"$ref": "#/$defs/NormalAnglePropertyValue"}, {"$ref": "#/$defs/NormalNumberListPropertyValue"}, {"$ref": "#/$defs/NormalIntegerListPropertyValue"}, {"$ref": "#/$defs/NormalStringListPropertyValue"}, {"$ref": "#/$defs/NormalBooleanListPropertyValue"}, {"$ref": "#/$defs/NormalLengthListPropertyValue"}, {"$ref": "#/$defs/NormalAreaListPropertyValue"}, {"$ref": "#/$defs/NormalVolumeListPropertyValue"}, {"$ref": "#/$defs/NormalAngleListPropertyValue"}, {"$ref": "#/$defs/NormalSingleEnumPropertyValue"}, {"$ref": "#/$defs/NormalMultiEnumPropertyValue"}, {"$ref": "#/$defs/UserUndefinedPropertyValue"}]}, "UserUndefinedPropertyValue": {"type": "object", "description": "A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["userUndefined"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalNumberPropertyValue": {"type": "object", "description": "A number property value containing a valid numeric value.", "properties": {"type": {"type": "string", "enum": ["number"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAnglePropertyValue": {"type": "object", "description": "An angle property value containing a real angle. The value is measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angle"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringPropertyValue": {"type": "object", "description": "A string property value containing a valid string.", "properties": {"type": {"type": "string", "enum": ["string"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "string"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringListPropertyValue": {"type": "object", "description": "A string list property value containing strings in an array.", "properties": {"type": {"type": "string", "enum": ["stringList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "string"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalLengthPropertyValue": {"type": "object", "description": "A length property value containing a real length value. The value is measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["length"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalMultiEnumPropertyValue": {"type": "object", "description": "A multiple choice enumeration property value containing the IDs of the selected enum values in an array.", "properties": {"type": {"type": "string", "enum": ["multiEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueIds"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "EnumValueIds": {"type": "array", "description": "A list of enumeration identifiers.", "items": {"type": "object", "properties": {"enumValueId": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["enumValueId"]}}, "EnumValueId": {"type": "object", "description": "The identifier of a property enumeration value.", "oneOf": [{"$ref": "#/$defs/DisplayValueEnumId"}, {"$ref": "#/$defs/NonLocalizedValueEnumId"}]}, "DisplayValueEnumId": {"type": "object", "description": "An enumeration value identifier using the displayed value.", "properties": {"type": {"type": "string", "enum": ["displayValue"]}, "displayValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "displayValue"]}, "NonLocalizedValueEnumId": {"type": "object", "description": "An enumeration value identifier using the nonlocalized value.", "properties": {"type": {"type": "string", "enum": ["nonLocalizedValue"]}, "nonLocalizedValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "nonLocalizedValue"]}, "NormalLengthListPropertyValue": {"type": "object", "description": "A length list property value containing length values in an array. The values are measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["lengthList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaListPropertyValue": {"type": "object", "description": "An area list property value containing areas in an array. The values are measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["areaList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanPropertyValue": {"type": "object", "description": "A boolean property value containing a valid boolean value.", "properties": {"type": {"type": "string", "enum": ["boolean"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "boolean"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerListPropertyValue": {"type": "object", "description": "An integer list property value containing integers in an array.", "properties": {"type": {"type": "string", "enum": ["integerList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "integer"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerPropertyValue": {"type": "object", "description": "An integer property value containing a valid integer number.", "properties": {"type": {"type": "string", "enum": ["integer"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "integer"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumePropertyValue": {"type": "object", "description": "A volume property value containing a real volume. The value is measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volume"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanListPropertyValue": {"type": "object", "description": "A boolean list property value containing boolean values in an array.", "properties": {"type": {"type": "string", "enum": ["booleanList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "boolean"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumeListPropertyValue": {"type": "object", "description": "A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volumeList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalSingleEnumPropertyValue": {"type": "object", "description": "A single enumeration property value containing the ID of the selected enum value.", "properties": {"type": {"type": "string", "enum": ["singleEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalNumberListPropertyValue": {"type": "object", "description": "A number list property value containing numbers in an array.", "properties": {"type": {"type": "string", "enum": ["numberList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaPropertyValue": {"type": "object", "description": "An area property value containing a real area. The value is measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["area"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAngleListPropertyValue": {"type": "object", "description": "An angle list property value containing angles in an array. The values are measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angleList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetPropertyValuesOfElementComponentsResult"}')))
def test_instantiate_GetPropertyValuesOfElementComponentsResult(data: dict):
    """
    Tests that the GetPropertyValuesOfElementComponentsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyValuesOfElementComponentsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyValuesOfElementComponentsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}, "properties": {"$ref": "#/$defs/PropertyIds"}}, "additionalProperties": false, "required": ["elements", "properties"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyIds": {"type": "array", "description": "A list of property identifiers.", "items": {"$ref": "#/$defs/PropertyIdArrayItem"}}, "PropertyIdArrayItem": {"type": "object", "properties": {"propertyId": {"$ref": "#/$defs/PropertyId"}}, "additionalProperties": false, "required": ["propertyId"]}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/GetPropertyValuesOfElementsParameters"}')))
def test_instantiate_GetPropertyValuesOfElementsParameters(data: dict):
    """
    Tests that the GetPropertyValuesOfElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyValuesOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyValuesOfElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPropertyValuesOfElementsResult": {"type": "object", "properties": {"propertyValuesForElements": {"$ref": "#/$defs/PropertyValuesOrErrorArray", "description": "List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."}}, "additionalProperties": false, "required": ["propertyValuesForElements"]}, "PropertyValuesOrErrorArray": {"type": "array", "description": "A list of property value lists.", "items": {"$ref": "#/$defs/PropertyValuesOrError"}}, "PropertyValuesOrError": {"type": "object", "description": "A list of property values or an error.", "oneOf": [{"title": "propertyValues", "properties": {"propertyValues": {"$ref": "#/$defs/PropertyValues"}}, "additionalProperties": false, "required": ["propertyValues"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "PropertyValues": {"type": "array", "description": "A list of property values.", "items": {"$ref": "#/$defs/PropertyValueOrErrorItem"}}, "PropertyValueOrErrorItem": {"type": "object", "description": "A property value or an error", "oneOf": [{"title": "propertyValue", "properties": {"propertyValue": {"$ref": "#/$defs/PropertyValue"}}, "additionalProperties": false, "required": ["propertyValue"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "PropertyValue": {"type": "object", "description": "A normal, userUndefined, notAvailable or notEvaluated property value.", "oneOf": [{"$ref": "#/$defs/NormalOrUserUndefinedPropertyValue"}, {"$ref": "#/$defs/NotAvailablePropertyValue"}, {"$ref": "#/$defs/NotEvaluatedPropertyValue"}]}, "NotAvailablePropertyValue": {"type": "object", "description": "A notAvailable value means that the property is not available for the property owner (and therefore it has no property value for it).", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["notAvailable"]}}, "additionalProperties": false, "required": ["type", "status"]}, "PropertyValueType": {"type": "string", "enum": ["number", "integer", "string", "boolean", "length", "area", "volume", "angle", "numberList", "integerList", "stringList", "booleanList", "lengthList", "areaList", "volumeList", "angleList", "singleEnum", "multiEnum"]}, "NotEvaluatedPropertyValue": {"type": "object", "description": "A notEvaluated value means that the property could not be evaluated for the property owner for some reason.", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["notEvaluated"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalOrUserUndefinedPropertyValue": {"type": "object", "description": "A normal or a userUndefined property value.", "oneOf": [{"$ref": "#/$defs/NormalNumberPropertyValue"}, {"$ref": "#/$defs/NormalIntegerPropertyValue"}, {"$ref": "#/$defs/NormalStringPropertyValue"}, {"$ref": "#/$defs/NormalBooleanPropertyValue"}, {"$ref": "#/$defs/NormalLengthPropertyValue"}, {"$ref": "#/$defs/NormalAreaPropertyValue"}, {"$ref": "#/$defs/NormalVolumePropertyValue"}, {"$ref": "#/$defs/NormalAnglePropertyValue"}, {"$ref": "#/$defs/NormalNumberListPropertyValue"}, {"$ref": "#/$defs/NormalIntegerListPropertyValue"}, {"$ref": "#/$defs/NormalStringListPropertyValue"}, {"$ref": "#/$defs/NormalBooleanListPropertyValue"}, {"$ref": "#/$defs/NormalLengthListPropertyValue"}, {"$ref": "#/$defs/NormalAreaListPropertyValue"}, {"$ref": "#/$defs/NormalVolumeListPropertyValue"}, {"$ref": "#/$defs/NormalAngleListPropertyValue"}, {"$ref": "#/$defs/NormalSingleEnumPropertyValue"}, {"$ref": "#/$defs/NormalMultiEnumPropertyValue"}, {"$ref": "#/$defs/UserUndefinedPropertyValue"}]}, "UserUndefinedPropertyValue": {"type": "object", "description": "A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["userUndefined"]}}, "additionalProperties": false, "required": ["type", "status"]}, "NormalNumberPropertyValue": {"type": "object", "description": "A number property value containing a valid numeric value.", "properties": {"type": {"type": "string", "enum": ["number"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAnglePropertyValue": {"type": "object", "description": "An angle property value containing a real angle. The value is measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angle"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringPropertyValue": {"type": "object", "description": "A string property value containing a valid string.", "properties": {"type": {"type": "string", "enum": ["string"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "string"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringListPropertyValue": {"type": "object", "description": "A string list property value containing strings in an array.", "properties": {"type": {"type": "string", "enum": ["stringList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "string"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalLengthPropertyValue": {"type": "object", "description": "A length property value containing a real length value. The value is measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["length"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalMultiEnumPropertyValue": {"type": "object", "description": "A multiple choice enumeration property value containing the IDs of the selected enum values in an array.", "properties": {"type": {"type": "string", "enum": ["multiEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueIds"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "EnumValueIds": {"type": "array", "description": "A list of enumeration identifiers.", "items": {"type": "object", "properties": {"enumValueId": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["enumValueId"]}}, "EnumValueId": {"type": "object", "description": "The identifier of a property enumeration value.", "oneOf": [{"$ref": "#/$defs/DisplayValueEnumId"}, {"$ref": "#/$defs/NonLocalizedValueEnumId"}]}, "DisplayValueEnumId": {"type": "object", "description": "An enumeration value identifier using the displayed value.", "properties": {"type": {"type": "string", "enum": ["displayValue"]}, "displayValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "displayValue"]}, "NonLocalizedValueEnumId": {"type": "object", "description": "An enumeration value identifier using the nonlocalized value.", "properties": {"type": {"type": "string", "enum": ["nonLocalizedValue"]}, "nonLocalizedValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "nonLocalizedValue"]}, "NormalLengthListPropertyValue": {"type": "object", "description": "A length list property value containing length values in an array. The values are measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["lengthList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaListPropertyValue": {"type": "object", "description": "An area list property value containing areas in an array. The values are measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["areaList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanPropertyValue": {"type": "object", "description": "A boolean property value containing a valid boolean value.", "properties": {"type": {"type": "string", "enum": ["boolean"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "boolean"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerListPropertyValue": {"type": "object", "description": "An integer list property value containing integers in an array.", "properties": {"type": {"type": "string", "enum": ["integerList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "integer"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerPropertyValue": {"type": "object", "description": "An integer property value containing a valid integer number.", "properties": {"type": {"type": "string", "enum": ["integer"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "integer"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumePropertyValue": {"type": "object", "description": "A volume property value containing a real volume. The value is measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volume"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanListPropertyValue": {"type": "object", "description": "A boolean list property value containing boolean values in an array.", "properties": {"type": {"type": "string", "enum": ["booleanList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "boolean"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumeListPropertyValue": {"type": "object", "description": "A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volumeList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalSingleEnumPropertyValue": {"type": "object", "description": "A single enumeration property value containing the ID of the selected enum value.", "properties": {"type": {"type": "string", "enum": ["singleEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalNumberListPropertyValue": {"type": "object", "description": "A number list property value containing numbers in an array.", "properties": {"type": {"type": "string", "enum": ["numberList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaPropertyValue": {"type": "object", "description": "An area property value containing a real area. The value is measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["area"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAngleListPropertyValue": {"type": "object", "description": "An angle list property value containing angles in an array. The values are measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angleList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetPropertyValuesOfElementsResult"}')))
def test_instantiate_GetPropertyValuesOfElementsResult(data: dict):
    """
    Tests that the GetPropertyValuesOfElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPropertyValuesOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPropertyValuesOfElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetPublisherSetNamesResult": {"type": "object", "properties": {"publisherSetNames": {"type": "array", "description": "The names of available publisher sets.", "items": {"type": "string"}}}, "additionalProperties": false, "required": ["publisherSetNames"]}}, "$ref": "#/$defs/GetPublisherSetNamesResult"}')))
def test_instantiate_GetPublisherSetNamesResult(data: dict):
    """
    Tests that the GetPublisherSetNamesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetPublisherSetNamesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetPublisherSetNamesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSectionNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetSectionNavigatorItemsParameters"}')))
def test_instantiate_GetSectionNavigatorItemsParameters(data: dict):
    """
    Tests that the GetSectionNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetSectionNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetSectionNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSectionNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/SectionNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "SectionNavigatorItems": {"type": "array", "description": "A list of section navigator items.", "items": {"$ref": "#/$defs/SectionNavigatorItemOrError"}}, "SectionNavigatorItemOrError": {"type": "object", "description": "Contains a section navigator item or an error.", "oneOf": [{"title": "SectionNavigatorItem", "properties": {"sectionNavigatorItem": {"$ref": "#/$defs/SectionNavigatorItem"}}, "additionalProperties": false, "required": ["sectionNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "SectionNavigatorItem": {"type": "object", "description": "The details of a section navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetSectionNavigatorItemsResult"}')))
def test_instantiate_GetSectionNavigatorItemsResult(data: dict):
    """
    Tests that the GetSectionNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetSectionNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetSectionNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSelectedElementsParameters": {"type": "object", "properties": {"onlyEditable": {"type": "boolean", "description": "Optional parameter that defines whether the selection list should include only the editable elements or all of them. The default value is FALSE"}, "onlySupportedTypes": {"type": "boolean", "description": "Optional parameter. When it is set to true, only elements with types that are supported by any other JSON API command will be returned."}}, "additionalProperties": false}}, "$ref": "#/$defs/GetSelectedElementsParameters"}')))
def test_instantiate_GetSelectedElementsParameters(data: dict):
    """
    Tests that the GetSelectedElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetSelectedElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetSelectedElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSelectedElementsResult": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetSelectedElementsResult"}')))
def test_instantiate_GetSelectedElementsResult(data: dict):
    """
    Tests that the GetSelectedElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetSelectedElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetSelectedElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetStoryNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetStoryNavigatorItemsParameters"}')))
def test_instantiate_GetStoryNavigatorItemsParameters(data: dict):
    """
    Tests that the GetStoryNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetStoryNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetStoryNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetStoryNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/StoryNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "StoryNavigatorItems": {"type": "array", "description": "A list of story navigator items.", "items": {"$ref": "#/$defs/StoryNavigatorItemOrError"}}, "StoryNavigatorItemOrError": {"type": "object", "description": "Contains a story navigator item or an error.", "oneOf": [{"title": "StoryNavigatorItem", "properties": {"storyNavigatorItem": {"$ref": "#/$defs/StoryNavigatorItem"}}, "additionalProperties": false, "required": ["storyNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "StoryNavigatorItem": {"type": "object", "description": "The details of a story navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}, "floorLevel": {"type": "number", "description": "The floor level of the story navigator item."}, "floorNumber": {"type": "number", "description": "The floor number of the story navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name", "floorLevel", "floorNumber"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetStoryNavigatorItemsResult"}')))
def test_instantiate_GetStoryNavigatorItemsResult(data: dict):
    """
    Tests that the GetStoryNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetStoryNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetStoryNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSurfaceAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetSurfaceAttributesParameters"}')))
def test_instantiate_GetSurfaceAttributesParameters(data: dict):
    """
    Tests that the GetSurfaceAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetSurfaceAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetSurfaceAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetSurfaceAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/SurfaceAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "SurfaceAttributes": {"type": "array", "description": "A list of surface attributes and potential errors.", "items": {"$ref": "#/$defs/SurfaceAttributeOrError"}}, "SurfaceAttributeOrError": {"type": "object", "description": "A surface attribute or an error.", "oneOf": [{"title": "surfaceAttribute", "properties": {"surfaceAttribute": {"$ref": "#/$defs/SurfaceAttribute"}}, "additionalProperties": false, "required": ["surfaceAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "SurfaceAttribute": {"type": "object", "description": "A surface attribute.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "materialType": {"$ref": "#/$defs/MaterialTypeId"}, "ambientReflection": {"type": "integer", "description": "The ambient reflection of the surface attribute.", "minimum": 0, "maximum": 100}, "diffuseReflection": {"type": "integer", "description": "The diffuse reflection of the surface attribute.", "minimum": 0, "maximum": 100}, "specularReflection": {"type": "integer", "description": "The specular reflection of the surface attribute.", "minimum": 0, "maximum": 100}, "transparencyAttenuation": {"type": "integer", "description": "The transparency attenuation of the surface attribute.", "minimum": 0, "maximum": 400}, "emissionAttenuation": {"type": "integer", "description": "The emission attenuation of the surface attribute.", "minimum": 0, "maximum": 65535}, "surfaceColor": {"$ref": "#/$defs/RGBColor", "description": "The surface color of the surface attribute."}, "specularColor": {"$ref": "#/$defs/RGBColor", "description": "The specular color of the surface attribute."}, "emissionColor": {"$ref": "#/$defs/RGBColor", "description": "The emission color of the surface attribute."}, "fillId": {"$ref": "#/$defs/AttributeIdOrError", "description": "The identifier of the surface attribute\'s fill component."}, "transparency": {"type": "integer", "description": "The transparency of the surface attribute.", "minimum": 0, "maximum": 100}, "shine": {"type": "integer", "description": "The shininess of the surface attribute.", "minimum": 0, "maximum": 10000}, "texture": {"$ref": "#/$defs/Texture", "description": "The texture of the surface attribute."}}, "additionalProperties": false, "required": ["attributeId", "name", "materialType", "ambientReflection", "diffuseReflection", "specularReflection", "transparencyAttenuation", "emissionAttenuation", "surfaceColor", "specularColor", "emissionColor", "fillId", "transparency", "shine"]}, "Texture": {"type": "object", "description": "A texture", "properties": {"name": {"type": "string", "description": "The name of the texture."}}, "additionalProperties": false, "required": ["name"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "RGBColor": {"type": "object", "description": "A color model represented via its red, green and blue components.", "properties": {"red": {"type": "number", "description": "The red component of the color model.", "minimum": 0, "maximum": 1}, "green": {"type": "number", "description": "The green component of the color model.", "minimum": 0, "maximum": 1}, "blue": {"type": "number", "description": "The blue component of the color model.", "minimum": 0, "maximum": 1}}, "additionalProperties": false, "required": ["red", "green", "blue"]}, "AttributeIdOrError": {"type": "object", "description": "The attribute\'s identifier or an error.", "oneOf": [{"title": "attributeId", "$ref": "#/$defs/AttributeIdWrapperItem"}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}, "MaterialTypeId": {"type": "string", "description": "The material type of a surface attribute.", "enum": ["General", "Simple", "Matte", "Metal", "Plastic", "Glass", "Glowing", "Constant"]}}, "$ref": "#/$defs/GetSurfaceAttributesResult"}')))
def test_instantiate_GetSurfaceAttributesResult(data: dict):
    """
    Tests that the GetSurfaceAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetSurfaceAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetSurfaceAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetTypesOfElementsParameters": {"type": "object", "properties": {"elements": {"$ref": "#/$defs/Elements"}}, "additionalProperties": false, "required": ["elements"]}, "Elements": {"type": "array", "description": "A list of elements.", "items": {"$ref": "#/$defs/ElementIdArrayItem"}}, "ElementIdArrayItem": {"type": "object", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}}, "additionalProperties": false, "required": ["elementId"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetTypesOfElementsParameters"}')))
def test_instantiate_GetTypesOfElementsParameters(data: dict):
    """
    Tests that the GetTypesOfElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetTypesOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetTypesOfElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetTypesOfElementsResult": {"type": "object", "properties": {"typesOfElements": {"$ref": "#/$defs/TypeOfElementOrErrorList"}}, "additionalProperties": false, "required": ["typesOfElements"]}, "TypeOfElementOrErrorList": {"type": "array", "description": "A list of element types or errors.", "items": {"$ref": "#/$defs/TypeOfElementOrError"}}, "TypeOfElementOrError": {"type": "object", "description": "The type of an element or an error.", "oneOf": [{"title": "typeOfElement", "properties": {"typeOfElement": {"$ref": "#/$defs/TypeOfElement"}}, "additionalProperties": false, "required": ["typeOfElement"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "TypeOfElement": {"type": "object", "description": "An element id and its corresponding element type.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "elementType": {"$ref": "#/$defs/ElementType"}}, "additionalProperties": false, "required": ["elementId", "elementType"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ElementType": {"type": "string", "description": "The type of an element.", "enum": ["Wall", "Column", "Beam", "Window", "Door", "Object", "Lamp", "Slab", "Roof", "Mesh", "Zone", "CurtainWall", "Shell", "Skylight", "Morph", "Stair", "Railing", "Opening"]}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetTypesOfElementsResult"}')))
def test_instantiate_GetTypesOfElementsResult(data: dict):
    """
    Tests that the GetTypesOfElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetTypesOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetTypesOfElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetWorksheetNavigatorItemsParameters": {"type": "object", "properties": {"navigatorItemIds": {"$ref": "#/$defs/NavigatorItemIds"}}, "additionalProperties": false, "required": ["navigatorItemIds"]}, "NavigatorItemIds": {"type": "array", "description": "A list of navigator item identifiers.", "items": {"type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemId"]}}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetWorksheetNavigatorItemsParameters"}')))
def test_instantiate_GetWorksheetNavigatorItemsParameters(data: dict):
    """
    Tests that the GetWorksheetNavigatorItemsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetWorksheetNavigatorItemsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetWorksheetNavigatorItemsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetWorksheetNavigatorItemsResult": {"type": "object", "properties": {"navigatorItems": {"$ref": "#/$defs/WorksheetNavigatorItems"}}, "additionalProperties": false, "required": ["navigatorItems"]}, "WorksheetNavigatorItems": {"type": "array", "description": "A list of worksheet navigator items.", "items": {"$ref": "#/$defs/WorksheetNavigatorItemOrError"}}, "WorksheetNavigatorItemOrError": {"type": "object", "description": "Contains a worksheet navigator item or an error.", "oneOf": [{"title": "WorksheetNavigatorItem", "properties": {"worksheetNavigatorItem": {"$ref": "#/$defs/WorksheetNavigatorItem"}}, "additionalProperties": false, "required": ["worksheetNavigatorItem"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "WorksheetNavigatorItem": {"type": "object", "description": "The details of a worksheet navigator item.", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "prefix": {"type": "string", "description": "The prefix of the navigator item\'s name."}, "name": {"type": "string", "description": "The name of the navigator item."}}, "additionalProperties": false, "required": ["navigatorItemId", "prefix", "name"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetWorksheetNavigatorItemsResult"}')))
def test_instantiate_GetWorksheetNavigatorItemsResult(data: dict):
    """
    Tests that the GetWorksheetNavigatorItemsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetWorksheetNavigatorItemsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetWorksheetNavigatorItemsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetZoneCategoryAttributesParameters": {"type": "object", "properties": {"attributeIds": {"$ref": "#/$defs/AttributeIds"}}, "additionalProperties": false, "required": ["attributeIds"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/GetZoneCategoryAttributesParameters"}')))
def test_instantiate_GetZoneCategoryAttributesParameters(data: dict):
    """
    Tests that the GetZoneCategoryAttributesParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetZoneCategoryAttributesParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetZoneCategoryAttributesParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"GetZoneCategoryAttributesResult": {"type": "object", "properties": {"attributes": {"$ref": "#/$defs/ZoneCategoryAttributes"}}, "additionalProperties": false, "required": ["attributes"]}, "ZoneCategoryAttributes": {"type": "array", "description": "A list of zone category attributes and potential errors.", "items": {"$ref": "#/$defs/ZoneCategoryAttributeOrError"}}, "ZoneCategoryAttributeOrError": {"type": "object", "description": "A zone category attribute or an error.", "oneOf": [{"title": "ZoneCategoryAttribute", "properties": {"zoneCategoryAttribute": {"$ref": "#/$defs/ZoneCategoryAttribute"}}, "additionalProperties": false, "required": ["zoneCategoryAttribute"]}, {"title": "error", "$ref": "#/$defs/ErrorItem"}]}, "ZoneCategoryAttribute": {"type": "object", "description": "A zone category.", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}, "name": {"$ref": "#/$defs/AttributeName"}, "categoryCode": {"type": "string", "description": "The category code of the zone."}, "stampName": {"type": "string", "description": "The stamp name of the zone category."}, "stampMainGuid": {"$ref": "#/$defs/Guid", "description": "The main part of the stamp library part\'s unique identifier."}, "stampRevisionGuid": {"$ref": "#/$defs/Guid", "description": "The revision part of the stamp library part\'s unique identifier."}, "color": {"$ref": "#/$defs/RGBColor"}}, "additionalProperties": false, "required": ["attributeId", "name", "categoryCode", "stampName", "stampMainGuid", "stampRevisionGuid", "color"]}, "RGBColor": {"type": "object", "description": "A color model represented via its red, green and blue components.", "properties": {"red": {"type": "number", "description": "The red component of the color model.", "minimum": 0, "maximum": 1}, "green": {"type": "number", "description": "The green component of the color model.", "minimum": 0, "maximum": 1}, "blue": {"type": "number", "description": "The blue component of the color model.", "minimum": 0, "maximum": 1}}, "additionalProperties": false, "required": ["red", "green", "blue"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "AttributeName": {"type": "string", "description": "The name of an attribute.", "minLength": 1}, "ErrorItem": {"type": "object", "properties": {"error": {"$ref": "#/$defs/Error"}}, "additionalProperties": false, "required": ["error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}}, "$ref": "#/$defs/GetZoneCategoryAttributesResult"}')))
def test_instantiate_GetZoneCategoryAttributesResult(data: dict):
    """
    Tests that the GetZoneCategoryAttributesResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        GetZoneCategoryAttributesResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate GetZoneCategoryAttributesResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"IsAddOnCommandAvailableParameters": {"type": "object", "properties": {"addOnCommandId": {"$ref": "#/$defs/AddOnCommandId"}}, "additionalProperties": false, "required": ["addOnCommandId"]}, "AddOnCommandId": {"type": "object", "description": "The identifier of an Add-On command.", "properties": {"commandNamespace": {"type": "string", "description": "The namespace of the Add-On command.", "minLength": 1}, "commandName": {"type": "string", "description": "The name of the Add-On command.", "minLength": 1}}, "additionalProperties": false, "required": ["commandNamespace", "commandName"]}}, "$ref": "#/$defs/IsAddOnCommandAvailableParameters"}')))
def test_instantiate_IsAddOnCommandAvailableParameters(data: dict):
    """
    Tests that the IsAddOnCommandAvailableParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        IsAddOnCommandAvailableParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate IsAddOnCommandAvailableParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"IsAddOnCommandAvailableResult": {"type": "object", "properties": {"available": {"type": "boolean", "description": "Returns true if the command is available."}}, "additionalProperties": false, "required": ["available"]}}, "$ref": "#/$defs/IsAddOnCommandAvailableResult"}')))
def test_instantiate_IsAddOnCommandAvailableResult(data: dict):
    """
    Tests that the IsAddOnCommandAvailableResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        IsAddOnCommandAvailableResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate IsAddOnCommandAvailableResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"IsAliveResult": {"type": "object", "properties": {"isAlive": {"type": "boolean", "description": "Returns true if the connection is alive."}}, "additionalProperties": false, "required": ["isAlive"]}}, "$ref": "#/$defs/IsAliveResult"}')))
def test_instantiate_IsAliveResult(data: dict):
    """
    Tests that the IsAliveResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        IsAliveResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate IsAliveResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"MoveAttributesAndFoldersParameters": {"type": "object", "properties": {"attributeFolderIds": {"$ref": "#/$defs/AttributeFolderIds"}, "attributeIds": {"$ref": "#/$defs/AttributeIds"}, "targetFolderId": {"$ref": "#/$defs/AttributeFolderId"}}, "additionalProperties": false, "required": ["attributeFolderIds", "attributeIds", "targetFolderId"]}, "AttributeIds": {"type": "array", "description": "A list of attribute identifiers.", "items": {"$ref": "#/$defs/AttributeIdWrapperItem"}}, "AttributeIdWrapperItem": {"type": "object", "properties": {"attributeId": {"$ref": "#/$defs/AttributeId"}}, "additionalProperties": false, "required": ["attributeId"]}, "AttributeId": {"type": "object", "description": "The identifier of an attribute.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeFolderIds": {"type": "array", "description": "A list of attribute folder identifiers.", "items": {"$ref": "#/$defs/AttributeFolderIdWrapperItem"}}, "AttributeFolderIdWrapperItem": {"type": "object", "properties": {"attributeFolderId": {"$ref": "#/$defs/AttributeFolderId"}}, "additionalProperties": false, "required": ["attributeFolderId"]}, "AttributeFolderId": {"type": "object", "description": "The identifier of an attribute folder.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/MoveAttributesAndFoldersParameters"}')))
def test_instantiate_MoveAttributesAndFoldersParameters(data: dict):
    """
    Tests that the MoveAttributesAndFoldersParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        MoveAttributesAndFoldersParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate MoveAttributesAndFoldersParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"MoveNavigatorItemParameters": {"type": "object", "properties": {"navigatorItemIdToMove": {"$ref": "#/$defs/NavigatorItemId"}, "parentNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "previousNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["navigatorItemIdToMove", "parentNavigatorItemId"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/MoveNavigatorItemParameters"}')))
def test_instantiate_MoveNavigatorItemParameters(data: dict):
    """
    Tests that the MoveNavigatorItemParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        MoveNavigatorItemParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate MoveNavigatorItemParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"RenameAttributeFoldersParameters": {"type": "object", "properties": {"attributeFolderParametersList": {"type": "array", "items": {"$ref": "#/$defs/AttributeFolderRenameParameters"}}}, "additionalProperties": false, "required": ["attributeFolderParametersList"]}, "AttributeFolderRenameParameters": {"type": "object", "description": "Used to rename an attribute folder. The folder is identified by it\'s Id.", "properties": {"attributeFolderId": {"$ref": "#/$defs/AttributeFolderId"}, "newName": {"$ref": "#/$defs/AttributeFolderName"}}, "additionalProperties": false, "required": ["attributeFolderId", "newName"]}, "AttributeFolderId": {"type": "object", "description": "The identifier of an attribute folder.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "AttributeFolderName": {"type": "string", "description": "The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.", "minLength": 1}}, "$ref": "#/$defs/RenameAttributeFoldersParameters"}')))
def test_instantiate_RenameAttributeFoldersParameters(data: dict):
    """
    Tests that the RenameAttributeFoldersParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        RenameAttributeFoldersParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate RenameAttributeFoldersParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"RenameAttributeFoldersResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}}, "$ref": "#/$defs/RenameAttributeFoldersResult"}')))
def test_instantiate_RenameAttributeFoldersResult(data: dict):
    """
    Tests that the RenameAttributeFoldersResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        RenameAttributeFoldersResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate RenameAttributeFoldersResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"RenameNavigatorItemParameters": {"oneOf": [{"title": "navigatorItemId and newName", "type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "newName": {"description": "New name of the navigator item.", "type": "string"}}, "additionalProperties": false, "required": ["navigatorItemId", "newName"]}, {"title": "navigatorItemId and newId", "type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "newId": {"description": "New ID of the navigator item.", "type": "string"}}, "additionalProperties": false, "required": ["navigatorItemId", "newId"]}, {"title": "navigatorItemId, newName and newId", "type": "object", "properties": {"navigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}, "newName": {"description": "New name of the navigator item.", "type": "string"}, "newId": {"description": "New ID of the navigator item.", "type": "string"}}, "additionalProperties": false, "required": ["navigatorItemId", "newName", "newId"]}]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/RenameNavigatorItemParameters"}')))
def test_instantiate_RenameNavigatorItemParameters(data: dict):
    """
    Tests that the RenameNavigatorItemParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        RenameNavigatorItemParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate RenameNavigatorItemParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetClassificationsOfElementsParameters": {"type": "object", "properties": {"elementClassifications": {"$ref": "#/$defs/ElementClassifications"}}, "additionalProperties": false, "required": ["elementClassifications"]}, "ElementClassifications": {"type": "array", "description": "A list of element classification identifiers.", "items": {"$ref": "#/$defs/ElementClassification"}}, "ElementClassification": {"type": "object", "description": "The classification of an element.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "classificationId": {"$ref": "#/$defs/ClassificationId"}}, "additionalProperties": false, "required": ["elementId", "classificationId"]}, "ClassificationId": {"type": "object", "description": "The element classification identifier.", "properties": {"classificationSystemId": {"$ref": "#/$defs/ClassificationSystemId"}, "classificationItemId": {"$ref": "#/$defs/ClassificationItemId", "description": "The element\'s classification in the given system. If no value is specified here, the element is Unclassified in this system."}}, "additionalProperties": false, "required": ["classificationSystemId"]}, "ClassificationSystemId": {"type": "object", "description": "The identifier of a classification system.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "ClassificationItemId": {"type": "object", "description": "The identifier of a classification item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/SetClassificationsOfElementsParameters"}')))
def test_instantiate_SetClassificationsOfElementsParameters(data: dict):
    """
    Tests that the SetClassificationsOfElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        SetClassificationsOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate SetClassificationsOfElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetClassificationsOfElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}}, "$ref": "#/$defs/SetClassificationsOfElementsResult"}')))
def test_instantiate_SetClassificationsOfElementsResult(data: dict):
    """
    Tests that the SetClassificationsOfElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        SetClassificationsOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate SetClassificationsOfElementsResult with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetLayoutSettingsParameters": {"type": "object", "properties": {"layoutParameters": {"$ref": "#/$defs/LayoutParameters"}, "layoutNavigatorItemId": {"$ref": "#/$defs/NavigatorItemId"}}, "additionalProperties": false, "required": ["layoutParameters", "layoutNavigatorItemId"]}, "LayoutParameters": {"type": "object", "description": "The parameters of the layout.", "properties": {"horizontalSize": {"type": "number", "description": "The horizontal size of the layout in millimeters."}, "verticalSize": {"type": "number", "description": "The vertical size of the layout in millimeters."}, "leftMargin": {"type": "number", "description": "The layout margin from the left side of the paper."}, "topMargin": {"type": "number", "description": "The layout margin from the top side of the paper."}, "rightMargin": {"type": "number", "description": "The layout margin from the right side of the paper."}, "bottomMargin": {"type": "number", "description": "The layout margin from the bottom side of the paper."}, "customLayoutNumber": {"type": "string", "description": "The custom ID."}, "customLayoutNumbering": {"type": "boolean", "description": "Defines whether a unique ID is used for the current layout or not."}, "doNotIncludeInNumbering": {"type": "boolean", "description": "Defines whether this layout is included in automatic ID assignment or not."}, "displayMasterLayoutBelow": {"type": "boolean", "description": "Defines whether to display the master layout above or below the layout."}, "layoutPageNumber": {"type": "integer", "description": "The page number of layout when this layout contains multi-page drawings."}, "actPageIndex": {"type": "integer", "description": "The actual index of layout inside the multi-page layout."}, "currentRevisionId": {"type": "string", "description": "The ID of the current document revision of the layout."}, "currentFinalRevisionId": {"type": "string", "description": "The ID with optional suffix of the current document revision of the layout."}, "hasIssuedRevision": {"type": "boolean", "description": "Defines whether one or more issued document revisions have already been created for the layout or not."}, "hasActualRevision": {"type": "boolean", "description": "Defines whether an open document revision exists for the layout or not."}}, "additionalProperties": false, "required": ["horizontalSize", "verticalSize", "leftMargin", "topMargin", "rightMargin", "bottomMargin", "customLayoutNumber", "customLayoutNumbering", "doNotIncludeInNumbering", "displayMasterLayoutBelow", "layoutPageNumber", "actPageIndex", "currentRevisionId", "currentFinalRevisionId", "hasIssuedRevision", "hasActualRevision"]}, "NavigatorItemId": {"type": "object", "description": "The identifier of a navigator item.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}}, "$ref": "#/$defs/SetLayoutSettingsParameters"}')))
def test_instantiate_SetLayoutSettingsParameters(data: dict):
    """
    Tests that the SetLayoutSettingsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        SetLayoutSettingsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate SetLayoutSettingsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetPropertyValuesOfElementsParameters": {"type": "object", "properties": {"elementPropertyValues": {"$ref": "#/$defs/ElementPropertyValues"}}, "additionalProperties": false, "required": ["elementPropertyValues"]}, "ElementPropertyValues": {"type": "array", "description": "A list of element property values.", "items": {"$ref": "#/$defs/ElementPropertyValue"}}, "ElementPropertyValue": {"type": "object", "description": "A property value with the identifiers of the property and its owner element.", "properties": {"elementId": {"$ref": "#/$defs/ElementId"}, "propertyId": {"$ref": "#/$defs/PropertyId"}, "propertyValue": {"$ref": "#/$defs/NormalOrUserUndefinedPropertyValue"}}, "additionalProperties": false, "required": ["elementId", "propertyId", "propertyValue"]}, "NormalOrUserUndefinedPropertyValue": {"type": "object", "description": "A normal or a userUndefined property value.", "oneOf": [{"$ref": "#/$defs/NormalNumberPropertyValue"}, {"$ref": "#/$defs/NormalIntegerPropertyValue"}, {"$ref": "#/$defs/NormalStringPropertyValue"}, {"$ref": "#/$defs/NormalBooleanPropertyValue"}, {"$ref": "#/$defs/NormalLengthPropertyValue"}, {"$ref": "#/$defs/NormalAreaPropertyValue"}, {"$ref": "#/$defs/NormalVolumePropertyValue"}, {"$ref": "#/$defs/NormalAnglePropertyValue"}, {"$ref": "#/$defs/NormalNumberListPropertyValue"}, {"$ref": "#/$defs/NormalIntegerListPropertyValue"}, {"$ref": "#/$defs/NormalStringListPropertyValue"}, {"$ref": "#/$defs/NormalBooleanListPropertyValue"}, {"$ref": "#/$defs/NormalLengthListPropertyValue"}, {"$ref": "#/$defs/NormalAreaListPropertyValue"}, {"$ref": "#/$defs/NormalVolumeListPropertyValue"}, {"$ref": "#/$defs/NormalAngleListPropertyValue"}, {"$ref": "#/$defs/NormalSingleEnumPropertyValue"}, {"$ref": "#/$defs/NormalMultiEnumPropertyValue"}, {"$ref": "#/$defs/UserUndefinedPropertyValue"}]}, "UserUndefinedPropertyValue": {"type": "object", "description": "A userUndefined value means that there is no actual number/string/etc. value, but the user deliberately set an Undefined value: this is a valid value, too.", "properties": {"type": {"$ref": "#/$defs/PropertyValueType"}, "status": {"type": "string", "enum": ["userUndefined"]}}, "additionalProperties": false, "required": ["type", "status"]}, "PropertyValueType": {"type": "string", "enum": ["number", "integer", "string", "boolean", "length", "area", "volume", "angle", "numberList", "integerList", "stringList", "booleanList", "lengthList", "areaList", "volumeList", "angleList", "singleEnum", "multiEnum"]}, "NormalNumberPropertyValue": {"type": "object", "description": "A number property value containing a valid numeric value.", "properties": {"type": {"type": "string", "enum": ["number"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAnglePropertyValue": {"type": "object", "description": "An angle property value containing a real angle. The value is measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angle"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringPropertyValue": {"type": "object", "description": "A string property value containing a valid string.", "properties": {"type": {"type": "string", "enum": ["string"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "string"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalStringListPropertyValue": {"type": "object", "description": "A string list property value containing strings in an array.", "properties": {"type": {"type": "string", "enum": ["stringList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "string"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalLengthPropertyValue": {"type": "object", "description": "A length property value containing a real length value. The value is measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["length"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalMultiEnumPropertyValue": {"type": "object", "description": "A multiple choice enumeration property value containing the IDs of the selected enum values in an array.", "properties": {"type": {"type": "string", "enum": ["multiEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueIds"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "EnumValueIds": {"type": "array", "description": "A list of enumeration identifiers.", "items": {"type": "object", "properties": {"enumValueId": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["enumValueId"]}}, "EnumValueId": {"type": "object", "description": "The identifier of a property enumeration value.", "oneOf": [{"$ref": "#/$defs/DisplayValueEnumId"}, {"$ref": "#/$defs/NonLocalizedValueEnumId"}]}, "DisplayValueEnumId": {"type": "object", "description": "An enumeration value identifier using the displayed value.", "properties": {"type": {"type": "string", "enum": ["displayValue"]}, "displayValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "displayValue"]}, "NonLocalizedValueEnumId": {"type": "object", "description": "An enumeration value identifier using the nonlocalized value.", "properties": {"type": {"type": "string", "enum": ["nonLocalizedValue"]}, "nonLocalizedValue": {"type": "string"}}, "additionalProperties": false, "required": ["type", "nonLocalizedValue"]}, "NormalLengthListPropertyValue": {"type": "object", "description": "A length list property value containing length values in an array. The values are measured in SI (meters).", "properties": {"type": {"type": "string", "enum": ["lengthList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaListPropertyValue": {"type": "object", "description": "An area list property value containing areas in an array. The values are measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["areaList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanPropertyValue": {"type": "object", "description": "A boolean property value containing a valid boolean value.", "properties": {"type": {"type": "string", "enum": ["boolean"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "boolean"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerListPropertyValue": {"type": "object", "description": "An integer list property value containing integers in an array.", "properties": {"type": {"type": "string", "enum": ["integerList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "integer"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalIntegerPropertyValue": {"type": "object", "description": "An integer property value containing a valid integer number.", "properties": {"type": {"type": "string", "enum": ["integer"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "integer"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumePropertyValue": {"type": "object", "description": "A volume property value containing a real volume. The value is measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volume"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalBooleanListPropertyValue": {"type": "object", "description": "A boolean list property value containing boolean values in an array.", "properties": {"type": {"type": "string", "enum": ["booleanList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "boolean"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalVolumeListPropertyValue": {"type": "object", "description": "A volume list property value containing volumes in an array. The values are measured in SI (cubic meters).", "properties": {"type": {"type": "string", "enum": ["volumeList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalSingleEnumPropertyValue": {"type": "object", "description": "A single enumeration property value containing the ID of the selected enum value.", "properties": {"type": {"type": "string", "enum": ["singleEnum"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"$ref": "#/$defs/EnumValueId"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalNumberListPropertyValue": {"type": "object", "description": "A number list property value containing numbers in an array.", "properties": {"type": {"type": "string", "enum": ["numberList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAreaPropertyValue": {"type": "object", "description": "An area property value containing a real area. The value is measured in SI (square meters).", "properties": {"type": {"type": "string", "enum": ["area"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "number"}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "NormalAngleListPropertyValue": {"type": "object", "description": "An angle list property value containing angles in an array. The values are measured in SI (radians).", "properties": {"type": {"type": "string", "enum": ["angleList"]}, "status": {"type": "string", "enum": ["normal"]}, "value": {"type": "array", "items": {"type": "number"}}}, "additionalProperties": false, "required": ["type", "status", "value"]}, "ElementId": {"type": "object", "description": "The identifier of an element.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}, "Guid": {"type": "string", "description": "A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.", "format": "uuid", "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"}, "PropertyId": {"type": "object", "description": "The identifier of a property.", "properties": {"guid": {"$ref": "#/$defs/Guid"}}, "additionalProperties": false, "required": ["guid"]}}, "$ref": "#/$defs/SetPropertyValuesOfElementsParameters"}')))
def test_instantiate_SetPropertyValuesOfElementsParameters(data: dict):
    """
    Tests that the SetPropertyValuesOfElementsParameters model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        SetPropertyValuesOfElementsParameters.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate SetPropertyValuesOfElementsParameters with data: {repr(data)}\nError: {e}")



@given(data=from_schema(json.loads('{"$schema": "http://json-schema.org/draft-07/schema#", "$defs": {"SetPropertyValuesOfElementsResult": {"type": "object", "properties": {"executionResults": {"$ref": "#/$defs/ExecutionResults"}}, "additionalProperties": false, "required": ["executionResults"]}, "ExecutionResults": {"type": "array", "description": "A list of execution results.", "items": {"$ref": "#/$defs/ExecutionResult"}}, "ExecutionResult": {"type": "object", "description": "The result of the execution.", "oneOf": [{"$ref": "#/$defs/SuccessfulExecutionResult"}, {"$ref": "#/$defs/FailedExecutionResult"}]}, "FailedExecutionResult": {"type": "object", "description": "The result of a failed execution.", "properties": {"success": {"type": "boolean", "enum": [false]}, "error": {"$ref": "#/$defs/Error", "description": "The details of an execution failure."}}, "additionalProperties": false, "required": ["success", "error"]}, "Error": {"type": "object", "description": "The details of an error.", "properties": {"code": {"type": "integer", "description": "The code of the error."}, "message": {"type": "string", "description": "The error message."}}, "additionalProperties": false, "required": ["code", "message"]}, "SuccessfulExecutionResult": {"type": "object", "description": "The result of a successful execution.", "properties": {"success": {"type": "boolean", "enum": [true]}}, "additionalProperties": false, "required": ["success"]}}, "$ref": "#/$defs/SetPropertyValuesOfElementsResult"}')))
def test_instantiate_SetPropertyValuesOfElementsResult(data: dict):
    """
    Tests that the SetPropertyValuesOfElementsResult model can be successfully instantiated
    with valid data generated from its JSON schema.
    """
    try:
        SetPropertyValuesOfElementsResult.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate SetPropertyValuesOfElementsResult with data: {repr(data)}\nError: {e}")

