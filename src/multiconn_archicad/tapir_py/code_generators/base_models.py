from __future__ import annotations
from typing import Any, List, Literal, Union, TypeAlias
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel

### This file is automatically generated and surgically cleaned. Do not edit directly. ###

#   filename:  tapir_master_schema.json
#   timestamp: 2025-06-25T14:25:36+00:00


AttributeType = Literal[
            "Layer",
            "Line",
            "Fill",
            "Composite",
            "Surface",
            "LayerCombination",
            "ZoneCategory",
            "Profile",
            "PenTable",
            "MEPSystem",
            "OperationProfile",
            "BuildingMaterial",
        ]


class GDLParameterDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str | None = Field(None, description="The name of the parameter.")
    index: str = Field(..., description="The index of the parameter.")
    type: str = Field(..., description="The type of the parameter.")
    dimension: float | None = Field(
        None, description="The 1st dimension of array (in case of array value)."
    )
    dimension2: float | None = Field(
        None, description="The 2nd dimension of array (in case of array value)."
    )
    value: Any = Field(..., description="The value of the parameter.")


class PolyArc(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begIndex: int = Field(..., description="Node index of one end point of the arc.")
    endIndex: int = Field(
        ..., description="Node index of the other end point of the arc."
    )
    arcAngle: float = Field(
        ...,
        description="Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment.",
    )


class Field2DCoordinate(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X value of the coordinate.")
    y: float = Field(..., description="Y value of the coordinate.")


class Field3DCoordinate(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X value of the coordinate.")
    y: float = Field(..., description="Y value of the coordinate.")
    z: float = Field(..., description="Z value of the coordinate.")


class Field3DDimensions(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X dimension.")
    y: float = Field(..., description="Y dimension.")
    z: float = Field(..., description="Z dimension.")


class Error(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: int = Field(..., description="The code of the error.")
    message: str = Field(..., description="The error message.")


class ErrorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    error: Error


class SuccessfulExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[True]


class FailedExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[False]
    error: Error = Field(..., description="The details of an execution failure.")


class ExecutionResults(
    RootModel[List[SuccessfulExecutionResult | FailedExecutionResult]]
):
    root: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


ElementType = Literal[
            "Wall",
            "Column",
            "Beam",
            "Window",
            "Door",
            "Object",
            "Lamp",
            "Slab",
            "Roof",
            "Mesh",
            "Dimension",
            "RadialDimension",
            "LevelDimension",
            "AngleDimension",
            "Text",
            "Label",
            "Zone",
            "Hatch",
            "Line",
            "PolyLine",
            "Arc",
            "Circle",
            "Spline",
            "Hotspot",
            "CutPlane",
            "Camera",
            "CamSet",
            "Group",
            "SectElem",
            "Drawing",
            "Picture",
            "Detail",
            "Elevation",
            "InteriorElevation",
            "Worksheet",
            "Hotlink",
            "CurtainWall",
            "CurtainWallSegment",
            "CurtainWallFrame",
            "CurtainWallPanel",
            "CurtainWallJunction",
            "CurtainWallAccessory",
            "Shell",
            "Skylight",
            "Morph",
            "ChangeMarker",
            "Stair",
            "Riser",
            "Tread",
            "StairStructure",
            "Railing",
            "RailingToprail",
            "RailingHandrail",
            "RailingRail",
            "RailingPost",
            "RailingInnerPost",
            "RailingBaluster",
            "RailingPanel",
            "RailingSegment",
            "RailingNode",
            "RailingBalusterSet",
            "RailingPattern",
            "RailingToprailEnd",
            "RailingHandrailEnd",
            "RailingRailEnd",
            "RailingToprailConnection",
            "RailingHandrailConnection",
            "RailingRailConnection",
            "RailingEndFinish",
            "BeamSegment",
            "ColumnSegment",
            "Opening",
            "Unknown",
        ]


ElementFilter = Literal[
            "IsEditable",
            "IsVisibleByLayer",
            "IsVisibleByRenovation",
            "IsVisibleByStructureDisplay",
            "IsVisibleIn3D",
            "OnActualFloor",
            "OnActualLayout",
            "InMyWorkspace",
            "IsIndependent",
            "InCroppedView",
            "HasAccessRight",
            "IsOverriddenByRenovation",
        ]


WindowType = Literal[
            "FloorPlan",
            "Section",
            "Details",
            "3DModel",
            "Layout",
            "Drawing",
            "CustomText",
            "CustomDraw",
            "MasterLayout",
            "Elevation",
            "InteriorElevation",
            "Worksheet",
            "Report",
            "3DDocument",
            "External3D",
            "Movie3D",
            "MovieRendering",
            "Rendering",
            "ModelCompare",
            "Interactive Schedule",
            "Unknown",
        ]


class IssueId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class IssueIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class Issues(RootModel[List[IssueIdArrayItem]]):
    root: List[IssueIdArrayItem] = Field(..., description="A list of Issues.")


IssueElementType = Literal["Creation", "Highlight", "Deletion", "Modification"]


IssueCommentStatus = Literal["Error", "Warning", "Info", "Unknown"]


class PropertyId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class PropertyGroupId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class PropertyIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId


class PropertyIds(RootModel[List[PropertyIdArrayItem]]):
    root: List[PropertyIdArrayItem] = Field(
        ..., description="A list of property identifiers."
    )


class PropertyDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId
    propertyType: Literal["StaticBuiltIn", "DynamicBuiltIn", "Custom"]
    propertyGroupName: str
    propertyName: str
    propertyCollectionType: Literal[
        "Undefined",
        "Single",
        "List",
        "SingleChoiceEnumeration",
        "MultipleChoiceEnumeration",
    ]
    propertyValueType: Literal[
        "Undefined", "Integer", "Real", "String", "Boolean", "Guid"
    ]
    propertyMeasureType: Literal[
        "Undefined", "Default", "Length", "Area", "Volume", "Angle"
    ]
    propertyIsEditable: bool


class PropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    value: str


class PropertyValueOrErrorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValue: PropertyValue


class PropertyValuesOrError(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValues: List[PropertyValueOrErrorItem | ErrorItem] = Field(
        ..., description="A list of property values."
    )


class PropertyValuesOrErrorArray(RootModel[List[PropertyValuesOrError | ErrorItem]]):
    root: List[PropertyValuesOrError | ErrorItem] = Field(
        ..., description="A list of property value lists."
    )


class PropertyIdOrError(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId


class PropertyIdOrErrorArray(RootModel[List[PropertyIdOrError | ErrorItem]]):
    root: List[PropertyIdOrError | ErrorItem] = Field(
        ..., description="A list of property identifiers."
    )


class DisplayValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class EnumValueId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValueId: DisplayValueEnumId | NonLocalizedValueEnumId = Field(
        ..., description="The identifier of a property enumeration value."
    )


class UserUndefinedPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal[
        "number",
        "integer",
        "string",
        "boolean",
        "length",
        "area",
        "volume",
        "angle",
        "numberList",
        "integerList",
        "stringList",
        "booleanList",
        "lengthList",
        "areaList",
        "volumeList",
        "angleList",
        "singleEnum",
        "multiEnum",
    ]
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal[
        "number",
        "integer",
        "string",
        "boolean",
        "length",
        "area",
        "volume",
        "angle",
        "numberList",
        "integerList",
        "stringList",
        "booleanList",
        "lengthList",
        "areaList",
        "volumeList",
        "angleList",
        "singleEnum",
        "multiEnum",
    ]
    status: Literal["notAvailable"]


class NormalNumberPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class NormalSingleEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: DisplayValueEnumId | NonLocalizedValueEnumId = Field(
        ..., description="The identifier of a property enumeration value."
    )


class NormalMultiEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: List[EnumValueId] = Field(
        ..., description="A list of enumeration identifiers."
    )


class ExpressionDefaultValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    expressions: List[str]


class ClassificationSystemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class ClassificationSystemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId


class ClassificationSystemIds(RootModel[List[ClassificationSystemIdArrayItem]]):
    root: List[ClassificationSystemIdArrayItem] = Field(
        ..., description="A list of classification system identifiers."
    )


class ClassificationItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class ClassificationItemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId


class ClassificationId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId
    classificationItemId: ClassificationItemId | None = Field(
        None,
        description="The element's classification in the given system. If no value is specified here, the element is Unclassified in this system.",
    )


class ClassificationIdOrError(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationId: ClassificationId


class ElementClassificationOrError(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationIds: List[ClassificationIdOrError | ErrorItem] = Field(
        ..., description="A list of element classification identifiers or errors."
    )


class ElementClassificationsOrErrors(
    RootModel[List[ElementClassificationOrError | ErrorItem]]
):
    root: List[ElementClassificationOrError | ErrorItem] = Field(
        ..., description="A list of element classification identifiers or errors."
    )


class BoundingBox3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: float = Field(..., description="The minimum X value of the bounding box.")
    yMin: float = Field(..., description="The minimum Y value of the bounding box.")
    zMin: float = Field(..., description="The minimum Z value of the bounding box.")
    xMax: float = Field(..., description="The maximum X value of the bounding box.")
    yMax: float = Field(..., description="The maximum Y value of the bounding box.")
    zMax: float = Field(..., description="The maximum Z value of the bounding box.")


class BoundingBox3DOrError(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBox3D: BoundingBox3D


class BoundingBoxes3D(RootModel[List[BoundingBox3DOrError | ErrorItem]]):
    root: List[BoundingBox3DOrError | ErrorItem] = Field(
        ..., description="A list of 3D bounding boxes."
    )


class LibPartUnId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class LibPartDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    parentUnID: LibPartUnId
    ownUnID: LibPartUnId


class NavigatorItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class DatabaseId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class ViewSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modelViewOptions: str | None = Field(
        None,
        description="The name of the model view options. If empty, the view has custom model view options.",
    )
    layerCombination: str | None = Field(
        None,
        description="The name of the layer combination. If empty, the view has custom layer combination.",
    )


ViewSettingsOrError = ViewSettings | ErrorItem


class Zoom(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: float = Field(..., description="The minimum X value of the zoom box.")
    yMin: float = Field(..., description="The minimum Y value of the zoom box.")
    xMax: float = Field(..., description="The maximum X value of the zoom box.")
    yMax: float = Field(..., description="The maximum Y value of the zoom box.")


class ViewTransformations(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    zoom: Zoom = Field(
        ..., description="The actual zoom parameters, rectangular region of the model."
    )
    rotation: Any = Field(..., description="The orientation in radian.")


ViewTransformationsOrError = ViewTransformations | ErrorItem


class WallDetails(BaseModel):
    geometryType: Literal["Straight", "Trapezoid", "Polygonal"]
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    height: float = Field(..., description="height relative to bottom")
    bottomOffset: float = Field(
        ..., description="base level of the wall relative to the floor level"
    )
    offset: float = Field(..., description="wall's base line's offset from ref. line")
    arcAngle: float | None = Field(
        None, description="The arc angle of the curved wall in radians."
    )
    begThickness: float | None = Field(
        None, description="Thickness at the beginning in case of trapezoid wall"
    )
    endThickness: float | None = Field(
        None, description="Thickness at the end in case of trapezoid wall"
    )
    polygonOutline: List[Field2DCoordinate] | None = Field(
        None, description="Polygon outline in case of polygonal wall"
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon arcs in case of polygonal wall"
    )


class BeamDetails(BaseModel):
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    level: float = Field(
        ..., description="base height of the beam relative to the floor level"
    )
    offset: float = Field(..., description="beam ref.line offset from the center")
    slantAngle: float = Field(
        ..., description="The slant angle of the beam in radians."
    )
    arcAngle: float = Field(
        ..., description="The arc angle of the (horizontally) curved beam in radians."
    )
    verticalCurveHeight: float = Field(
        ..., description="The height of the vertical curve of the beam."
    )


class SlabDetails(BaseModel):
    thickness: float = Field(..., description="Thickness of the slab.")
    level: float = Field(
        ...,
        description="Distance of the reference level of the slab from the floor level.",
    )
    offsetFromTop: float = Field(
        ...,
        description="Vertical distance between the reference level and the top of the slab.",
    )
    zCoordinate: float
    polygonOutline: List[Field2DCoordinate] = Field(
        ..., description="Polygon outline of the slab."
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the slab."
    )
    holes: List[Hole] = Field(..., description="Holes of the slab.")


class ColumnDetails(BaseModel):
    origin: Field2DCoordinate
    zCoordinate: float
    height: float = Field(..., description="height relative to bottom")
    bottomOffset: float = Field(
        ..., description="base level of the column relative to the floor level"
    )


class PolylineDetails(BaseModel):
    coordinates: List[Field2DCoordinate]
    arcs: List[PolyArc] | None = Field(None, description="The arcs of the polyline.")
    zCoordinate: float


class Hole(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: List[Field2DCoordinate] = Field(
        ..., description="The 2D coordinates of the edge of the hole.", min_length=3
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the hole."
    )


class NotYetSupportedElementTypeDetails(BaseModel):
    error: str


class RevisionIssueId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class DocumentRevisionId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class RevisionCustomSchemeDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    customSchemeKey: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )
    customSchemeValue: str


class RevisionIssue(BaseModel):
    revisionIssueId: RevisionIssueId
    id: str
    description: str
    issueTime: str
    issuedByUser: str
    overrideRevisionIDOfAllIncludedLayouts: bool
    createNewRevisionInAllIncludedLayouts: bool
    markersVisibleSinceIndex: int | None = None
    isIssued: bool
    documentRevisions: List[DocumentRevision] | None = Field(
        None, description="All document revisions belong to the given issue."
    )
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class RevisionChange(BaseModel):
    id: str
    description: str
    lastModifiedTime: str
    modifiedByUser: str
    isIssued: bool
    firstRevisionIssueId: RevisionIssueId | None = Field(
        None,
        description="The identifier of the first issue in which the given change is issued.",
    )
    isArchived: bool
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class LayoutInfo(BaseModel):
    id: str
    databaseId: DatabaseId
    name: str
    masterLayoutName: str
    width: float
    height: float
    subsetId: str
    subsetName: str
    ownerUser: str
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class Change(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str


class DocumentRevision(BaseModel):
    revisionId: DocumentRevisionId
    id: str
    finalId: str
    ownerUser: str
    status: Literal["Actual", "Issued"]
    changes: List[Change] | None = Field(
        None, description="All changes belong to the given document revision."
    )
    layoutInfo: LayoutInfo


class RevisionChangesOfEntities(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChanges: List[RevisionChange]


RevisionChangesOfEntities = RevisionChangesOfEntities | ErrorItem


class ElementId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class AttributeId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class GDLParameterList(BaseModel):
    parameters: List[GDLParameterDetails] = Field(
        ..., description="The list of GDL parameters."
    )


class ElementPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: PropertyValue


class ElementPropertyValues(RootModel[List[ElementPropertyValue]]):
    root: List[ElementPropertyValue] = Field(
        ..., description="A list of element property values."
    )


class BasicDefaultValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    basicDefaultValue: (
        NotAvailablePropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue
    ) = Field(
        ...,
        description="A normal, userUndefined, notAvailable or notEvaluated property value.",
    )


PropertyDefaultValue = BasicDefaultValue | ExpressionDefaultValue


class ElementClassification(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    classificationId: ClassificationId


class ElementClassifications(RootModel[List[ElementClassification]]):
    root: List[ElementClassification] = Field(
        ..., description="A list of element classification identifiers."
    )


class NavigatorItemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId


class DatabaseIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    databaseId: DatabaseId


class LinkData(BaseModel):
    referredView: ElementId | None = Field(
        None,
        description="Guid of the referred view. Only if the marker refers to a view.",
    )
    referredDrawing: ElementId | None = Field(
        None,
        description="Guid of the referred drawing. Only if the marker refers to a drawing.",
    )
    referredPMViewPoint: ElementId | None = Field(
        None,
        description="Guid of the referred view point. Only if the marker refers to a view point.",
    )


class DetailWorksheetDetails(BaseModel):
    basePoint: Field2DCoordinate = Field(
        ..., description="Coordinate of the base point"
    )
    angle: float = Field(
        ..., description="The rotation angle (radian) of the marker symbol"
    )
    markerId: ElementId = Field(..., description="Guid of the marker symbol")
    detailName: str = Field(..., description="Name of the detail/worksheet")
    detailIdStr: str = Field(..., description="Reference ID of the detail/worksheet")
    isHorizontalMarker: bool = Field(
        ..., description="Marker symbol is always horizontal?"
    )
    isWindowOpened: bool = Field(
        ..., description="Side (detail/worksheet) window is opened?"
    )
    clipPolygon: List[Field2DCoordinate] = Field(
        ..., description="The clip polygon of the detail/worksheet"
    )
    linkData: LinkData = Field(..., description="The marker link data")


class LibPartBasedElementDetails(BaseModel):
    libPart: LibPartDetails
    ownerElementId: ElementId | None = None


class ZoneDetails(BaseModel):
    name: str = Field(..., description="Name of the zone.")
    numberStr: str = Field(..., description="Zone number.")
    categoryAttributeId: AttributeId = Field(
        ..., description="The identifier of the zone category attribute."
    )
    stampPosition: Field2DCoordinate = Field(
        ..., description="Position of the origin of the zone stamp."
    )
    isManual: bool = Field(
        ..., description="Is the coordinates of the zone manually placed?"
    )
    polygonCoordinates: List[Field2DCoordinate] = Field(
        ..., description="The 2D coordinates of the edge of the zone.", min_length=3
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the zone."
    )
    holes: List[Hole] | None = Field(None, description="Array of parameters of holes.")
    zCoordinate: float


TypeSpecificDetails = WallDetails | BeamDetails | SlabDetails | ColumnDetails | DetailWorksheetDetails | LibPartBasedElementDetails | PolylineDetails | ZoneDetails | NotYetSupportedElementTypeDetails


class ElementIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId


class AttributeIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId


class NavigatorItemIds(RootModel[List[NavigatorItemIdArrayItem]]):
    root: List[NavigatorItemIdArrayItem] = Field(
        ..., description="A list of navigator item identifiers."
    )


class Databases(RootModel[List[DatabaseIdArrayItem]]):
    root: List[DatabaseIdArrayItem] = Field(
        ..., description="A list of Archicad databases."
    )


class Elements(RootModel[List[ElementIdArrayItem]]):
    root: List[ElementIdArrayItem] = Field(..., description="A list of elements.")


class AttributeIds(RootModel[List[AttributeIdArrayItem]]):
    root: List[AttributeIdArrayItem] = Field(..., description="A list of attributes.")


class Hotlink(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    location: str = Field(..., description="The path of the hotlink file.")
    children: List[Hotlink] | None = Field(
        None, description="The children of the hotlink node if it has any."
    )
