# generated by datamodel-codegen:
#   filename:  tapir_master_schema.json
#   timestamp: 2025-06-25T14:25:37+00:00

from __future__ import annotations

from typing import Any, List, Literal, TypedDict

from typing_extensions import NotRequired

TapirMasterModels = Any


AttributeType = Literal[
    "Layer",
    "Line",
    "Fill",
    "Composite",
    "Surface",
    "LayerCombination",
    "ZoneCategory",
    "Profile",
    "PenTable",
    "MEPSystem",
    "OperationProfile",
    "BuildingMaterial",
]


class GDLParameterDetails(TypedDict):
    name: NotRequired[str]
    index: str
    type: str
    dimension1: NotRequired[float]
    dimension2: NotRequired[float]
    value: Any


class PolyArc(TypedDict):
    begIndex: int
    endIndex: int
    arcAngle: float


class Field2DCoordinate(TypedDict):
    x: float
    y: float


class Field3DCoordinate(TypedDict):
    x: float
    y: float
    z: float


class Field3DDimensions(TypedDict):
    x: float
    y: float
    z: float


class Error(TypedDict):
    code: int
    message: str


class ErrorItem(TypedDict):
    error: Error


class SuccessfulExecutionResult(TypedDict):
    success: Literal[True]


class FailedExecutionResult(TypedDict):
    success: Literal[False]
    error: Error


ExecutionResults = List[SuccessfulExecutionResult | FailedExecutionResult]


ElementType = Literal[
    "Wall",
    "Column",
    "Beam",
    "Window",
    "Door",
    "Object",
    "Lamp",
    "Slab",
    "Roof",
    "Mesh",
    "Dimension",
    "RadialDimension",
    "LevelDimension",
    "AngleDimension",
    "Text",
    "Label",
    "Zone",
    "Hatch",
    "Line",
    "PolyLine",
    "Arc",
    "Circle",
    "Spline",
    "Hotspot",
    "CutPlane",
    "Camera",
    "CamSet",
    "Group",
    "SectElem",
    "Drawing",
    "Picture",
    "Detail",
    "Elevation",
    "InteriorElevation",
    "Worksheet",
    "Hotlink",
    "CurtainWall",
    "CurtainWallSegment",
    "CurtainWallFrame",
    "CurtainWallPanel",
    "CurtainWallJunction",
    "CurtainWallAccessory",
    "Shell",
    "Skylight",
    "Morph",
    "ChangeMarker",
    "Stair",
    "Riser",
    "Tread",
    "StairStructure",
    "Railing",
    "RailingToprail",
    "RailingHandrail",
    "RailingRail",
    "RailingPost",
    "RailingInnerPost",
    "RailingBaluster",
    "RailingPanel",
    "RailingSegment",
    "RailingNode",
    "RailingBalusterSet",
    "RailingPattern",
    "RailingToprailEnd",
    "RailingHandrailEnd",
    "RailingRailEnd",
    "RailingToprailConnection",
    "RailingHandrailConnection",
    "RailingRailConnection",
    "RailingEndFinish",
    "BeamSegment",
    "ColumnSegment",
    "Opening",
    "Unknown",
]


ElementFilter = Literal[
    "IsEditable",
    "IsVisibleByLayer",
    "IsVisibleByRenovation",
    "IsVisibleByStructureDisplay",
    "IsVisibleIn3D",
    "OnActualFloor",
    "OnActualLayout",
    "InMyWorkspace",
    "IsIndependent",
    "InCroppedView",
    "HasAccessRight",
    "IsOverriddenByRenovation",
]


WindowType = Literal[
    "FloorPlan",
    "Section",
    "Details",
    "3DModel",
    "Layout",
    "Drawing",
    "CustomText",
    "CustomDraw",
    "MasterLayout",
    "Elevation",
    "InteriorElevation",
    "Worksheet",
    "Report",
    "3DDocument",
    "External3D",
    "Movie3D",
    "MovieRendering",
    "Rendering",
    "ModelCompare",
    "Interactive Schedule",
    "Unknown",
]


class IssueId(TypedDict):
    guid: str


class IssueIdArrayItem(TypedDict):
    issueId: IssueId


Issues = List[IssueIdArrayItem]


IssueElementType = Literal["Creation", "Highlight", "Deletion", "Modification"]


IssueCommentStatus = Literal["Error", "Warning", "Info", "Unknown"]


class PropertyId(TypedDict):
    guid: str


class PropertyGroupId(TypedDict):
    guid: str


class PropertyIdArrayItem(TypedDict):
    propertyId: PropertyId


PropertyIds = List[PropertyIdArrayItem]


class PropertyDetails(TypedDict):
    propertyId: PropertyId
    propertyType: Literal["StaticBuiltIn", "DynamicBuiltIn", "Custom"]
    propertyGroupName: str
    propertyName: str
    propertyCollectionType: Literal[
        "Undefined",
        "Single",
        "List",
        "SingleChoiceEnumeration",
        "MultipleChoiceEnumeration",
    ]
    propertyValueType: Literal[
        "Undefined", "Integer", "Real", "String", "Boolean", "Guid"
    ]
    propertyMeasureType: Literal[
        "Undefined", "Default", "Length", "Area", "Volume", "Angle"
    ]
    propertyIsEditable: bool


class PropertyValue(TypedDict):
    value: str


class PropertyValueOrErrorItem1(TypedDict):
    propertyValue: PropertyValue


class PropertyValuesOrError1(TypedDict):
    propertyValues: List[PropertyValueOrErrorItem1 | ErrorItem]


PropertyValuesOrErrorArray = List[PropertyValuesOrError1 | ErrorItem]


class PropertyIdOrError1(TypedDict):
    propertyId: PropertyId


PropertyIdOrErrorArray = List[PropertyIdOrError1 | ErrorItem]


class DisplayValueEnumId(TypedDict):
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(TypedDict):
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class EnumValueId1(TypedDict):
    enumValueId: DisplayValueEnumId | NonLocalizedValueEnumId


class UserUndefinedPropertyValue(TypedDict):
    type: Literal[
        "number",
        "integer",
        "string",
        "boolean",
        "length",
        "area",
        "volume",
        "angle",
        "numberList",
        "integerList",
        "stringList",
        "booleanList",
        "lengthList",
        "areaList",
        "volumeList",
        "angleList",
        "singleEnum",
        "multiEnum",
    ]
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(TypedDict):
    type: Literal[
        "number",
        "integer",
        "string",
        "boolean",
        "length",
        "area",
        "volume",
        "angle",
        "numberList",
        "integerList",
        "stringList",
        "booleanList",
        "lengthList",
        "areaList",
        "volumeList",
        "angleList",
        "singleEnum",
        "multiEnum",
    ]
    status: Literal["notAvailable"]


class NormalNumberPropertyValue(TypedDict):
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(TypedDict):
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(TypedDict):
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(TypedDict):
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(TypedDict):
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(TypedDict):
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(TypedDict):
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(TypedDict):
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(TypedDict):
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(TypedDict):
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(TypedDict):
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(TypedDict):
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(TypedDict):
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(TypedDict):
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(TypedDict):
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(TypedDict):
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class NormalSingleEnumPropertyValue(TypedDict):
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: DisplayValueEnumId | NonLocalizedValueEnumId


class NormalMultiEnumPropertyValue(TypedDict):
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: List[EnumValueId1]


class ExpressionDefaultValue(TypedDict):
    expressions: List[str]


class ClassificationSystemId(TypedDict):
    guid: str


class ClassificationSystemIdArrayItem(TypedDict):
    classificationSystemId: ClassificationSystemId


ClassificationSystemIds = List[ClassificationSystemIdArrayItem]


class ClassificationItemId(TypedDict):
    guid: str


class ClassificationItemIdArrayItem(TypedDict):
    classificationItemId: ClassificationItemId


class ClassificationId(TypedDict):
    classificationSystemId: ClassificationSystemId
    classificationItemId: NotRequired[ClassificationItemId]


class ClassificationIdOrError1(TypedDict):
    classificationId: ClassificationId


class ElementClassificationOrError1(TypedDict):
    classificationIds: List[ClassificationIdOrError1 | ErrorItem]


ElementClassificationsOrErrors = List[ElementClassificationOrError1 | ErrorItem]


class BoundingBox3D(TypedDict):
    xMin: float
    yMin: float
    zMin: float
    xMax: float
    yMax: float
    zMax: float


class BoundingBox3DOrError1(TypedDict):
    boundingBox3D: BoundingBox3D


BoundingBoxes3D = List[BoundingBox3DOrError1 | ErrorItem]


class LibPartUnId(TypedDict):
    guid: str


class LibPartDetails(TypedDict):
    name: str
    parentUnID: LibPartUnId
    ownUnID: LibPartUnId


class NavigatorItemId(TypedDict):
    guid: str


class DatabaseId(TypedDict):
    guid: str


class ViewSettings(TypedDict):
    modelViewOptions: NotRequired[str]
    layerCombination: NotRequired[str]


ViewSettingsOrError = ViewSettings | ErrorItem


class Zoom(TypedDict):
    xMin: float
    yMin: float
    xMax: float
    yMax: float


class ViewTransformations(TypedDict):
    zoom: Zoom
    rotation: Any


ViewTransformationsOrError = ViewTransformations | ErrorItem


class WallDetails(TypedDict):
    geometryType: Literal["Straight", "Trapezoid", "Polygonal"]
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float
    offset: float
    arcAngle: NotRequired[float]
    begThickness: NotRequired[float]
    endThickness: NotRequired[float]
    polygonOutline: NotRequired[List[Field2DCoordinate]]
    polygonArcs: NotRequired[List[PolyArc]]


class BeamDetails(TypedDict):
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    level: float
    offset: float
    slantAngle: float
    arcAngle: float
    verticalCurveHeight: float


class Hole(TypedDict):
    polygonOutline: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class SlabDetails(TypedDict):
    thickness: float
    level: float
    offsetFromTop: float
    zCoordinate: float
    polygonOutline: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: List[Hole]


class ColumnDetails(TypedDict):
    origin: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float


class PolylineDetails(TypedDict):
    coordinates: List[Field2DCoordinate]
    arcs: NotRequired[List[PolyArc]]
    zCoordinate: float


class Hole1(TypedDict):
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class NotYetSupportedElementTypeDetails(TypedDict):
    error: str


class RevisionIssueId(TypedDict):
    guid: str


class DocumentRevisionId(TypedDict):
    guid: str


class RevisionCustomSchemeDatum(TypedDict):
    customSchemeKey: str
    customSchemeValue: str


class DocumentRevision(TypedDict):
    revisionId: DocumentRevisionId


class RevisionIssue(TypedDict):
    revisionIssueId: RevisionIssueId
    id: str
    description: str
    issueTime: str
    issuedByUser: str
    overrideRevisionIDOfAllIncludedLayouts: bool
    createNewRevisionInAllIncludedLayouts: bool
    markersVisibleSinceIndex: NotRequired[int]
    isIssued: bool
    documentRevisions: NotRequired[List[DocumentRevision]]
    customSchemeData: NotRequired[List[RevisionCustomSchemeDatum]]


class RevisionChange(TypedDict):
    id: str
    description: str
    lastModifiedTime: str
    modifiedByUser: str
    isIssued: bool
    firstRevisionIssueId: NotRequired[RevisionIssueId]
    isArchived: bool
    customSchemeData: NotRequired[List[RevisionCustomSchemeDatum]]


class LayoutInfo(TypedDict):
    id: str
    databaseId: DatabaseId
    name: str
    masterLayoutName: str
    width: float
    height: float
    subsetId: str
    subsetName: str
    ownerUser: str
    customSchemeData: NotRequired[List[RevisionCustomSchemeDatum]]


class Change(TypedDict):
    id: str


class DocumentRevision1(TypedDict):
    revisionId: DocumentRevisionId
    id: str
    finalId: str
    ownerUser: str
    status: Literal["Actual", "Issued"]
    changes: NotRequired[List[Change]]
    layoutInfo: LayoutInfo


class RevisionChangesOfEntities1(TypedDict):
    revisionChanges: List[RevisionChange]


RevisionChangesOfEntities = RevisionChangesOfEntities1 | ErrorItem


class ElementId(TypedDict):
    guid: str


class AttributeId(TypedDict):
    guid: str


class GDLParameterList(TypedDict):
    parameters: List[GDLParameterDetails]


class ElementPropertyValue(TypedDict):
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: PropertyValue


ElementPropertyValues = List[ElementPropertyValue]


class BasicDefaultValue(TypedDict):
    basicDefaultValue: (
        NotAvailablePropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue
    )


PropertyDefaultValue = BasicDefaultValue | ExpressionDefaultValue


class ElementClassification(TypedDict):
    elementId: ElementId
    classificationId: ClassificationId


ElementClassifications = List[ElementClassification]


class NavigatorItemIdArrayItem(TypedDict):
    navigatorItemId: NavigatorItemId


class DatabaseIdArrayItem(TypedDict):
    databaseId: DatabaseId


class LinkData(TypedDict):
    referredView: NotRequired[ElementId]
    referredDrawing: NotRequired[ElementId]
    referredPMViewPoint: NotRequired[ElementId]


class DetailWorksheetDetails(TypedDict):
    basePoint: Field2DCoordinate
    angle: float
    markerId: ElementId
    detailName: str
    detailIdStr: str
    isHorizontalMarker: bool
    isWindowOpened: bool
    clipPolygon: List[Field2DCoordinate]
    linkData: LinkData


class LibPartBasedElementDetails(TypedDict):
    libPart: LibPartDetails
    ownerElementId: NotRequired[ElementId]


class ZoneDetails(TypedDict):
    name: str
    numberStr: str
    categoryAttributeId: AttributeId
    stampPosition: Field2DCoordinate
    isManual: bool
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole1]]
    zCoordinate: float


TypeSpecificDetails = (
    WallDetails
    | BeamDetails
    | SlabDetails
    | ColumnDetails
    | DetailWorksheetDetails
    | LibPartBasedElementDetails
    | PolylineDetails
    | ZoneDetails
    | NotYetSupportedElementTypeDetails
)


class ElementIdArrayItem(TypedDict):
    elementId: ElementId


class AttributeIdArrayItem(TypedDict):
    attributeId: AttributeId


NavigatorItemIds = List[NavigatorItemIdArrayItem]


Databases = List[DatabaseIdArrayItem]


Elements = List[ElementIdArrayItem]


AttributeIds = List[AttributeIdArrayItem]


class Hotlink(TypedDict):
    location: str
    children: NotRequired[List[Hotlink]]
