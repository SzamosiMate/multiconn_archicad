from __future__ import annotations
from typing import Annotated, List
from pydantic import ConfigDict, Field, RootModel

from multiconn_archicad.models.base import APIModel

### This file is automatically generated and split. Do not edit directly. ###


from .types import (
    AddOnCommandId,
    AddOnCommandParameters,
    AddOnCommandResponse,
    AttributeFolderCreationParameters,
    AttributeFolderId,
    AttributeFolderIdWrapperItem,
    AttributeFolderName,
    AttributeFolderRenameParameters,
    AttributeFolderStructure,
    AttributeFolderWrapperItem,
    AttributeIdWrapperItem,
    AttributeIndexAndGuidWrapperItem,
    AttributeType,
    BoundingBox2DWrapperItem,
    BoundingBox3DWrapperItem,
    BuildingMaterialAttributeWrapperItem,
    BuiltInContainerNavigatorItemWrapperItem,
    BuiltInPropertyUserId,
    ClassificationItemArrayItem,
    ClassificationItemAvailabilityWrapperItem,
    ClassificationItemId,
    ClassificationItemIdArrayItem,
    ClassificationItemWrapperItem,
    ClassificationSystem,
    ClassificationSystemId,
    ClassificationSystemIdArrayItem,
    ClassificationSystemWrapperItem,
    CompositeAttributeWrapperItem,
    DetailNavigatorItemWrapperItem,
    Document3DNavigatorItemWrapperItem,
    ElementClassification,
    ElementClassificationWrapperItem,
    ElementComponentIdArrayItem,
    ElementComponentsWrapper,
    ElementIdArrayItem,
    ElementPropertyValue,
    ElementType,
    ElementsWrapper,
    ElevationNavigatorItemWrapperItem,
    ErrorItem,
    FailedExecutionResult,
    FillAttributeWrapperItem,
    FolderParameters,
    ImageWrapperItem,
    InteriorElevationNavigatorItemWrapperItem,
    LayerAttributeWrapperItem,
    LayerCombinationAttributeWrapperItem,
    LayoutParameters,
    LineAttributeWrapperItem,
    NavigatorItemId,
    NavigatorItemIdAndTypeWrapperItem,
    NavigatorItemIdWrapperItem,
    NavigatorTree,
    OtherNavigatorTreeId,
    PenTableAttributeWrapperItem,
    ProfileAttributeWrapperItem,
    PropertyDefinitionAvailabilityWrapperItem,
    PropertyDefinitionWrapperItem,
    PropertyGroupIdArrayItem,
    PropertyGroupWrapperItem,
    PropertyIdArrayItem,
    PropertyIdsOfElementWrapperItem,
    PropertyType,
    PropertyValuesWrapperItem,
    PublisherSetId,
    RGBColor,
    RenameNavigatorItemById,
    RenameNavigatorItemByName,
    RenameNavigatorItemByNameAndId,
    SectionNavigatorItemWrapperItem,
    StoryNavigatorItemWrapperItem,
    Subset,
    SuccessfulExecutionResult,
    SurfaceAttributeWrapperItem,
    TypeOfElementWrapperItem,
    UserDefinedPropertyUserId,
    WorksheetNavigatorItemWrapperItem,
    ZoneCategoryAttributeWrapperItem,
)


class GetProductInfoResult(APIModel):
    version: Annotated[int, Field(description="The version of the running Archicad.")]
    buildNumber: Annotated[int, Field(description="The build number of the running Archicad.")]
    languageCode: Annotated[str, Field(description="The language code of the running Archicad.")]


class GetPublisherSetNamesResult(APIModel):
    publisherSetNames: Annotated[List[str], Field(description="The names of available publisher sets.")]


class GetSelectedElementsParameters(APIModel):
    onlyEditable: Annotated[
        bool | None,
        Field(
            description="Optional parameter that defines whether the selection list should include only the editable elements or all of them. The default value is FALSE"
        ),
    ] = None
    onlySupportedTypes: Annotated[
        bool | None,
        Field(
            description="Optional parameter. When it is set to true, only elements with types that are supported by any other JSON API command will be returned."
        ),
    ] = None


class IsAddOnCommandAvailableResult(APIModel):
    available: Annotated[bool, Field(description="Returns true if the command is available.")]


class IsAliveResult(APIModel):
    isAlive: Annotated[bool, Field(description="Returns true if the connection is alive.")]


class CreateAttributeFoldersParameters(APIModel):
    attributeFolders: List[AttributeFolderCreationParameters]


class CreateAttributeFoldersResult(APIModel):
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class DeleteAttributeFoldersResult(APIModel):
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class DeleteAttributesResult(APIModel):
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class DeleteNavigatorItemsResult(APIModel):
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class ExecuteAddOnCommandParameters(APIModel):
    model_config = ConfigDict(
        extra="allow",
    )
    addOnCommandId: AddOnCommandId
    addOnCommandParameters: AddOnCommandParameters | None = None


class ExecuteAddOnCommandResult(APIModel):
    model_config = ConfigDict(
        extra="allow",
    )
    addOnCommandResponse: AddOnCommandResponse


class Get2DBoundingBoxesParameters(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class Get2DBoundingBoxesResult(APIModel):
    boundingBoxes2D: Annotated[
        List[BoundingBox2DWrapperItem | ErrorItem],
        Field(description="A list of 2D bounding boxes."),
    ]


class Get3DBoundingBoxesParameters(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class Get3DBoundingBoxesResult(APIModel):
    boundingBoxes3D: Annotated[
        List[BoundingBox3DWrapperItem | ErrorItem],
        Field(description="A list of 3D bounding boxes."),
    ]


class GetAllElementsResult(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class GetAllPropertyGroupIdsParameters(APIModel):
    propertyType: PropertyType | None = None


class GetAllPropertyIdsParameters(APIModel):
    propertyType: PropertyType | None = None


class GetAllPropertyIdsOfElementsParameters(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]
    propertyType: PropertyType | None = None


class GetAllPropertyNamesResult(APIModel):
    properties: Annotated[
        List[UserDefinedPropertyUserId | BuiltInPropertyUserId],
        Field(description="A list of PropertyUserId objects."),
    ]


class GetAttributeFolderStructureParameters(APIModel):
    attributeType: AttributeType
    path: Annotated[
        List[AttributeFolderName] | None,
        Field(description="A list of attribute folder names. May be empty."),
    ] = None


class GetAttributesByTypeParameters(APIModel):
    attributeType: AttributeType


class GetComponentsOfElementsParameters(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class GetComponentsOfElementsResult(APIModel):
    componentsOfElements: Annotated[
        List[ElementComponentsWrapper | ErrorItem],
        Field(description="Array of component list or error."),
    ]


class GetElementsByClassificationResult(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class GetElementsByTypeParameters(APIModel):
    elementType: ElementType


class GetElementsByTypeResult(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class GetElementsRelatedToZonesParameters(APIModel):
    zones: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]
    elementTypes: Annotated[
        List[ElementType] | None,
        Field(
            description="If this parameter is given, then only related elements with the requested types will be listed."
        ),
    ] = None


class GetElementsRelatedToZonesResult(APIModel):
    elementsRelatedToZones: Annotated[
        List[ElementsWrapper | ErrorItem],
        Field(description="A list of ElementsOrError items."),
    ]


class GetLayoutSettingsResult(APIModel):
    layoutParameters: LayoutParameters


class GetNavigatorItemTreeParameters(APIModel):
    navigatorTreeId: Annotated[
        PublisherSetId | OtherNavigatorTreeId,
        Field(description="The identifier of a navigator item tree."),
    ]


class GetProfileAttributePreviewResult(APIModel):
    previewImages: Annotated[
        List[ImageWrapperItem | ErrorItem],
        Field(description="The preview images of the profiles."),
    ]


class GetPropertyIdsParameters(APIModel):
    properties: Annotated[
        List[UserDefinedPropertyUserId | BuiltInPropertyUserId],
        Field(description="List of property names whose ids are requested."),
    ]


class GetSelectedElementsResult(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class GetTypesOfElementsParameters(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class GetTypesOfElementsResult(APIModel):
    typesOfElements: Annotated[
        List[TypeOfElementWrapperItem | ErrorItem],
        Field(description="A list of element types or errors."),
    ]


class IsAddOnCommandAvailableParameters(APIModel):
    addOnCommandId: AddOnCommandId


class RenameAttributeFoldersResult(APIModel):
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class SetClassificationsOfElementsResult(APIModel):
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class SetPropertyValuesOfElementsResult(APIModel):
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CloneProjectMapItemToViewMapParameters(APIModel):
    projectMapNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(
            description="The ID of the navigator item to be cloned. Only navigator items from the project map can be cloned."
        ),
    ]
    parentNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(
            description="The ID of the navigator item below which the new view will be inserted. Only navigator items from the view map are allowed."
        ),
    ]


class CloneProjectMapItemToViewMapResult(APIModel):
    createdNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(description="The ID of the new navigator item in view map."),
    ]


class CreateLayoutParameters(APIModel):
    layoutName: Annotated[str, Field(description="The name of the layout.", min_length=1)]
    layoutParameters: LayoutParameters
    masterNavigatorItemId: NavigatorItemId
    parentNavigatorItemId: NavigatorItemId


class CreateLayoutResult(APIModel):
    createdNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(description="The ID of the new layout navigator item in the layout book."),
    ]


class CreateLayoutSubsetParameters(APIModel):
    subsetParameters: Subset
    parentNavigatorItemId: NavigatorItemId


class CreateLayoutSubsetResult(APIModel):
    createdSubsetId: Annotated[
        NavigatorItemId,
        Field(description="The ID of the new subset navigator item in the layout book."),
    ]


class CreateViewMapFolderParameters(APIModel):
    folderParameters: Annotated[FolderParameters, Field(description="This is the name of the new folder.")]
    parentNavigatorItemId: Annotated[
        NavigatorItemId | None,
        Field(
            description="The newly created folder will be placed under this parent item. If this parameter is not given the folder will be created as the first item in the View Map list."
        ),
    ] = None
    previousNavigatorItemId: Annotated[
        NavigatorItemId | None,
        Field(
            description="The newly created folder will be placed after this sibling item. If this parameter is not given the folder will be created as the first item under the parent."
        ),
    ] = None


class CreateViewMapFolderResult(APIModel):
    createdFolderNavigatorItemId: NavigatorItemId


class DeleteAttributeFoldersParameters(APIModel):
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]


class DeleteAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class DeleteNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetActivePenTablesResult(APIModel):
    modelViewPenTableId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="Model view pen table identifier or an error."),
    ]
    layoutBookPenTableId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="Layout book pen table identifier or an error."),
    ]


class GetAllClassificationsInSystemParameters(APIModel):
    classificationSystemId: ClassificationSystemId


class GetAllClassificationSystemsResult(APIModel):
    classificationSystems: Annotated[
        List[ClassificationSystem],
        Field(description="A list of classification systems."),
    ]


class GetAllPropertyGroupIdsResult(APIModel):
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="A list of property group identifiers."),
    ]


class GetAllPropertyIdsResult(APIModel):
    propertyIds: Annotated[List[PropertyIdArrayItem], Field(description="A list of property identifiers.")]


class GetAllPropertyIdsOfElementsResult(APIModel):
    propertyIdsOfElements: Annotated[
        List[PropertyIdsOfElementWrapperItem | ErrorItem],
        Field(description="A list of property identifiers of elements or errors."),
    ]


class GetAttributeFoldersParameters(APIModel):
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]


class GetAttributeFoldersResult(APIModel):
    attributeFolders: Annotated[
        List[AttributeFolderWrapperItem | ErrorItem],
        Field(description="A list of attribute folders."),
    ]


class GetAttributesByTypeResult(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetAttributesIndicesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetAttributesIndicesResult(APIModel):
    attributeIndicesAndGuids: Annotated[
        List[AttributeIndexAndGuidWrapperItem | ErrorItem],
        Field(description="A list of complete attribute identifiers."),
    ]


class GetBuildingMaterialAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetBuildingMaterialAttributesResult(APIModel):
    attributes: Annotated[
        List[BuildingMaterialAttributeWrapperItem | ErrorItem],
        Field(description="A list of building material attributes and potential errors."),
    ]


class GetBuiltInContainerNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetBuiltInContainerNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[BuiltInContainerNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of built-in container navigator items."),
    ]


class GetClassificationItemAvailabilityParameters(APIModel):
    classificationItemIds: Annotated[
        List[ClassificationItemIdArrayItem],
        Field(description="A list of classification item identifiers."),
    ]


class GetClassificationsOfElementsParameters(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class GetClassificationsOfElementsResult(APIModel):
    elementClassifications: Annotated[
        List[ElementClassificationWrapperItem | ErrorItem],
        Field(
            description="The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects."
        ),
    ]


class GetClassificationSystemIdsResult(APIModel):
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class GetClassificationSystemsParameters(APIModel):
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class GetClassificationSystemsResult(APIModel):
    classificationSystems: Annotated[
        List[ClassificationSystemWrapperItem | ErrorItem],
        Field(description="A list of classification systems or errors."),
    ]


class GetCompositeAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetCompositeAttributesResult(APIModel):
    attributes: Annotated[
        List[CompositeAttributeWrapperItem | ErrorItem],
        Field(description="A list of the composite attributes and potential errors."),
    ]


class GetDetailNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetDetailNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[DetailNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of detail navigator items."),
    ]


class GetDetailsOfClassificationItemsParameters(APIModel):
    classificationItemIds: Annotated[
        List[ClassificationItemIdArrayItem],
        Field(description="A list of classification item identifiers."),
    ]


class GetDetailsOfPropertiesParameters(APIModel):
    properties: Annotated[List[PropertyIdArrayItem], Field(description="A list of property identifiers.")]


class GetDocument3DNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetDocument3DNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[Document3DNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of 3D document navigator items."),
    ]


class GetElementsByClassificationParameters(APIModel):
    classificationItemId: ClassificationItemId


class GetElevationNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetElevationNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[ElevationNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of elevation navigator items."),
    ]


class GetFillAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetFillAttributesResult(APIModel):
    attributes: Annotated[
        List[FillAttributeWrapperItem | ErrorItem],
        Field(description="A list of fill attributes and potential errors."),
    ]


class GetInteriorElevationNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetInteriorElevationNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[InteriorElevationNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of interior elevation navigator items."),
    ]


class GetLayerAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetLayerAttributesResult(APIModel):
    attributes: Annotated[
        List[LayerAttributeWrapperItem | ErrorItem],
        Field(description="A list of layer attributes and potential errors."),
    ]


class GetLayerCombinationAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetLayoutSettingsParameters(APIModel):
    layoutNavigatorItemId: NavigatorItemId


class GetLineAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetLineAttributesResult(APIModel):
    attributes: Annotated[
        List[LineAttributeWrapperItem | ErrorItem],
        Field(description="A list of line attributes and potential errors."),
    ]


class GetNavigatorItemsTypeParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetNavigatorItemsTypeResult(APIModel):
    navigatorItemIdAndTypeList: Annotated[
        List[NavigatorItemIdAndTypeWrapperItem | ErrorItem],
        Field(description="A list of objects that consist of a navigator item identifier and a type."),
    ]


class GetPenTableAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetProfileAttributePreviewParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]
    imageWidth: Annotated[int, Field(description="The width of the preview image.")]
    imageHeight: Annotated[int, Field(description="The height of the preview image.")]
    backgroundColor: Annotated[RGBColor | None, Field(description="The background color of the preview image.")] = None


class GetProfileAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetProfileAttributesResult(APIModel):
    attributes: Annotated[
        List[ProfileAttributeWrapperItem | ErrorItem],
        Field(description="A list of the profile attributes and potential errors."),
    ]


class GetPropertyDefinitionAvailabilityParameters(APIModel):
    propertyIds: Annotated[List[PropertyIdArrayItem], Field(description="A list of property identifiers.")]


class GetPropertyGroupsParameters(APIModel):
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="A list of property group identifiers."),
    ]


class GetPropertyGroupsResult(APIModel):
    propertyGroups: Annotated[
        List[PropertyGroupWrapperItem | ErrorItem],
        Field(description="A list of property groups or errors."),
    ]


class GetPropertyIdsResult(APIModel):
    properties: Annotated[
        List[PropertyIdArrayItem | ErrorItem],
        Field(
            description="List of the ids of the requested properties. Order of the ids are the same as in the input. Existing properties are represented by propertyId objects, non-existing properties are represented by error objects."
        ),
    ]


class GetPropertyValuesOfElementComponentsParameters(APIModel):
    elementComponents: Annotated[
        List[ElementComponentIdArrayItem],
        Field(description="List of components of elements."),
    ]
    properties: Annotated[List[PropertyIdArrayItem], Field(description="A list of property identifiers.")]


class GetPropertyValuesOfElementComponentsResult(APIModel):
    propertyValuesForElementComponents: Annotated[
        List[PropertyValuesWrapperItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given components. The order of the inner lists are that of the given properties."
        ),
    ]


class GetPropertyValuesOfElementsParameters(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]
    properties: Annotated[List[PropertyIdArrayItem], Field(description="A list of property identifiers.")]


class GetPropertyValuesOfElementsResult(APIModel):
    propertyValuesForElements: Annotated[
        List[PropertyValuesWrapperItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."
        ),
    ]


class GetSectionNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetSectionNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[SectionNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of section navigator items."),
    ]


class GetStoryNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetStoryNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[StoryNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of story navigator items."),
    ]


class GetSurfaceAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetSurfaceAttributesResult(APIModel):
    attributes: Annotated[
        List[SurfaceAttributeWrapperItem | ErrorItem],
        Field(description="A list of surface attributes and potential errors."),
    ]


class GetWorksheetNavigatorItemsParameters(APIModel):
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetWorksheetNavigatorItemsResult(APIModel):
    navigatorItems: Annotated[
        List[WorksheetNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of worksheet navigator items."),
    ]


class GetZoneCategoryAttributesParameters(APIModel):
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetZoneCategoryAttributesResult(APIModel):
    attributes: Annotated[
        List[ZoneCategoryAttributeWrapperItem | ErrorItem],
        Field(description="A list of zone category attributes and potential errors."),
    ]


class MoveAttributesAndFoldersParameters(APIModel):
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]
    targetFolderId: AttributeFolderId


class MoveNavigatorItemParameters(APIModel):
    navigatorItemIdToMove: NavigatorItemId
    parentNavigatorItemId: NavigatorItemId
    previousNavigatorItemId: NavigatorItemId | None = None


class RenameAttributeFoldersParameters(APIModel):
    attributeFolderParametersList: List[AttributeFolderRenameParameters]


class RenameNavigatorItemParameters(
    RootModel[RenameNavigatorItemByName | RenameNavigatorItemById | RenameNavigatorItemByNameAndId]
):
    root: RenameNavigatorItemByName | RenameNavigatorItemById | RenameNavigatorItemByNameAndId


class SetClassificationsOfElementsParameters(APIModel):
    elementClassifications: Annotated[
        List[ElementClassification],
        Field(description="A list of element classification identifiers."),
    ]


class SetLayoutSettingsParameters(APIModel):
    layoutParameters: LayoutParameters
    layoutNavigatorItemId: NavigatorItemId


class SetPropertyValuesOfElementsParameters(APIModel):
    elementPropertyValues: Annotated[
        List[ElementPropertyValue],
        Field(description="A list of element property values."),
    ]


class GetClassificationItemAvailabilityResult(APIModel):
    classificationItemAvailabilityList: Annotated[
        List[ClassificationItemAvailabilityWrapperItem | ErrorItem],
        Field(description="A list of classification item avalabilities."),
    ]


class GetDetailsOfClassificationItemsResult(APIModel):
    classificationItems: Annotated[
        List[ClassificationItemWrapperItem | ErrorItem],
        Field(description="A list of classification items or errors."),
    ]


class GetDetailsOfPropertiesResult(APIModel):
    propertyDefinitions: Annotated[
        List[PropertyDefinitionWrapperItem | ErrorItem],
        Field(description="A list of property definitions or errors."),
    ]


class GetLayerCombinationAttributesResult(APIModel):
    attributes: Annotated[
        List[LayerCombinationAttributeWrapperItem | ErrorItem],
        Field(description="A list of layer combination attributes and potential errors."),
    ]


class GetPenTableAttributesResult(APIModel):
    attributes: Annotated[
        List[PenTableAttributeWrapperItem | ErrorItem],
        Field(description="A list of pen table attributes and potential errors."),
    ]


class GetPropertyDefinitionAvailabilityResult(APIModel):
    propertyDefinitionAvailabilityList: Annotated[
        List[PropertyDefinitionAvailabilityWrapperItem | ErrorItem],
        Field(description="A list of classification item avalabilities."),
    ]


class GetAllClassificationsInSystemResult(APIModel):
    classificationItems: Annotated[
        List[ClassificationItemArrayItem],
        Field(description="A list of classification items."),
    ]


class GetAttributeFolderStructureResult(APIModel):
    attributeFolder: AttributeFolderStructure


class GetNavigatorItemTreeResult(APIModel):
    navigatorTree: NavigatorTree
