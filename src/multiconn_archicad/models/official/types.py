from __future__ import annotations
from typing import Annotated, List, Literal, TypeAlias
from uuid import UUID
from enum import Enum
from pydantic import ConfigDict, Field

from multiconn_archicad.models.base import APIModel

### This file is automatically generated and split. Do not edit directly. ###


class AddOnCommandId(APIModel):
    commandNamespace: Annotated[str, Field(description="The namespace of the Add-On command.", min_length=1)]
    commandName: Annotated[str, Field(description="The name of the Add-On command.", min_length=1)]


class AddOnCommandIdArrayItem(APIModel):
    addOnCommandId: AddOnCommandId


AddOnCommandIds: TypeAlias = List[AddOnCommandIdArrayItem]


class AddOnCommandParameters(APIModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class AddOnCommandResponse(APIModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class AttributeType(Enum):
    BuildingMaterial = "BuildingMaterial"
    Composite = "Composite"
    Fill = "Fill"
    Layer = "Layer"
    LayerCombination = "LayerCombination"
    Line = "Line"
    PenTable = "PenTable"
    Profile = "Profile"
    Surface = "Surface"
    ZoneCategory = "ZoneCategory"


AttributeFolderName: TypeAlias = str


class AttributeFolderCreationParameters(APIModel):
    attributeType: AttributeType
    path: Annotated[
        List[AttributeFolderName],
        Field(description="A list of attribute folder names. May be empty."),
    ]


class AppearanceType(Enum):
    ScaleWithPlan = "ScaleWithPlan"
    ScaleIndependent = "ScaleIndependent"


class FillTypeId(Enum):
    Vector = "Vector"
    Symbol = "Symbol"
    Solid = "Solid"
    Empty = "Empty"
    LinearGradient = "LinearGradient"
    RadialGradient = "RadialGradient"
    Image = "Image"


class MaterialTypeId(Enum):
    General = "General"
    Simple = "Simple"
    Matte = "Matte"
    Metal = "Metal"
    Plastic = "Plastic"
    Glass = "Glass"
    Glowing = "Glowing"
    Constant = "Constant"


class ProfileModifier(APIModel):
    name: Annotated[str, Field(description="The name of the modifier.")]
    value: Annotated[float, Field(description="The value of the modifier.")]


class ProfileModifierListItem(APIModel):
    profileModifier: ProfileModifier


class Texture(APIModel):
    name: Annotated[str, Field(description="The name of the texture.")]


class LineType(Enum):
    SolidLine = "SolidLine"
    DashedLine = "DashedLine"
    SymbolLine = "SymbolLine"


class LineItemType(Enum):
    IllegalItemType = "IllegalItemType"
    SeparatorItemType = "SeparatorItemType"
    CenterDotItemType = "CenterDotItemType"
    CenterLineItemType = "CenterLineItemType"
    DotItemType = "DotItemType"
    RightAngleItemType = "RightAngleItemType"
    ParallelItemType = "ParallelItemType"
    LineItemType = "LineItemType"
    CircItemType = "CircItemType"
    ArcItemType = "ArcItemType"


class DashItem(APIModel):
    dash: Annotated[float, Field(description="The length of the dash.")]
    gap: Annotated[float, Field(description="The length of the gap.")]


class DashItemWrapperItem(APIModel):
    dashItem: DashItem


class Point2D(APIModel):
    x: Annotated[float, Field(description="X coordinate of 2D point")]
    y: Annotated[float, Field(description="Y coordinate of 2D point")]


class NavigatorItemType(Enum):
    UndefinedItem = "UndefinedItem"
    ProjectMapRootItem = "ProjectMapRootItem"
    StoryItem = "StoryItem"
    SectionItem = "SectionItem"
    ElevationItem = "ElevationItem"
    InteriorElevationItem = "InteriorElevationItem"
    WorksheetItem = "WorksheetItem"
    DetailItem = "DetailItem"
    DocumentFrom3DItem = "DocumentFrom3DItem"
    Perspective3DItem = "Perspective3DItem"
    Axonometry3DItem = "Axonometry3DItem"
    CameraSetItem = "CameraSetItem"
    CameraItem = "CameraItem"
    ScheduleItem = "ScheduleItem"
    ProjectIndexItem = "ProjectIndexItem"
    TextListItem = "TextListItem"
    GraphicListItem = "GraphicListItem"
    InfoItem = "InfoItem"
    HelpItem = "HelpItem"
    FolderItem = "FolderItem"
    LayoutBookRootItem = "LayoutBookRootItem"
    SubsetItem = "SubsetItem"
    LayoutItem = "LayoutItem"
    DrawingItem = "DrawingItem"
    MasterFolderItem = "MasterFolderItem"
    MasterLayoutItem = "MasterLayoutItem"


class NavigatorItemMapType(Enum):
    ProjectMap = "ProjectMap"
    ViewMap = "ViewMap"
    MyViewMap = "MyViewMap"
    LayoutBook = "LayoutBook"


class PublisherSetId(APIModel):
    type: Annotated[
        Literal["PublisherSets"],
        Field(description="The type of the navigator item tree."),
    ]
    name: Annotated[str, Field(description="The name of the publisher set.")]


class OtherNavigatorTreeId(APIModel):
    type: NavigatorItemMapType


class UserDefinedPropertyUserId(APIModel):
    type: Literal["UserDefined"]
    localizedName: Annotated[
        List[str],
        Field(
            description="A two-element list of the localized name parts. The first element is the name of the group the property belongs to, and the second element is the actual name of the property.",
            max_length=2,
            min_length=2,
        ),
    ]


class BuiltInPropertyUserId(APIModel):
    type: Literal["BuiltIn"]
    nonLocalizedName: Annotated[str, Field(description="The non-localized name of the Built-In Property.")]


class PropertyType(Enum):
    UserDefined = "UserDefined"
    BuiltIn = "BuiltIn"


class NormalNumberPropertyValue(APIModel):
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(APIModel):
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(APIModel):
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(APIModel):
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(APIModel):
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(APIModel):
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(APIModel):
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(APIModel):
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(APIModel):
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(APIModel):
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(APIModel):
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(APIModel):
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(APIModel):
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(APIModel):
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(APIModel):
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(APIModel):
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class PropertyValueType(Enum):
    number = "number"
    integer = "integer"
    string = "string"
    boolean = "boolean"
    length = "length"
    area = "area"
    volume = "volume"
    angle = "angle"
    numberList = "numberList"
    integerList = "integerList"
    stringList = "stringList"
    booleanList = "booleanList"
    lengthList = "lengthList"
    areaList = "areaList"
    volumeList = "volumeList"
    angleList = "angleList"
    singleEnum = "singleEnum"
    multiEnum = "multiEnum"


class UserUndefinedPropertyValue(APIModel):
    type: PropertyValueType
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(APIModel):
    type: PropertyValueType
    status: Literal["notAvailable"]


class NotEvaluatedPropertyValue(APIModel):
    type: PropertyValueType
    status: Literal["notEvaluated"]


class DisplayValueEnumId(APIModel):
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(APIModel):
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class EnumValueId1(APIModel):
    enumValueId: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]


class PossibleEnumValue(APIModel):
    enumValueId: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]
    displayValue: Annotated[str, Field(description="Displayed value of the enumeration.")]
    nonLocalizedValue: Annotated[
        str | None,
        Field(description="Nonlocalized value of the enumeration if there is one."),
    ] = None


class PossibleEnumValuesArrayItem(APIModel):
    enumValue: PossibleEnumValue


class Error(APIModel):
    code: Annotated[int, Field(description="The code of the error.")]
    message: Annotated[str, Field(description="The error message.")]


class ErrorItem(APIModel):
    error: Error


class SuccessfulExecutionResult(APIModel):
    success: Literal[True]


class FailedExecutionResult(APIModel):
    success: Literal[False]
    error: Annotated[Error, Field(description="The details of an execution failure.")]


class ElementId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class ElementIdArrayItem(APIModel):
    elementId: ElementId


class ElementType(Enum):
    Wall = "Wall"
    Column = "Column"
    Beam = "Beam"
    Window = "Window"
    Door = "Door"
    Object = "Object"
    Lamp = "Lamp"
    Slab = "Slab"
    Roof = "Roof"
    Mesh = "Mesh"
    Zone = "Zone"
    CurtainWall = "CurtainWall"
    Shell = "Shell"
    Skylight = "Skylight"
    Morph = "Morph"
    Stair = "Stair"
    Railing = "Railing"
    Opening = "Opening"


class TypeOfElement(APIModel):
    elementId: ElementId
    elementType: ElementType


class TypeOfElementOrError1(APIModel):
    typeOfElement: TypeOfElement


class ElementsWrapper(APIModel):
    elements: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]


class Image(APIModel):
    content: Annotated[str, Field(description="The image content as a string .")]


class ImageOrError1(APIModel):
    image: Image


class FolderParameters(APIModel):
    name: Annotated[str, Field(description="The name of the folder.")]


class BoundingBox2D(APIModel):
    xMin: Annotated[float, Field(description="The minimum X value of the bounding box.")]
    yMin: Annotated[float, Field(description="The minimum Y value of the bounding box.")]
    xMax: Annotated[float, Field(description="The maximum X value of the bounding box.")]
    yMax: Annotated[float, Field(description="The maximum Y value of the bounding box.")]


class BoundingBox2DOrError1(APIModel):
    boundingBox2D: BoundingBox2D


class BoundingBox3D(APIModel):
    xMin: Annotated[float, Field(description="The minimum X value of the bounding box.")]
    yMin: Annotated[float, Field(description="The minimum Y value of the bounding box.")]
    zMin: Annotated[float, Field(description="The minimum Z value of the bounding box.")]
    xMax: Annotated[float, Field(description="The maximum X value of the bounding box.")]
    yMax: Annotated[float, Field(description="The maximum Y value of the bounding box.")]
    zMax: Annotated[float, Field(description="The maximum Z value of the bounding box.")]


class BoundingBox3DOrError1(APIModel):
    boundingBox3D: BoundingBox3D


class RGBColor(APIModel):
    red: Annotated[
        float,
        Field(description="The red component of the color model.", ge=0.0, le=1.0),
    ]
    green: Annotated[
        float,
        Field(description="The green component of the color model.", ge=0.0, le=1.0),
    ]
    blue: Annotated[
        float,
        Field(description="The blue component of the color model.", ge=0.0, le=1.0),
    ]


class NumberingStyle(Enum):
    Undefined = "Undefined"
    abc = "abc"
    ABC = "ABC"
    field_1 = "1"
    field_01 = "01"
    field_001 = "001"
    field_0001 = "0001"
    noID = "noID"


class Subset(APIModel):
    name: Annotated[str, Field(description="The name for the layout subset.", min_length=1)]
    includeToIDSequence: Annotated[
        bool,
        Field(description="Defines whether this subset is included in automatic ID assignment or not."),
    ]
    customNumbering: Annotated[
        bool,
        Field(description="Defines whether the IDs are generated automatically or a custom numbering is used."),
    ]
    continueNumbering: Annotated[
        bool,
        Field(
            description="Defines whether to continue using the ID assignment of the upper levels or not. If 'true', layouts within this subset are going to be assigned IDs as if they were not within this subset, but part of the level above. In this case you only use the Subset as a logical grouping which has no effect on IDs."
        ),
    ]
    useUpperPrefix: Annotated[
        bool,
        Field(
            description="Defines whether to use the prefix and ID of the upper levels or not. If 'true', layouts in this subset will be assigned IDs based on the previous layout in the layout book structure."
        ),
    ]
    addOwnPrefix: Annotated[
        bool,
        Field(description="Defines whether to add own prefix to the subset or not."),
    ]
    customNumber: Annotated[str, Field(description="The custom subset ID.")]
    autoNumber: Annotated[str, Field(description="The automatic subset ID.")]
    numberingStyle: Annotated[NumberingStyle, Field(description="The style of the ID formatting.")]
    startAt: Annotated[int, Field(description="The starting value of the numbering.")]
    ownPrefix: Annotated[str, Field(description="The custom prefix for the subset.")]


class LayoutParameters(APIModel):
    horizontalSize: Annotated[float, Field(description="The horizontal size of the layout in millimeters.")]
    verticalSize: Annotated[float, Field(description="The vertical size of the layout in millimeters.")]
    leftMargin: Annotated[float, Field(description="The layout margin from the left side of the paper.")]
    topMargin: Annotated[float, Field(description="The layout margin from the top side of the paper.")]
    rightMargin: Annotated[float, Field(description="The layout margin from the right side of the paper.")]
    bottomMargin: Annotated[float, Field(description="The layout margin from the bottom side of the paper.")]
    customLayoutNumber: Annotated[str, Field(description="The custom ID.")]
    customLayoutNumbering: Annotated[
        bool,
        Field(description="Defines whether a unique ID is used for the current layout or not."),
    ]
    doNotIncludeInNumbering: Annotated[
        bool,
        Field(description="Defines whether this layout is included in automatic ID assignment or not."),
    ]
    displayMasterLayoutBelow: Annotated[
        bool,
        Field(description="Defines whether to display the master layout above or below the layout."),
    ]
    layoutPageNumber: Annotated[
        int,
        Field(description="The page number of layout when this layout contains multi-page drawings."),
    ]
    actPageIndex: Annotated[
        int,
        Field(description="The actual index of layout inside the multi-page layout."),
    ]
    currentRevisionId: Annotated[str, Field(description="The ID of the current document revision of the layout.")]
    currentFinalRevisionId: Annotated[
        str,
        Field(description="The ID with optional suffix of the current document revision of the layout."),
    ]
    hasIssuedRevision: Annotated[
        bool,
        Field(
            description="Defines whether one or more issued document revisions have already been created for the layout or not."
        ),
    ]
    hasActualRevision: Annotated[
        bool,
        Field(description="Defines whether an open document revision exists for the layout or not."),
    ]


class ComponentId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class ElementComponentId(APIModel):
    elementId: ElementId
    componentId: ComponentId


class ElementComponentIdArrayItem(APIModel):
    elementComponentId: ElementComponentId


class ElementComponentsWrapper(APIModel):
    elementComponents: Annotated[
        List[ElementComponentIdArrayItem],
        Field(description="List of components of elements."),
    ]


class AttributeFolderId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class AttributeFolderIdWrapperItem(APIModel):
    attributeFolderId: AttributeFolderId


class AttributeId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class AttributeIdWrapperItem(APIModel):
    attributeId: AttributeId


class AttributeIndexAndGuid(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]
    index: Annotated[float, Field(description="The index of an attribute.", ge=1.0)]


class AttributeIndexAndGuidWrapperItem(APIModel):
    attributeIndexAndGuid: AttributeIndexAndGuid


class AttributeFolder(APIModel):
    attributeType: AttributeType
    path: Annotated[
        List[AttributeFolderName],
        Field(description="A list of attribute folder names. May be empty."),
    ]
    attributeFolderId: AttributeFolderId
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]


class AttributeFolderOrError1(APIModel):
    attributeFolder: AttributeFolder


class AttributeFolderRenameParameters(APIModel):
    attributeFolderId: AttributeFolderId
    newName: Annotated[
        str,
        Field(
            description="The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.",
            min_length=1,
        ),
    ]


class AttributeHeader(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]


class AttributeHeaderArrayItem(APIModel):
    attribute: AttributeHeader


class LayerAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    intersectionGroupNr: Annotated[int, Field(description="The intersection group number")]
    isLocked: Annotated[bool, Field(description="Defines whether the layer is locked or not.")]
    isHidden: Annotated[bool, Field(description="Defines whether the layer is hidden or not.")]
    isWireframe: Annotated[
        bool,
        Field(
            description="Defines whether the elements placed on this layer are visible as wireframes or a solid model."
        ),
    ]


class LayerAttributeOrError1(APIModel):
    layerAttribute: LayerAttribute


class FillAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    subType: FillTypeId
    pattern: Annotated[
        int,
        Field(
            description="The pattern of the fill attribute, stored in a 64 bit unsigned integer, and represented as an 8x8 matrix. Each byte in the value is a row, and the bits are the columns of the matrix."
        ),
    ]
    appearanceType: AppearanceType


class FillAttributeOrError1(APIModel):
    fillAttribute: FillAttribute


class SurfaceAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    materialType: MaterialTypeId
    ambientReflection: Annotated[
        int,
        Field(description="The ambient reflection of the surface attribute.", ge=0, le=100),
    ]
    diffuseReflection: Annotated[
        int,
        Field(description="The diffuse reflection of the surface attribute.", ge=0, le=100),
    ]
    specularReflection: Annotated[
        int,
        Field(
            description="The specular reflection of the surface attribute.",
            ge=0,
            le=100,
        ),
    ]
    transparencyAttenuation: Annotated[
        int,
        Field(
            description="The transparency attenuation of the surface attribute.",
            ge=0,
            le=400,
        ),
    ]
    emissionAttenuation: Annotated[
        int,
        Field(
            description="The emission attenuation of the surface attribute.",
            ge=0,
            le=65535,
        ),
    ]
    surfaceColor: Annotated[RGBColor, Field(description="The surface color of the surface attribute.")]
    specularColor: Annotated[RGBColor, Field(description="The specular color of the surface attribute.")]
    emissionColor: Annotated[RGBColor, Field(description="The emission color of the surface attribute.")]
    fillId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The identifier of the surface attribute's fill component."),
    ]
    transparency: Annotated[
        int,
        Field(description="The transparency of the surface attribute.", ge=0, le=100),
    ]
    shine: Annotated[
        int,
        Field(description="The shininess of the surface attribute.", ge=0, le=10000),
    ]
    texture: Annotated[Texture | None, Field(description="The texture of the surface attribute.")] = None


class SurfaceAttributeOrError1(APIModel):
    surfaceAttribute: SurfaceAttribute


class ProfileAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    useWith: Annotated[
        List[ElementType],
        Field(description="The list of element types for which this profile is available."),
    ]
    width: Annotated[float, Field(description="The default width (horizontal size) of the profile.")]
    height: Annotated[float, Field(description="The default height (vertical size) of the profile.")]
    minimumWidth: Annotated[float, Field(description="The minimum width (horizontal size) of the profile.")]
    minimumHeight: Annotated[float, Field(description="The minimum height (vertical size) of the profile.")]
    widthStretchable: Annotated[
        bool,
        Field(description="Defines whether the profile's width can be increased beyond its default value or not."),
    ]
    heightStretchable: Annotated[
        bool,
        Field(description="Defines whether the profile's height can be increased beyond its default value or not."),
    ]
    hasCoreSkin: Annotated[bool, Field(description="Defines whether the profile has a core skin or not.")]
    profileModifiers: Annotated[List[ProfileModifierListItem], Field(description="A list of profile modifiers.")]


class ProfileAttributeOrError1(APIModel):
    profileAttribute: ProfileAttribute


class CompositeLine(APIModel):
    lineId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The attribute's identifier or an error."),
    ]
    linePenIndex: Annotated[int | None, Field(description="The index of the line pen.", ge=0, le=255)] = None


class CompositeLineListItem(APIModel):
    compositeLine: CompositeLine


class CompositeSkin(APIModel):
    buildingMaterialId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The attribute's identifier or an error."),
    ]
    framePenIndex: Annotated[int | None, Field(description="The index of the frame pen.", ge=0, le=255)] = None
    thickness: Annotated[float, Field(description="The thickness of the composite skin.")]
    isCore: Annotated[
        bool,
        Field(description="Defines whether the composite skin is part of the core or not."),
    ]
    isFinish: Annotated[
        bool,
        Field(description="Defines whether the composite skin is part of the finish or not."),
    ]


class CompositeSkinListItem(APIModel):
    compositeSkin: CompositeSkin


class CompositeAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    totalThickness: Annotated[float, Field(description="The total thickness of the composite.")]
    compositeSkins: Annotated[
        List[CompositeSkinListItem],
        Field(description="The skins of the composite attribute."),
    ]
    compositeLines: Annotated[
        List[CompositeLineListItem],
        Field(description="The contour and separator lines of the composite attribute."),
    ]
    useWith: Annotated[
        List[ElementType],
        Field(description="The list of element types for which this composite is available."),
    ]


class CompositeAttributeOrError1(APIModel):
    compositeAttribute: CompositeAttribute


class Pen(APIModel):
    index: Annotated[int, Field(description="The index of the pen.", ge=0, le=255)]
    color: Annotated[RGBColor, Field(description="The color of the pen.")]
    weight: Annotated[
        float,
        Field(description="The thickness of the pen defined in millimeters.", ge=0.0),
    ]
    description: Annotated[str, Field(description="The description of the pen.")]


class PenArrayItem(APIModel):
    pen: Pen


class LineItem(APIModel):
    lineItemType: LineItemType
    centerOffset: Annotated[
        float,
        Field(
            description="The vertical distance from the origin of the symbol line. Used in separator, center dot, and centerline item types."
        ),
    ]
    length: Annotated[
        float,
        Field(description="The length of the item. Used in centerline, right angle, and parallel item types."),
    ]
    begPosition: Annotated[
        Point2D,
        Field(
            description="The beginning position of the item. Used in dot, right angle, parallel, line, circle, and arc item types."
        ),
    ]
    endPosition: Annotated[
        Point2D,
        Field(description="The end position of the item. Used in line item type."),
    ]
    radius: Annotated[
        float,
        Field(description="The radius of the item. Used in circle and arc item types."),
    ]
    begAngle: Annotated[
        float,
        Field(
            description="The beginning angle of the item, measured from the vertical axis. Used in the arc item type."
        ),
    ]
    endAngle: Annotated[
        float,
        Field(description="The ending angle of the item, measured from the vertical axis. Used in the arc item type."),
    ]


class LineItemWrapperItem(APIModel):
    lineItem: LineItem


class LineAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    appearanceType: AppearanceType
    displayScale: Annotated[float, Field(description="The original scale of the line.")]
    period: Annotated[float, Field(description="The length of the dashed or symbol line's period.")]
    height: Annotated[float, Field(description="The height of the symbol line.")]
    lineType: LineType
    lineItems: Annotated[
        List[DashItemWrapperItem | LineItemWrapperItem] | None,
        Field(description="A list of dash or line items."),
    ] = None


class LineAttributeOrError1(APIModel):
    lineAttribute: LineAttribute


class ZoneCategoryAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    categoryCode: Annotated[str, Field(description="The category code of the zone.")]
    stampName: Annotated[str, Field(description="The stamp name of the zone category.")]
    stampMainGuid: Annotated[
        UUID,
        Field(
            description="The main part of the stamp library part's unique identifier.",
        ),
    ]
    stampRevisionGuid: Annotated[
        UUID,
        Field(
            description="The revision part of the stamp library part's unique identifier.",
        ),
    ]
    color: RGBColor


class ZoneCategoryAttributeOrError1(APIModel):
    zoneCategoryAttribute: ZoneCategoryAttribute


class BuildingMaterialAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    id: Annotated[str, Field(description="The id of the building material.")]
    connectionPriority: Annotated[int, Field(description="The connection priority of the building material.")]
    cutFillId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The identifier of the building material attribute's fill component."),
    ]
    cutFillPenIndex: Annotated[
        int,
        Field(description="The cut fill pen index of the building material.", ge=0, le=255),
    ]
    cutSurfaceId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The identifier of the building material attribute's surface component."),
    ]


class BuildingMaterialAttributeOrError1(APIModel):
    buildingMaterialAttribute: BuildingMaterialAttribute


class LayerCombinationAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    layerAttributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(
            description="The list of identifiers belonging to the layer attributes referenced in this layer combination."
        ),
    ]


class LayerCombinationAttributeOrError1(APIModel):
    layerCombinationAttribute: LayerCombinationAttribute


class ClassificationSystemId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class ClassificationSystemIdArrayItem(APIModel):
    classificationSystemId: ClassificationSystemId


class ClassificationItemId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class ClassificationItemIdArrayItem(APIModel):
    classificationItemId: ClassificationItemId


class ClassificationId(APIModel):
    classificationSystemId: ClassificationSystemId
    classificationItemId: Annotated[
        ClassificationItemId | None,
        Field(
            description="The element's classification in the given system. If no value is specified here, the element is Unclassified in this system."
        ),
    ] = None


class ClassificationIdOrError1(APIModel):
    classificationId: ClassificationId


class ElementClassification(APIModel):
    elementId: ElementId
    classificationId: ClassificationId


class ElementClassificationOrError1(APIModel):
    classificationIds: Annotated[
        List[ClassificationIdOrError1 | ErrorItem],
        Field(description="A list of element classification identifiers or errors."),
    ]


class ClassificationItemDetails(APIModel):
    classificationItemId: ClassificationItemId
    id: Annotated[
        str,
        Field(description="The unique identifier of the classification item as specified by the user."),
    ]
    name: Annotated[str, Field(description="The display name of the classification item.")]
    description: Annotated[str, Field(description="The description of the classification item.")]


class ClassificationItemOrError1(APIModel):
    classificationItem: ClassificationItemDetails


class ClassificationSystem(APIModel):
    classificationSystemId: ClassificationSystemId
    name: Annotated[str, Field(description="The display name of the classification system.")]
    description: Annotated[str, Field(description="The description of the classification system.")]
    source: Annotated[
        str,
        Field(description="The source of the classification system (e.g. URL to a classification system standard)."),
    ]
    version: Annotated[str, Field(description="The version of the classification system.")]
    date: Annotated[
        str,
        Field(
            description="The release date of the classification system's current version.",
        ),
    ]


class ClassificationSystemOrError1(APIModel):
    classificationSystem: ClassificationSystem


class NavigatorItemId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class NavigatorItemId1(APIModel):
    navigatorItemId: NavigatorItemId


class GeneralNavigatorItemData(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class NavigatorItemIdAndType(APIModel):
    navigatorItemType: NavigatorItemType
    navigatorItemId: NavigatorItemId


class NavigatorItemIdAndTypeOrError1(APIModel):
    navigatorItemIdAndType: NavigatorItemIdAndType


class DetailNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class DetailNavigatorItemOrError1(APIModel):
    detailNavigatorItem: DetailNavigatorItem


class Document3DNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class Document3DNavigatorItemOrError1(APIModel):
    document3DNavigatorItem: Document3DNavigatorItem


class ElevationNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class ElevationNavigatorItemOrError1(APIModel):
    elevationNavigatorItem: ElevationNavigatorItem


class InteriorElevationNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class InteriorElevationNavigatorItemOrError1(APIModel):
    interiorElevationNavigatorItem: InteriorElevationNavigatorItem


class SectionNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class SectionNavigatorItemOrError1(APIModel):
    sectionNavigatorItem: SectionNavigatorItem


class StoryNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]
    floorLevel: Annotated[float, Field(description="The floor level of the story navigator item.")]
    floorNumber: Annotated[float, Field(description="The floor number of the story navigator item.")]


class StoryNavigatorItemOrError1(APIModel):
    storyNavigatorItem: StoryNavigatorItem


class WorksheetNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class WorksheetNavigatorItemOrError1(APIModel):
    worksheetNavigatorItem: WorksheetNavigatorItem


class BuiltInContainerNavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]
    contentIds: Annotated[
        List[NavigatorItemId1],
        Field(description="The identifiers of the navigator items inside the container navigator item."),
    ]


class BuiltInContainerNavigatorItemOrError1(APIModel):
    builtInContainerNavigatorItem: BuiltInContainerNavigatorItem


class PropertyId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class PropertyIdArrayItem(APIModel):
    propertyId: PropertyId


class PropertyGroupId(APIModel):
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class PropertyGroupIdArrayItem(APIModel):
    propertyGroupId: PropertyGroupId


class PropertyGroup(APIModel):
    propertyGroupId: PropertyGroupId
    name: Annotated[str, Field(description="The property group name.")]


class PropertyGroupOrError1(APIModel):
    propertyGroup: PropertyGroup


class NormalSingleEnumPropertyValue(APIModel):
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]


class NormalMultiEnumPropertyValue(APIModel):
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: Annotated[List[EnumValueId1], Field(description="A list of enumeration identifiers.")]


class PropertyValueOrErrorItem1(APIModel):
    propertyValue: Annotated[
        NotAvailablePropertyValue
        | NotEvaluatedPropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue,
        Field(description="A normal, userUndefined, notAvailable or notEvaluated property value."),
    ]


class PropertyValuesOrError1(APIModel):
    propertyValues: Annotated[
        List[PropertyValueOrErrorItem1 | ErrorItem],
        Field(description="A list of property values."),
    ]


class ElementPropertyValue(APIModel):
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: Annotated[
        NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue,
        Field(description="A normal or a userUndefined property value."),
    ]


class PropertyIdsOfElement(APIModel):
    elementId: ElementId
    propertyIds: Annotated[List[PropertyIdArrayItem], Field(description="A list of property identifiers.")]


class PropertyIdsOfElementOrError1(APIModel):
    propertyIdsOfElement: PropertyIdsOfElement


class RenameNavigatorItemByName(APIModel):
    navigatorItemId: NavigatorItemId
    newName: Annotated[str, Field(description="New name of the navigator item.")]


class RenameNavigatorItemById(APIModel):
    navigatorItemId: NavigatorItemId
    newId: Annotated[str, Field(description="New ID of the navigator item.")]


class RenameNavigatorItemByNameAndId(APIModel):
    navigatorItemId: NavigatorItemId
    newName: Annotated[str, Field(description="New name of the navigator item.")]
    newId: Annotated[str, Field(description="New ID of the navigator item.")]


class PenTableAttribute(APIModel):
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    pens: Annotated[List[PenArrayItem], Field(description="A collection of pens in a pen table.")]


class PenTableAttributeOrError1(APIModel):
    penTableAttribute: PenTableAttribute


class ClassificationItemAvailability(APIModel):
    classificationItemId: ClassificationItemId
    availableProperties: Annotated[List[PropertyIdArrayItem], Field(description="A list of property identifiers.")]


class ClassificationItemAvailabilityOrError1(APIModel):
    classificationItemAvailability: ClassificationItemAvailability


class PropertyDefinitionAvailability(APIModel):
    propertyId: PropertyId
    availableClassifications: Annotated[
        List[ClassificationItemIdArrayItem],
        Field(description="A list of classification item identifiers."),
    ]


class PropertyDefinitionAvailabilityOrError1(APIModel):
    propertyDefinitionAvailability: PropertyDefinitionAvailability


class PropertyBasicDefaultValue(APIModel):
    basicDefaultValue: Annotated[
        NotAvailablePropertyValue
        | NotEvaluatedPropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue,
        Field(description="A normal, userUndefined, notAvailable or notEvaluated property value."),
    ]


class PropertyDefinition(APIModel):
    propertyId: PropertyId | None = None
    group: PropertyGroup
    name: Annotated[str, Field(description="The localized name of the property.")]
    description: Annotated[str, Field(description="The description of the property.")]
    isEditable: Annotated[bool, Field(description="Defines whether the property is editable or not.")]
    type: Annotated[str, Field(description="Defines the type of the property's value.")]
    possibleEnumValues: Annotated[
        List[PossibleEnumValuesArrayItem] | None,
        Field(description="The possible enum values of the property when the property type is enumeration."),
    ] = None
    defaultValue: Annotated[
        PropertyBasicDefaultValue | None,
        Field(description="Default value of the property."),
    ] = None


class PropertyDefinitionOrError1(APIModel):
    propertyDefinition: PropertyDefinition


class AttributeFolderStructureArrayItem(APIModel):
    attributeFolder: AttributeFolderStructure


class AttributeFolderStructure(APIModel):
    attributeFolderId: AttributeFolderId
    name: Annotated[
        str,
        Field(
            description="The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.",
            min_length=1,
        ),
    ]
    attributes: Annotated[
        List[AttributeHeaderArrayItem] | None,
        Field(description="The names and identifiers of the attributes contained in this folder."),
    ] = None
    subfolders: Annotated[
        List[AttributeFolderStructureArrayItem] | None,
        Field(description="The subfolders of this attribute folder."),
    ] = None


AttributeFolderStructureOrError: TypeAlias = AttributeFolderStructure | ErrorItem


class ClassificationItemArrayItem(APIModel):
    classificationItem: ClassificationItemInTree


class ClassificationItemInTree(APIModel):
    classificationItemId: ClassificationItemId
    id: Annotated[
        str,
        Field(description="The unique identifier of the classification item as specified by the user."),
    ]
    name: Annotated[str, Field(description="The display name of the classification item.")]
    description: Annotated[str, Field(description="The description of the classification item.")]
    children: Annotated[
        List[ClassificationItemArrayItem] | None,
        Field(description="A list of classification items."),
    ] = None


class NavigatorItemArrayItem(APIModel):
    navigatorItem: NavigatorItem


class NavigatorItem(APIModel):
    navigatorItemId: NavigatorItemId
    prefix: Annotated[str, Field(description="The prefix of the navigator item's name.")]
    name: Annotated[str, Field(description="The name of the navigator item.")]
    type: Annotated[NavigatorItemType, Field(description="The type of the navigator item.")]
    sourceNavigatorItemId: Annotated[
        NavigatorItemId | None,
        Field(
            description="The source of the navigator item. For example, a navigator item in the ViewMap can be the source of a DrawingItem."
        ),
    ] = None
    children: Annotated[
        List[NavigatorItemArrayItem] | None,
        Field(description="The children of the navigator item if it has any."),
    ] = None


class NavigatorTree(APIModel):
    rootItem: NavigatorItem
