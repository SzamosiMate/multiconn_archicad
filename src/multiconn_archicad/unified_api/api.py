# This file is automatically generated by the pipeline. Do not edit directly.
# It contains a unified, high-level, object-oriented interface for the APIs.

from __future__ import annotations
from typing import Any, TYPE_CHECKING

from multiconn_archicad.models.tapir import commands as tapir_commands
from multiconn_archicad.models.tapir import types as tapir_types
from multiconn_archicad.models.official import commands as official_commands
from multiconn_archicad.models.official import types as official_types

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class UnifiedApi:
    """
    A unified, high-level, object-oriented interface for both the Tapir
    and Official Archicad JSON APIs. This class provides type-safe, pythonic
    methods that handle data validation and parsing automatically.
    """
    def __init__(self, core: CoreCommands):
        self._core = core
    def add_comment_to_issue(
        self,
        issue_id: IssueId,
        text: str,
        author: str | None = None,
        status: IssueCommentStatus | None = None
    ) -> None:
        """
                Adds a new comment to the specified issue.

                Args:
        issue_id (IssueId)
        text (str): Comment text to add.
        author (str | None): The author of the new comment.
        status (IssueCommentStatus | None)
                """
        params_dict = {
                    'issueId': issue_id,
                    'author': author,
                    'status': status,
                    'text': text,
                }
        validated_params = tapir_commands.AddCommentToIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "AddCommentToIssue",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def add_files_to_embedded_library(
        self,
        files: list[File]
    ) -> tapir_commands.AddFilesToEmbeddedLibraryResult:
        """
                Adds the given files into the embedded library.

                Args:
        files (list[File]): A list of files
                """
        params_dict = {
                    'files': files,
                }
        validated_params = tapir_commands.AddFilesToEmbeddedLibraryParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "AddFilesToEmbeddedLibrary",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.AddFilesToEmbeddedLibraryResult.model_validate(response_dict)

    def clone_project_map_item_to_view_map(
        self,
        project_map_navigator_item_id: NavigatorItemId,
        parent_navigator_item_id: NavigatorItemId
    ) -> official_commands.CloneProjectMapItemToViewMapResult:
        """
                Clones a project map item to the view map.

                Args:
        project_map_navigator_item_id (NavigatorItemId): The ID of the navigator item to be
                        cloned. Only navigator items from the project map can be cloned.
        parent_navigator_item_id (NavigatorItemId): The ID of the navigator item below which the
                        new view will be inserted. Only navigator items from the view map are allowed.
                """
        params_dict = {
                    'projectMapNavigatorItemId': project_map_navigator_item_id,
                    'parentNavigatorItemId': parent_navigator_item_id,
                }
        validated_params = official_commands.CloneProjectMapItemToViewMapParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CloneProjectMapItemToViewMap",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.CloneProjectMapItemToViewMapResult.model_validate(response_dict)

    def create_attribute_folders(
        self,
        attribute_folders: list[AttributeFolderCreationParameters]
    ) -> official_commands.CreateAttributeFoldersResult:
        """
                Creates attribute folders. To create a folder, its full path has to be provided. The command will create all folders along the path, if they do not exist.

                Args:
        attribute_folders (list[AttributeFolderCreationParameters])
                """
        params_dict = {
                    'attributeFolders': attribute_folders,
                }
        validated_params = official_commands.CreateAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateAttributeFolders",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.CreateAttributeFoldersResult.model_validate(response_dict)

    def create_layout(
        self,
        layout_name: Annotated[str, MinLen(min_length=1)],
        layout_parameters: LayoutParameters,
        master_navigator_item_id: NavigatorItemId,
        parent_navigator_item_id: NavigatorItemId
    ) -> official_commands.CreateLayoutResult:
        """
                Creates a new layout.

                Args:
        layout_name (Annotated[str, MinLen(min_length=1)]): The name of the layout.
        layout_parameters (LayoutParameters)
        master_navigator_item_id (NavigatorItemId)
        parent_navigator_item_id (NavigatorItemId)
                """
        params_dict = {
                    'layoutName': layout_name,
                    'layoutParameters': layout_parameters,
                    'masterNavigatorItemId': master_navigator_item_id,
                    'parentNavigatorItemId': parent_navigator_item_id,
                }
        validated_params = official_commands.CreateLayoutParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateLayout",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.CreateLayoutResult.model_validate(response_dict)

    def create_layout_subset(
        self,
        subset_parameters: Subset,
        parent_navigator_item_id: NavigatorItemId
    ) -> official_commands.CreateLayoutSubsetResult:
        """
                Creates a new layout subset.

                Args:
        subset_parameters (Subset)
        parent_navigator_item_id (NavigatorItemId)
                """
        params_dict = {
                    'subsetParameters': subset_parameters,
                    'parentNavigatorItemId': parent_navigator_item_id,
                }
        validated_params = official_commands.CreateLayoutSubsetParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateLayoutSubset",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.CreateLayoutSubsetResult.model_validate(response_dict)

    def create_view_map_folder(
        self,
        folder_parameters: FolderParameters,
        parent_navigator_item_id: NavigatorItemId | None = None,
        previous_navigator_item_id: NavigatorItemId | None = None
    ) -> official_commands.CreateViewMapFolderResult:
        """
                Creates a view folder item at the given position in the navigator tree.

                Args:
        folder_parameters (FolderParameters): This is the name of the new folder.
        parent_navigator_item_id (NavigatorItemId | None): The newly created folder will be
                        placed under this parent item. If this parameter is not given the folder will be
                        created as the first item in the View Map list.
        previous_navigator_item_id (NavigatorItemId | None): The newly created folder will be
                        placed after this sibling item. If this parameter is not given the folder will be
                        created as the first item under the parent.
                """
        params_dict = {
                    'folderParameters': folder_parameters,
                    'parentNavigatorItemId': parent_navigator_item_id,
                    'previousNavigatorItemId': previous_navigator_item_id,
                }
        validated_params = official_commands.CreateViewMapFolderParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateViewMapFolder",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.CreateViewMapFolderResult.model_validate(response_dict)

    def delete_attribute_folders(
        self,
        attribute_folder_ids: list[AttributeFolderIdWrapperItem]
    ) -> official_commands.DeleteAttributeFoldersResult:
        """
                Deletes attribute folders and all the deletable attributes and folders it contains. To delete a folder, its identifier has to be provided.

                Args:
        attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute folder
                        identifiers.
                """
        params_dict = {
                    'attributeFolderIds': attribute_folder_ids,
                }
        validated_params = official_commands.DeleteAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.DeleteAttributeFolders",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.DeleteAttributeFoldersResult.model_validate(response_dict)

    def delete_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.DeleteAttributesResult:
        """
                Deletes attributes.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.DeleteAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.DeleteAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.DeleteAttributesResult.model_validate(response_dict)

    def delete_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.DeleteNavigatorItemsResult:
        """
                Deletes items from navigator tree.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.DeleteNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.DeleteNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.DeleteNavigatorItemsResult.model_validate(response_dict)

    def execute_add_on_command(
        self,
        add_on_command_id: AddOnCommandId,
        extra_data: Any,
        add_on_command_parameters: AddOnCommandParameters | None = None
    ) -> official_commands.ExecuteAddOnCommandResult:
        """
                Executes a command registered in an Add-On.

                Args:
        add_on_command_id (AddOnCommandId)
        extra_data (Any)
        add_on_command_parameters (AddOnCommandParameters | None)
                """
        params_dict = {
                    'addOnCommandId': add_on_command_id,
                    'addOnCommandParameters': add_on_command_parameters,
                    'extra_data': extra_data,
                }
        validated_params = official_commands.ExecuteAddOnCommandParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.ExecuteAddOnCommand",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.ExecuteAddOnCommandResult.model_validate(response_dict)

    def get_2_d_bounding_boxes(
        self,
        elements: list[ElementIdArrayItem]
    ) -> official_commands.Get2DBoundingBoxesResult:
        """
                Get the 2D bounding box of elements identified by their GUIDs. The bounding box is calculated from the global origin on the floor plan view. The output is the array of the bounding boxes respective to the input GUIDs. Only works for elements detailed in <i>Element Information</i>.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = official_commands.Get2DBoundingBoxesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.Get2DBoundingBoxes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.Get2DBoundingBoxesResult.model_validate(response_dict)

    def get_3_d_bounding_boxes(
        self,
        elements: list[ElementIdArrayItem]
    ) -> official_commands.Get3DBoundingBoxesResult:
        """
                Get the 3D bounding box of elements identified by their GUIDs. The bounding box is calculated from the global origin in the 3D view. The output is the array of the bounding boxes respective to the input GUIDs. Only works for elements detailed in <i>Element Information</i>.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = official_commands.Get3DBoundingBoxesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.Get3DBoundingBoxes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.Get3DBoundingBoxesResult.model_validate(response_dict)

    def get_active_pen_tables(
        self
    ) -> official_commands.GetActivePenTablesResult:
        """
                Returns the model view and layout book pen table identifiers.
                """
        response_dict = self._core.post_command("API.GetActivePenTables")
        return official_commands.GetActivePenTablesResult.model_validate(response_dict)

    def get_all_classification_systems(
        self
    ) -> official_commands.GetAllClassificationSystemsResult:
        """
                Returns the list of available classification systems.
                """
        response_dict = self._core.post_command("API.GetAllClassificationSystems")
        return official_commands.GetAllClassificationSystemsResult.model_validate(response_dict)

    def get_all_classifications_in_system(
        self,
        classification_system_id: ClassificationSystemId
    ) -> official_commands.GetAllClassificationsInSystemResult:
        """
                Returns the tree of classifications in the given classification system.

                Args:
        classification_system_id (ClassificationSystemId)
                """
        params_dict = {
                    'classificationSystemId': classification_system_id,
                }
        validated_params = official_commands.GetAllClassificationsInSystemParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllClassificationsInSystem",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAllClassificationsInSystemResult.model_validate(response_dict)

    def get_all_elements(
        self
    ) -> official_commands.GetAllElementsResult:
        """
                Returns the identifier of every element in the current plan.
                """
        response_dict = self._core.post_command("API.GetAllElements")
        return official_commands.GetAllElementsResult.model_validate(response_dict)

    def get_all_property_group_ids(
        self,
        property_type: PropertyType | None = None
    ) -> official_commands.GetAllPropertyGroupIdsResult:
        """
                Returns the identifier of every property group in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property group (Built-in or User Defined).

                Args:
        property_type (PropertyType | None)
                """
        params_dict = {
                    'propertyType': property_type,
                }
        validated_params = official_commands.GetAllPropertyGroupIdsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllPropertyGroupIds",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAllPropertyGroupIdsResult.model_validate(response_dict)

    def get_all_property_ids(
        self,
        property_type: PropertyType | None = None
    ) -> official_commands.GetAllPropertyIdsResult:
        """
                Returns the identifier of every property in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).

                Args:
        property_type (PropertyType | None)
                """
        params_dict = {
                    'propertyType': property_type,
                }
        validated_params = official_commands.GetAllPropertyIdsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllPropertyIds",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAllPropertyIdsResult.model_validate(response_dict)

    def get_all_property_ids_of_elements(
        self,
        elements: list[ElementIdArrayItem],
        property_type: PropertyType | None = None
    ) -> official_commands.GetAllPropertyIdsOfElementsResult:
        """
                Returns all property identifiers of the given elements. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
        property_type (PropertyType | None)
                """
        params_dict = {
                    'elements': elements,
                    'propertyType': property_type,
                }
        validated_params = official_commands.GetAllPropertyIdsOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllPropertyIdsOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAllPropertyIdsOfElementsResult.model_validate(response_dict)

    def get_all_property_names(
        self
    ) -> official_commands.GetAllPropertyNamesResult:
        """
                Returns the human-readable names of available Property definitions for debug and development purposes.
                """
        response_dict = self._core.post_command("API.GetAllPropertyNames")
        return official_commands.GetAllPropertyNamesResult.model_validate(response_dict)

    def get_attribute_folder_structure(
        self,
        attribute_type: AttributeType,
        path: Union[list[str], None] = None
    ) -> official_commands.GetAttributeFolderStructureResult:
        """
                Returns the detailed folder structure for the attributes of a given type. If the path is not given, the root folder will be returned

                Args:
        attribute_type (AttributeType)
        path (Union[list[str], None]): A list of attribute folder names. May be empty.
                """
        params_dict = {
                    'attributeType': attribute_type,
                    'path': path,
                }
        validated_params = official_commands.GetAttributeFolderStructureParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributeFolderStructure",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAttributeFolderStructureResult.model_validate(response_dict)

    def get_attribute_folders(
        self,
        attribute_folder_ids: list[AttributeFolderIdWrapperItem]
    ) -> official_commands.GetAttributeFoldersResult:
        """
                Returns the detailed attribute folders identified by their Ids.

                Args:
        attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute folder
                        identifiers.
                """
        params_dict = {
                    'attributeFolderIds': attribute_folder_ids,
                }
        validated_params = official_commands.GetAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributeFolders",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAttributeFoldersResult.model_validate(response_dict)

    def get_attributes_by_type(
        self,
        attribute_type: AttributeType
    ) -> official_commands.GetAttributesByTypeResult:
        """
                Returns the identifier of every attribute of the given type.

                Args:
        attribute_type (AttributeType)
                """
        params_dict = {
                    'attributeType': attribute_type,
                }
        validated_params = official_commands.GetAttributesByTypeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributesByType",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAttributesByTypeResult.model_validate(response_dict)

    def get_attributes_indices(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetAttributesIndicesResult:
        """
                Returns the requested indices and guids of attributes.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetAttributesIndicesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributesIndices",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetAttributesIndicesResult.model_validate(response_dict)

    def get_building_material_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetBuildingMaterialAttributesResult:
        """
                Returns the detailed building material attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetBuildingMaterialAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetBuildingMaterialAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetBuildingMaterialAttributesResult.model_validate(response_dict)

    def get_built_in_container_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetBuiltInContainerNavigatorItemsResult:
        """
                Returns the details of the built-in container navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetBuiltInContainerNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetBuiltInContainerNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetBuiltInContainerNavigatorItemsResult.model_validate(response_dict)

    def get_classification_item_availability(
        self,
        classification_item_ids: list[ClassificationItemIdArrayItem]
    ) -> official_commands.GetClassificationItemAvailabilityResult:
        """
                Returns the ids of property definitions available for a given classification item.

                Args:
        classification_item_ids (list[ClassificationItemIdArrayItem]): A list of classification
                        item identifiers.
                """
        params_dict = {
                    'classificationItemIds': classification_item_ids,
                }
        validated_params = official_commands.GetClassificationItemAvailabilityParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetClassificationItemAvailability",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetClassificationItemAvailabilityResult.model_validate(response_dict)

    def get_classification_system_ids(
        self
    ) -> official_commands.GetClassificationSystemIdsResult:
        """
                Returns the list of available classification systems.
                """
        response_dict = self._core.post_command("API.GetClassificationSystemIds")
        return official_commands.GetClassificationSystemIdsResult.model_validate(response_dict)

    def get_classification_systems(
        self,
        classification_system_ids: list[ClassificationSystemIdArrayItem]
    ) -> official_commands.GetClassificationSystemsResult:
        """
                Returns the details of classification systems identified by their GUIDs.

                Args:
        classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of
                        classification system identifiers.
                """
        params_dict = {
                    'classificationSystemIds': classification_system_ids,
                }
        validated_params = official_commands.GetClassificationSystemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetClassificationSystems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetClassificationSystemsResult.model_validate(response_dict)

    def get_classifications_of_elements(
        self,
        elements: list[ElementIdArrayItem],
        classification_system_ids: list[ClassificationSystemIdArrayItem]
    ) -> official_commands.GetClassificationsOfElementsResult:
        """
                Returns the classification of the given elements in the given classification systems.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
        classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of
                        classification system identifiers.
                """
        params_dict = {
                    'elements': elements,
                    'classificationSystemIds': classification_system_ids,
                }
        validated_params = official_commands.GetClassificationsOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetClassificationsOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetClassificationsOfElementsResult.model_validate(response_dict)

    def get_components_of_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> official_commands.GetComponentsOfElementsResult:
        """
                Returns the identifier of every component for a list of elements. The order of the returned list is the same as the given elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = official_commands.GetComponentsOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetComponentsOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetComponentsOfElementsResult.model_validate(response_dict)

    def get_composite_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetCompositeAttributesResult:
        """
                Returns the detailed composite attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetCompositeAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetCompositeAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetCompositeAttributesResult.model_validate(response_dict)

    def get_detail_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetDetailNavigatorItemsResult:
        """
                Returns the details of the detail navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetDetailNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDetailNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetDetailNavigatorItemsResult.model_validate(response_dict)

    def get_details_of_classification_items(
        self,
        classification_item_ids: list[ClassificationItemIdArrayItem]
    ) -> official_commands.GetDetailsOfClassificationItemsResult:
        """
                Returns the details of classification items.

                Args:
        classification_item_ids (list[ClassificationItemIdArrayItem]): A list of classification
                        item identifiers.
                """
        params_dict = {
                    'classificationItemIds': classification_item_ids,
                }
        validated_params = official_commands.GetDetailsOfClassificationItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDetailsOfClassificationItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetDetailsOfClassificationItemsResult.model_validate(response_dict)

    def get_details_of_properties(
        self,
        properties: list[PropertyIdArrayItem]
    ) -> official_commands.GetDetailsOfPropertiesResult:
        """
                Returns the details of property definitions.

                Args:
        properties (list[PropertyIdArrayItem]): A list of property identifiers.
                """
        params_dict = {
                    'properties': properties,
                }
        validated_params = official_commands.GetDetailsOfPropertiesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDetailsOfProperties",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetDetailsOfPropertiesResult.model_validate(response_dict)

    def get_document_3_d_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetDocument3DNavigatorItemsResult:
        """
                Returns the details of the 3D document navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetDocument3DNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDocument3DNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetDocument3DNavigatorItemsResult.model_validate(response_dict)

    def get_elements_by_classification(
        self,
        classification_item_id: ClassificationItemId
    ) -> official_commands.GetElementsByClassificationResult:
        """
                Returns the identifier of every element with the given classification identifier.

                Args:
        classification_item_id (ClassificationItemId)
                """
        params_dict = {
                    'classificationItemId': classification_item_id,
                }
        validated_params = official_commands.GetElementsByClassificationParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElementsByClassification",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetElementsByClassificationResult.model_validate(response_dict)

    def get_elements_by_type(
        self,
        element_type: ElementType
    ) -> official_commands.GetElementsByTypeResult:
        """
                Returns the identifier of every element of the given type on the plan.

                Args:
        element_type (ElementType)
                """
        params_dict = {
                    'elementType': element_type,
                }
        validated_params = official_commands.GetElementsByTypeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElementsByType",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetElementsByTypeResult.model_validate(response_dict)

    def get_elements_related_to_zones(
        self,
        zones: list[ElementIdArrayItem],
        element_types: Union[list[ElementType], None] = None
    ) -> official_commands.GetElementsRelatedToZonesResult:
        """
                Returns related elements of the given zones. The related elements will be grouped by type. If multiple zones was given, then the order of the returned list is that of the given zones.

                Args:
        zones (list[ElementIdArrayItem]): A list of elements.
        element_types (Union[list[ElementType], None]): If this parameter is given, then only
                        related elements with the requested types will be listed.
                """
        params_dict = {
                    'zones': zones,
                    'elementTypes': element_types,
                }
        validated_params = official_commands.GetElementsRelatedToZonesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElementsRelatedToZones",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetElementsRelatedToZonesResult.model_validate(response_dict)

    def get_elevation_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetElevationNavigatorItemsResult:
        """
                Returns the detailed elevation navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetElevationNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElevationNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetElevationNavigatorItemsResult.model_validate(response_dict)

    def get_fill_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetFillAttributesResult:
        """
                Returns the detailed fill attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetFillAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetFillAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetFillAttributesResult.model_validate(response_dict)

    def get_interior_elevation_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetInteriorElevationNavigatorItemsResult:
        """
                Returns the details of the interior elevation navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetInteriorElevationNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetInteriorElevationNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetInteriorElevationNavigatorItemsResult.model_validate(response_dict)

    def get_layer_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetLayerAttributesResult:
        """
                Returns the detailed layer attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetLayerAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLayerAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetLayerAttributesResult.model_validate(response_dict)

    def get_layer_combination_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetLayerCombinationAttributesResult:
        """
                Returns the detailed layer combination attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetLayerCombinationAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLayerCombinationAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetLayerCombinationAttributesResult.model_validate(response_dict)

    def get_layout_settings(
        self,
        layout_navigator_item_id: NavigatorItemId
    ) -> official_commands.GetLayoutSettingsResult:
        """
                Returns the parameters (settings) of the given layout.

                Args:
        layout_navigator_item_id (NavigatorItemId)
                """
        params_dict = {
                    'layoutNavigatorItemId': layout_navigator_item_id,
                }
        validated_params = official_commands.GetLayoutSettingsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLayoutSettings",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetLayoutSettingsResult.model_validate(response_dict)

    def get_line_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetLineAttributesResult:
        """
                Returns the detailed line attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetLineAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLineAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetLineAttributesResult.model_validate(response_dict)

    def get_navigator_item_tree(
        self,
        navigator_tree_id: PublisherSetId | OtherNavigatorTreeId
    ) -> official_commands.GetNavigatorItemTreeResult:
        """
                Returns the tree of navigator items.

                Args:
        navigator_tree_id (PublisherSetId | OtherNavigatorTreeId): The identifier of a navigator
                        item tree.
                """
        params_dict = {
                    'navigatorTreeId': navigator_tree_id,
                }
        validated_params = official_commands.GetNavigatorItemTreeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetNavigatorItemTree",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetNavigatorItemTreeResult.model_validate(response_dict)

    def get_navigator_items_type(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetNavigatorItemsTypeResult:
        """
                Returns all navigator item types based on the navigator item identifiers given. An error is returned for each identifier that is not found.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetNavigatorItemsTypeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetNavigatorItemsType",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetNavigatorItemsTypeResult.model_validate(response_dict)

    def get_pen_table_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetPenTableAttributesResult:
        """
                Returns the detailed pen table attributes (including their pens) identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetPenTableAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPenTableAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetPenTableAttributesResult.model_validate(response_dict)

    def get_product_info(
        self
    ) -> official_commands.GetProductInfoResult:
        """
                Accesses the version information from the running Archicad.
                """
        response_dict = self._core.post_command("API.GetProductInfo")
        return official_commands.GetProductInfoResult.model_validate(response_dict)

    def get_profile_attribute_preview(
        self,
        attribute_ids: list[AttributeIdWrapperItem],
        image_width: int,
        image_height: int,
        background_color: RGBColor | None = None
    ) -> official_commands.GetProfileAttributePreviewResult:
        """
                Returns the preview image of each requested profile attribute in a base64 string format.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
        image_width (int): The width of the preview image.
        image_height (int): The height of the preview image.
        background_color (RGBColor | None): The background color of the preview image.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                    'imageWidth': image_width,
                    'imageHeight': image_height,
                    'backgroundColor': background_color,
                }
        validated_params = official_commands.GetProfileAttributePreviewParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetProfileAttributePreview",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetProfileAttributePreviewResult.model_validate(response_dict)

    def get_profile_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetProfileAttributesResult:
        """
                Returns the detailed profile attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetProfileAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetProfileAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetProfileAttributesResult.model_validate(response_dict)

    def get_property_definition_availability(
        self,
        property_ids: list[PropertyIdArrayItem]
    ) -> official_commands.GetPropertyDefinitionAvailabilityResult:
        """
                Returns the ids of classification items a given property definition is available for.

                Args:
        property_ids (list[PropertyIdArrayItem]): A list of property identifiers.
                """
        params_dict = {
                    'propertyIds': property_ids,
                }
        validated_params = official_commands.GetPropertyDefinitionAvailabilityParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyDefinitionAvailability",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetPropertyDefinitionAvailabilityResult.model_validate(response_dict)

    def get_property_groups(
        self,
        property_group_ids: list[PropertyGroupIdArrayItem]
    ) -> official_commands.GetPropertyGroupsResult:
        """
                Returns the details of property groups.

                Args:
        property_group_ids (list[PropertyGroupIdArrayItem]): A list of property group
                        identifiers.
                """
        params_dict = {
                    'propertyGroupIds': property_group_ids,
                }
        validated_params = official_commands.GetPropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyGroups",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetPropertyGroupsResult.model_validate(response_dict)

    def get_property_ids(
        self,
        properties: list[UserDefinedPropertyUserId | BuiltInPropertyUserId]
    ) -> official_commands.GetPropertyIdsResult:
        """
                Returns the identifiers of property definitions for the requested property names.

                Args:
        properties (list[UserDefinedPropertyUserId | BuiltInPropertyUserId]): List of property
                        names whose ids are requested.
                """
        params_dict = {
                    'properties': properties,
                }
        validated_params = official_commands.GetPropertyIdsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyIds",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetPropertyIdsResult.model_validate(response_dict)

    def get_property_values_of_element_components(
        self,
        element_components: list[ElementComponentIdArrayItem],
        properties: list[PropertyIdArrayItem]
    ) -> official_commands.GetPropertyValuesOfElementComponentsResult:
        """
                Returns the property values of the components for the given property.

                Args:
        element_components (list[ElementComponentIdArrayItem]): List of components of elements.
        properties (list[PropertyIdArrayItem]): A list of property identifiers.
                """
        params_dict = {
                    'elementComponents': element_components,
                    'properties': properties,
                }
        validated_params = official_commands.GetPropertyValuesOfElementComponentsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyValuesOfElementComponents",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetPropertyValuesOfElementComponentsResult.model_validate(response_dict)

    def get_property_values_of_elements(
        self,
        elements: list[ElementIdArrayItem],
        properties: list[PropertyIdArrayItem]
    ) -> official_commands.GetPropertyValuesOfElementsResult:
        """
                Returns the property values of the elements for the given property.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
        properties (list[PropertyIdArrayItem]): A list of property identifiers.
                """
        params_dict = {
                    'elements': elements,
                    'properties': properties,
                }
        validated_params = official_commands.GetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyValuesOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetPropertyValuesOfElementsResult.model_validate(response_dict)

    def get_publisher_set_names(
        self
    ) -> official_commands.GetPublisherSetNamesResult:
        """
                Returns the names of available publisher sets.
                """
        response_dict = self._core.post_command("API.GetPublisherSetNames")
        return official_commands.GetPublisherSetNamesResult.model_validate(response_dict)

    def get_section_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetSectionNavigatorItemsResult:
        """
                Returns the details of the section navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetSectionNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetSectionNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetSectionNavigatorItemsResult.model_validate(response_dict)

    def get_selected_elements(
        self,
        only_editable: bool | None = None,
        only_supported_types: bool | None = None
    ) -> official_commands.GetSelectedElementsResult:
        """
                Returns the identifiers of selected elements in the current plan.

                Args:
        only_editable (bool | None): Optional parameter that defines whether the selection list
                        should include only the editable elements or all of them. The default value is FALSE
        only_supported_types (bool | None): Optional parameter. When it is set to true, only
                        elements with types that are supported by any other JSON API command will be
                        returned.
                """
        params_dict = {
                    'onlyEditable': only_editable,
                    'onlySupportedTypes': only_supported_types,
                }
        validated_params = official_commands.GetSelectedElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetSelectedElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetSelectedElementsResult.model_validate(response_dict)

    def get_story_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetStoryNavigatorItemsResult:
        """
                Returns the details of the story navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetStoryNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetStoryNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetStoryNavigatorItemsResult.model_validate(response_dict)

    def get_surface_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetSurfaceAttributesResult:
        """
                Returns the detailed surface attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetSurfaceAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetSurfaceAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetSurfaceAttributesResult.model_validate(response_dict)

    def get_types_of_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> official_commands.GetTypesOfElementsResult:
        """
                Returns the types of the given elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = official_commands.GetTypesOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetTypesOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetTypesOfElementsResult.model_validate(response_dict)

    def get_worksheet_navigator_items(
        self,
        navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> official_commands.GetWorksheetNavigatorItemsResult:
        """
                Returns the details of the worksheet navigator items identified by their Ids.

                Args:
        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = official_commands.GetWorksheetNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetWorksheetNavigatorItems",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetWorksheetNavigatorItemsResult.model_validate(response_dict)

    def get_zone_category_attributes(
        self,
        attribute_ids: list[AttributeIdWrapperItem]
    ) -> official_commands.GetZoneCategoryAttributesResult:
        """
                Returns the detailed zone category attributes identified by their GUIDs.

                Args:
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = official_commands.GetZoneCategoryAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetZoneCategoryAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.GetZoneCategoryAttributesResult.model_validate(response_dict)

    def is_add_on_command_available(
        self,
        add_on_command_id: AddOnCommandId
    ) -> official_commands.IsAddOnCommandAvailableResult:
        """
                Checks if the command is available or not.

                Args:
        add_on_command_id (AddOnCommandId)
                """
        params_dict = {
                    'addOnCommandId': add_on_command_id,
                }
        validated_params = official_commands.IsAddOnCommandAvailableParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.IsAddOnCommandAvailable",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.IsAddOnCommandAvailableResult.model_validate(response_dict)

    def is_alive(
        self
    ) -> official_commands.IsAliveResult:
        """
                Checks if the Archicad connection is alive.
                """
        response_dict = self._core.post_command("API.IsAlive")
        return official_commands.IsAliveResult.model_validate(response_dict)

    def move_attributes_and_folders(
        self,
        attribute_folder_ids: list[AttributeFolderIdWrapperItem],
        attribute_ids: list[AttributeIdWrapperItem],
        target_folder_id: AttributeFolderId
    ) -> None:
        """
                Moves attributes and attribute folders.

                Args:
        attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute folder
                        identifiers.
        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
        target_folder_id (AttributeFolderId)
                """
        params_dict = {
                    'attributeFolderIds': attribute_folder_ids,
                    'attributeIds': attribute_ids,
                    'targetFolderId': target_folder_id,
                }
        validated_params = official_commands.MoveAttributesAndFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.MoveAttributesAndFolders",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def move_navigator_item(
        self,
        navigator_item_id_to_move: NavigatorItemId,
        parent_navigator_item_id: NavigatorItemId,
        previous_navigator_item_id: NavigatorItemId | None = None
    ) -> None:
        """
                Moves the given navigator item under the <i>parentNavigatorItemId</i> in the navigator tree. If <i>previousNavigatorItemId</i> is not given then inserts it at the first place under the new parent. If it is given then inserts it after this navigator item.

                Args:
        navigator_item_id_to_move (NavigatorItemId)
        parent_navigator_item_id (NavigatorItemId)
        previous_navigator_item_id (NavigatorItemId | None)
                """
        params_dict = {
                    'navigatorItemIdToMove': navigator_item_id_to_move,
                    'parentNavigatorItemId': parent_navigator_item_id,
                    'previousNavigatorItemId': previous_navigator_item_id,
                }
        validated_params = official_commands.MoveNavigatorItemParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.MoveNavigatorItem",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def rename_attribute_folders(
        self,
        attribute_folder_parameters_list: list[AttributeFolderRenameParameters]
    ) -> official_commands.RenameAttributeFoldersResult:
        """
                Rename attribute folder.

                Args:
        attribute_folder_parameters_list (list[AttributeFolderRenameParameters])
                """
        params_dict = {
                    'attributeFolderParametersList': attribute_folder_parameters_list,
                }
        validated_params = official_commands.RenameAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.RenameAttributeFolders",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.RenameAttributeFoldersResult.model_validate(response_dict)

    def rename_navigator_item(
        self,
        root: RootModelRootType = PydanticUndefined
    ) -> None:
        """
                Renames an existing navigator item by specifying either the name or the ID, or both.

                Args:
        root (RootModelRootType)
                """
        params_dict = {
                    'root': root,
                }
        validated_params = official_commands.RenameNavigatorItemParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.RenameNavigatorItem",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def set_classifications_of_elements(
        self,
        element_classifications: list[ElementClassification]
    ) -> official_commands.SetClassificationsOfElementsResult:
        """
                Sets the classifications of elements. In order to set the classification of an element to unclassified, omit the classificationItemId field.

                Args:
        element_classifications (list[ElementClassification]): A list of element classification
                        identifiers.
                """
        params_dict = {
                    'elementClassifications': element_classifications,
                }
        validated_params = official_commands.SetClassificationsOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.SetClassificationsOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.SetClassificationsOfElementsResult.model_validate(response_dict)

    def set_layout_settings(
        self,
        layout_parameters: LayoutParameters,
        layout_navigator_item_id: NavigatorItemId
    ) -> None:
        """
                Sets the parameters (settings) of the given layout.

                Args:
        layout_parameters (LayoutParameters)
        layout_navigator_item_id (NavigatorItemId)
                """
        params_dict = {
                    'layoutParameters': layout_parameters,
                    'layoutNavigatorItemId': layout_navigator_item_id,
                }
        validated_params = official_commands.SetLayoutSettingsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.SetLayoutSettings",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def set_property_values_of_elements(
        self,
        element_property_values: list[ElementPropertyValue]
    ) -> official_commands.SetPropertyValuesOfElementsResult:
        """
                Sets the property values of elements.

                Args:
        element_property_values (list[ElementPropertyValue]): A list of element property values.
                """
        params_dict = {
                    'elementPropertyValues': element_property_values,
                }
        validated_params = official_commands.SetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.SetPropertyValuesOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return official_commands.SetPropertyValuesOfElementsResult.model_validate(response_dict)

    def apply_favorites_to_element_defaults(
        self,
        favorites: list[str]
    ) -> tapir_commands.ApplyFavoritesToElementDefaultsResult:
        """
                Apply the given favorites to element defaults.

                Args:
        favorites (list[str]): A list of favorite names
                """
        params_dict = {
                    'favorites': favorites,
                }
        validated_params = tapir_commands.ApplyFavoritesToElementDefaultsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ApplyFavoritesToElementDefaults",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.ApplyFavoritesToElementDefaultsResult.model_validate(response_dict)

    def attach_elements_to_issue(
        self,
        issue_id: IssueId,
        elements: list[ElementIdArrayItem],
        type: IssueElementType
    ) -> None:
        """
                Attaches elements to the specified issue.

                Args:
        issue_id (IssueId)
        elements (list[ElementIdArrayItem]): A list of elements.
        type (IssueElementType)
                """
        params_dict = {
                    'issueId': issue_id,
                    'elements': elements,
                    'type': type,
                }
        validated_params = tapir_commands.AttachElementsToIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "AttachElementsToIssue",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def change_selection_of_elements(
        self,
        add_elements_to_selection: Union[list[ElementIdArrayItem], None] = None,
        remove_elements_from_selection: Union[list[ElementIdArrayItem], None] = None
    ) -> tapir_commands.ChangeSelectionOfElementsResult:
        """
                Adds/removes a number of elements to/from the current selection.

                Args:
        add_elements_to_selection (Union[list[ElementIdArrayItem], None]): A list of elements.
        remove_elements_from_selection (Union[list[ElementIdArrayItem], None]): A list of
                        elements.
                """
        params_dict = {
                    'addElementsToSelection': add_elements_to_selection,
                    'removeElementsFromSelection': remove_elements_from_selection,
                }
        validated_params = tapir_commands.ChangeSelectionOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ChangeSelectionOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.ChangeSelectionOfElementsResult.model_validate(response_dict)

    def create_building_materials(
        self,
        building_material_data_array: list[BuildingMaterialDataArrayItem],
        overwrite_existing: bool | None = None
    ) -> tapir_commands.CreateBuildingMaterialsResult:
        """
                Creates Building Material attributes based on the given parameters.

                Args:
        building_material_data_array (list[BuildingMaterialDataArrayItem]): Array of data to
                        create new Building Materials.
        overwrite_existing (bool | None): Overwrite the Building Material if exists with the
                        same name. The default is false.
                """
        params_dict = {
                    'buildingMaterialDataArray': building_material_data_array,
                    'overwriteExisting': overwrite_existing,
                }
        validated_params = tapir_commands.CreateBuildingMaterialsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateBuildingMaterials",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateBuildingMaterialsResult.model_validate(response_dict)

    def create_columns(
        self,
        columns_data: list[ColumnsDatum]
    ) -> tapir_commands.CreateColumnsResult:
        """
                Creates Column elements based on the given parameters.

                Args:
        columns_data (list[ColumnsDatum]): Array of data to create Columns.
                """
        params_dict = {
                    'columnsData': columns_data,
                }
        validated_params = tapir_commands.CreateColumnsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateColumns",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateColumnsResult.model_validate(response_dict)

    def create_composites(
        self,
        composite_data_array: list[CompositeDataArrayItem],
        overwrite_existing: bool | None = None
    ) -> tapir_commands.CreateCompositesResult:
        """
                Creates Composite attributes based on the given parameters.

                Args:
        composite_data_array (list[CompositeDataArrayItem]): Array of data to create Composites.
        overwrite_existing (bool | None): Overwrite the Composite if exists with the same name.
                        The default is false.
                """
        params_dict = {
                    'compositeDataArray': composite_data_array,
                    'overwriteExisting': overwrite_existing,
                }
        validated_params = tapir_commands.CreateCompositesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateComposites",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateCompositesResult.model_validate(response_dict)

    def create_favorites_from_elements(
        self,
        favorites_from_elements: list[FavoritesFromElement]
    ) -> tapir_commands.CreateFavoritesFromElementsResult:
        """
                Create favorites from the given elements.

                Args:
        favorites_from_elements (list[FavoritesFromElement])
                """
        params_dict = {
                    'favoritesFromElements': favorites_from_elements,
                }
        validated_params = tapir_commands.CreateFavoritesFromElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateFavoritesFromElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateFavoritesFromElementsResult.model_validate(response_dict)

    def create_issue(
        self,
        name: str,
        parent_issue_id: IssueId | None = None,
        tag_text: str | None = None
    ) -> tapir_commands.CreateIssueResult:
        """
                Creates a new issue.

                Args:
        name (str): The name of the issue.
        parent_issue_id (IssueId | None)
        tag_text (str | None): Tag text of the issue, optional.
                """
        params_dict = {
                    'name': name,
                    'parentIssueId': parent_issue_id,
                    'tagText': tag_text,
                }
        validated_params = tapir_commands.CreateIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateIssue",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateIssueResult.model_validate(response_dict)

    def create_layers(
        self,
        layer_data_array: list[LayerDataArrayItem],
        overwrite_existing: bool | None = None
    ) -> tapir_commands.CreateLayersResult:
        """
                Creates Layer attributes based on the given parameters.

                Args:
        layer_data_array (list[LayerDataArrayItem]): Array of data to create new Layers.
        overwrite_existing (bool | None): Overwrite the Layer if exists with the same name. The
                        default is false.
                """
        params_dict = {
                    'layerDataArray': layer_data_array,
                    'overwriteExisting': overwrite_existing,
                }
        validated_params = tapir_commands.CreateLayersParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateLayers",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateLayersResult.model_validate(response_dict)

    def create_meshes(
        self,
        meshes_data: list[MeshesDatum]
    ) -> tapir_commands.CreateMeshesResult:
        """
                Creates Mesh elements based on the given parameters.

                Args:
        meshes_data (list[MeshesDatum]): Array of data to create Meshes.
                """
        params_dict = {
                    'meshesData': meshes_data,
                }
        validated_params = tapir_commands.CreateMeshesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateMeshes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateMeshesResult.model_validate(response_dict)

    def create_objects(
        self,
        objects_data: list[ObjectsDatum]
    ) -> tapir_commands.CreateObjectsResult:
        """
                Creates Object elements based on the given parameters.

                Args:
        objects_data (list[ObjectsDatum]): Array of data to create Objects.
                """
        params_dict = {
                    'objectsData': objects_data,
                }
        validated_params = tapir_commands.CreateObjectsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateObjects",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateObjectsResult.model_validate(response_dict)

    def create_polylines(
        self,
        polylines_data: list[PolylinesDatum]
    ) -> tapir_commands.CreatePolylinesResult:
        """
                Creates Polyline elements based on the given parameters.

                Args:
        polylines_data (list[PolylinesDatum]): Array of data to create Polylines.
                """
        params_dict = {
                    'polylinesData': polylines_data,
                }
        validated_params = tapir_commands.CreatePolylinesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePolylines",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreatePolylinesResult.model_validate(response_dict)

    def create_property_definitions(
        self,
        property_definitions: list[PropertyDefinitionArrayItem]
    ) -> tapir_commands.CreatePropertyDefinitionsResult:
        """
                Creates Custom Property Definitions based on the given parameters.

                Args:
        property_definitions (list[PropertyDefinitionArrayItem]): The parameters of the new
                        properties.
                """
        params_dict = {
                    'propertyDefinitions': property_definitions,
                }
        validated_params = tapir_commands.CreatePropertyDefinitionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePropertyDefinitions",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreatePropertyDefinitionsResult.model_validate(response_dict)

    def create_property_groups(
        self,
        property_groups: list[PropertyGroupArrayItem]
    ) -> tapir_commands.CreatePropertyGroupsResult:
        """
                Creates Property Groups based on the given parameters.

                Args:
        property_groups (list[PropertyGroupArrayItem]): The parameters of the new property
                        groups.
                """
        params_dict = {
                    'propertyGroups': property_groups,
                }
        validated_params = tapir_commands.CreatePropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePropertyGroups",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreatePropertyGroupsResult.model_validate(response_dict)

    def create_slabs(
        self,
        slabs_data: list[SlabsDatum]
    ) -> tapir_commands.CreateSlabsResult:
        """
                Creates Slab elements based on the given parameters.

                Args:
        slabs_data (list[SlabsDatum]): Array of data to create Slabs.
                """
        params_dict = {
                    'slabsData': slabs_data,
                }
        validated_params = tapir_commands.CreateSlabsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateSlabs",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateSlabsResult.model_validate(response_dict)

    def create_surfaces(
        self,
        surface_data_array: list[SurfaceDataArrayItem],
        overwrite_existing: bool | None = None
    ) -> tapir_commands.CreateSurfacesResult:
        """
                Creates Surface attributes based on the given parameters.

                Args:
        surface_data_array (list[SurfaceDataArrayItem]): Array of data to create new surfaces.
        overwrite_existing (bool | None): Overwrite the Surface if exists with the same name.
                        The default is false.
                """
        params_dict = {
                    'surfaceDataArray': surface_data_array,
                    'overwriteExisting': overwrite_existing,
                }
        validated_params = tapir_commands.CreateSurfacesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateSurfaces",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateSurfacesResult.model_validate(response_dict)

    def create_zones(
        self,
        zones_data: list[ZonesDatum]
    ) -> tapir_commands.CreateZonesResult:
        """
                Creates Zone elements based on the given parameters.

                Args:
        zones_data (list[ZonesDatum]): Array of data to create Zones.
                """
        params_dict = {
                    'zonesData': zones_data,
                }
        validated_params = tapir_commands.CreateZonesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateZones",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.CreateZonesResult.model_validate(response_dict)

    def delete_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> None:
        """
                Deletes elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.DeleteElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeleteElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def delete_issue(
        self,
        issue_id: IssueId,
        accept_all_elements: bool | None = None
    ) -> None:
        """
                Deletes the specified issue.

                Args:
        issue_id (IssueId)
        accept_all_elements (bool | None): Accept all creation/deletion/modification of the
                        deleted issue. By default false.
                """
        params_dict = {
                    'issueId': issue_id,
                    'acceptAllElements': accept_all_elements,
                }
        validated_params = tapir_commands.DeleteIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeleteIssue",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def delete_property_definitions(
        self,
        property_ids: list[PropertyIdArrayItem]
    ) -> tapir_commands.DeletePropertyDefinitionsResult:
        """
                Deletes the given Custom Property Definitions.

                Args:
        property_ids (list[PropertyIdArrayItem]): The identifiers of properties to delete.
                """
        params_dict = {
                    'propertyIds': property_ids,
                }
        validated_params = tapir_commands.DeletePropertyDefinitionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeletePropertyDefinitions",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.DeletePropertyDefinitionsResult.model_validate(response_dict)

    def delete_property_groups(
        self,
        property_group_ids: list[PropertyGroupIdArrayItem]
    ) -> tapir_commands.DeletePropertyGroupsResult:
        """
                Deletes the given Custom Property Groups.

                Args:
        property_group_ids (list[PropertyGroupIdArrayItem]): The identifiers of property groups
                        to delete.
                """
        params_dict = {
                    'propertyGroupIds': property_group_ids,
                }
        validated_params = tapir_commands.DeletePropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeletePropertyGroups",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.DeletePropertyGroupsResult.model_validate(response_dict)

    def detach_elements_from_issue(
        self,
        issue_id: IssueId,
        elements: list[ElementIdArrayItem]
    ) -> None:
        """
                Detaches elements from the specified issue.

                Args:
        issue_id (IssueId)
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'issueId': issue_id,
                    'elements': elements,
                }
        validated_params = tapir_commands.DetachElementsFromIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DetachElementsFromIssue",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def export_issues_to_bcf(
        self,
        export_path: str,
        use_external_id: bool,
        align_by_survey_point: bool,
        issues: Union[list[IssueIdArrayItem], None] = None
    ) -> None:
        """
                Exports specified issues to a BCF file.

                Args:
        export_path (str): The os path to the bcf file, including it's name.
        use_external_id (bool): Use external IFC ID or Archicad IFC ID as referenced in BCF
                        topics.
        align_by_survey_point (bool): Align BCF views by Archicad Survey Point or Archicad
                        Project Origin.
        issues (Union[list[IssueIdArrayItem], None]): Leave it empty to export all issues.
                """
        params_dict = {
                    'issues': issues,
                    'exportPath': export_path,
                    'useExternalId': use_external_id,
                    'alignBySurveyPoint': align_by_survey_point,
                }
        validated_params = tapir_commands.ExportIssuesToBCFParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ExportIssuesToBCF",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def filter_elements(
        self,
        elements: list[ElementIdArrayItem],
        filters: Annotated[Union[list[ElementFilter], None], MinLen(min_length=1)] = None
    ) -> tapir_commands.FilterElementsResult:
        """
                Tests an elements by the given criterias.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
        filters (Annotated[Union[list[ElementFilter], None], MinLen(min_length=1)])
                """
        params_dict = {
                    'elements': elements,
                    'filters': filters,
                }
        validated_params = tapir_commands.FilterElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "FilterElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.FilterElementsResult.model_validate(response_dict)

    def generate_documentation(
        self,
        destination_folder: Annotated[str, MinLen(min_length=1)]
    ) -> None:
        """
                Generates files for the documentation. Used by Tapir developers only.

                Args:
        destination_folder (Annotated[str, MinLen(min_length=1)]): Destination folder for the
                        generated documentation files.
                """
        params_dict = {
                    'destinationFolder': destination_folder,
                }
        validated_params = tapir_commands.GenerateDocumentationParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GenerateDocumentation",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def get_add_on_version(
        self
    ) -> tapir_commands.GetAddOnVersionResult:
        """
                Retrieves the version of the Tapir Additional JSON Commands Add-On.
                """
        response_dict = self._core.post_tapir_command("GetAddOnVersion")
        return tapir_commands.GetAddOnVersionResult.model_validate(response_dict)

    def get_all_properties(
        self
    ) -> tapir_commands.GetAllPropertiesResult:
        """
                Returns all user defined and built-in properties.
                """
        response_dict = self._core.post_tapir_command("GetAllProperties")
        return tapir_commands.GetAllPropertiesResult.model_validate(response_dict)

    def get_archicad_location(
        self
    ) -> tapir_commands.GetArchicadLocationResult:
        """
                Retrieves the location of the currently running Archicad executable.
                """
        response_dict = self._core.post_tapir_command("GetArchicadLocation")
        return tapir_commands.GetArchicadLocationResult.model_validate(response_dict)

    def get_building_material_physical_properties(
        self,
        attribute_ids: list[AttributeIdArrayItem]
    ) -> tapir_commands.GetBuildingMaterialPhysicalPropertiesResult:
        """
                Retrieves the physical properties of the given Building Materials.

                Args:
        attribute_ids (list[AttributeIdArrayItem]): A list of attributes.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                }
        validated_params = tapir_commands.GetBuildingMaterialPhysicalPropertiesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetBuildingMaterialPhysicalProperties",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetBuildingMaterialPhysicalPropertiesResult.model_validate(response_dict)

    def get_collisions(
        self,
        elements_group_1: list[ElementIdArrayItem],
        elements_group_2: list[ElementIdArrayItem],
        settings: Settings | None = None
    ) -> tapir_commands.GetCollisionsResult:
        """
                Detect collisions between the given two groups of elements.

                Args:
        elements_group_1 (list[ElementIdArrayItem]): A list of elements.
        elements_group_2 (list[ElementIdArrayItem]): A list of elements.
        settings (Settings | None)
                """
        params_dict = {
                    'elementsGroup1': elements_group_1,
                    'elementsGroup2': elements_group_2,
                    'settings': settings,
                }
        validated_params = tapir_commands.GetCollisionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetCollisions",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetCollisionsResult.model_validate(response_dict)

    def get_comments_from_issue(
        self,
        issue_id: IssueId
    ) -> tapir_commands.GetCommentsFromIssueResult:
        """
                Retrieves comments information from the specified issue.

                Args:
        issue_id (IssueId)
                """
        params_dict = {
                    'issueId': issue_id,
                }
        validated_params = tapir_commands.GetCommentsFromIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetCommentsFromIssue",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetCommentsFromIssueResult.model_validate(response_dict)

    def get_connected_elements(
        self,
        elements: list[ElementIdArrayItem],
        connected_element_type: ElementType
    ) -> tapir_commands.GetConnectedElementsResult:
        """
                Gets connected elements of the given elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
        connected_element_type (ElementType)
                """
        params_dict = {
                    'elements': elements,
                    'connectedElementType': connected_element_type,
                }
        validated_params = tapir_commands.GetConnectedElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetConnectedElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetConnectedElementsResult.model_validate(response_dict)

    def get_current_revision_changes_of_layouts(
        self,
        layout_database_ids: list[DatabaseIdArrayItem]
    ) -> tapir_commands.GetCurrentRevisionChangesOfLayoutsResult:
        """
                Retrieves all changes belong to the last revision of the given layouts.

                Args:
        layout_database_ids (list[DatabaseIdArrayItem]): A list of Archicad databases.
                """
        params_dict = {
                    'layoutDatabaseIds': layout_database_ids,
                }
        validated_params = tapir_commands.GetCurrentRevisionChangesOfLayoutsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetCurrentRevisionChangesOfLayouts",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetCurrentRevisionChangesOfLayoutsResult.model_validate(response_dict)

    def get_current_window_type(
        self
    ) -> tapir_commands.GetCurrentWindowTypeResult:
        """
                Returns the type of the current (active) window.
                """
        response_dict = self._core.post_tapir_command("GetCurrentWindowType")
        return tapir_commands.GetCurrentWindowTypeResult.model_validate(response_dict)

    def get_database_id_from_navigator_item_id(
        self,
        navigator_item_ids: list[NavigatorItemIdArrayItem]
    ) -> tapir_commands.GetDatabaseIdFromNavigatorItemIdResult:
        """
                Gets the ID of the database associated with the supplied navigator item id

                Args:
        navigator_item_ids (list[NavigatorItemIdArrayItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = tapir_commands.GetDatabaseIdFromNavigatorItemIdParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetDatabaseIdFromNavigatorItemId",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetDatabaseIdFromNavigatorItemIdResult.model_validate(response_dict)

    def get_details_of_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> tapir_commands.GetDetailsOfElementsResult:
        """
                Gets the details of the given elements (geometry parameters etc).

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.GetDetailsOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetDetailsOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetDetailsOfElementsResult.model_validate(response_dict)

    def get_document_revisions(
        self
    ) -> tapir_commands.GetDocumentRevisionsResult:
        """
                Retrieves all document revisions.
                """
        response_dict = self._core.post_tapir_command("GetDocumentRevisions")
        return tapir_commands.GetDocumentRevisionsResult.model_validate(response_dict)

    def get_elements_attached_to_issue(
        self,
        issue_id: IssueId,
        type: IssueElementType
    ) -> tapir_commands.GetElementsAttachedToIssueResult:
        """
                Retrieves attached elements of the specified issue, filtered by attachment type.

                Args:
        issue_id (IssueId)
        type (IssueElementType)
                """
        params_dict = {
                    'issueId': issue_id,
                    'type': type,
                }
        validated_params = tapir_commands.GetElementsAttachedToIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetElementsAttachedToIssue",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetElementsAttachedToIssueResult.model_validate(response_dict)

    def get_favorites_by_type(
        self,
        element_type: ElementType
    ) -> tapir_commands.GetFavoritesByTypeResult:
        """
                Returns a list of the names of all favorites with the given element type

                Args:
        element_type (ElementType)
                """
        params_dict = {
                    'elementType': element_type,
                }
        validated_params = tapir_commands.GetFavoritesByTypeParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetFavoritesByType",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetFavoritesByTypeResult.model_validate(response_dict)

    def get_gdl_parameters_of_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> tapir_commands.GetGDLParametersOfElementsResult:
        """
                Gets all the GDL parameters (name, type, value) of the given elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.GetGDLParametersOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetGDLParametersOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetGDLParametersOfElementsResult.model_validate(response_dict)

    def get_geo_location(
        self
    ) -> tapir_commands.GetGeoLocationResult:
        """
                Gets the project location details.
                """
        response_dict = self._core.post_tapir_command("GetGeoLocation")
        return tapir_commands.GetGeoLocationResult.model_validate(response_dict)

    def get_hotlinks(
        self
    ) -> tapir_commands.GetHotlinksResult:
        """
                Gets the file system locations (path) of the hotlink modules. The hotlinks can have tree hierarchy in the project.
                """
        response_dict = self._core.post_tapir_command("GetHotlinks")
        return tapir_commands.GetHotlinksResult.model_validate(response_dict)

    def get_issues(
        self
    ) -> tapir_commands.GetIssuesResult:
        """
                Retrieves information about existing issues.
                """
        response_dict = self._core.post_tapir_command("GetIssues")
        return tapir_commands.GetIssuesResult.model_validate(response_dict)

    def get_libraries(
        self
    ) -> tapir_commands.GetLibrariesResult:
        """
                Gets the list of loaded libraries.
                """
        response_dict = self._core.post_tapir_command("GetLibraries")
        return tapir_commands.GetLibrariesResult.model_validate(response_dict)

    def get_model_view_options(
        self
    ) -> tapir_commands.GetModelViewOptionsResult:
        """
                Gets all model view options
                """
        response_dict = self._core.post_tapir_command("GetModelViewOptions")
        return tapir_commands.GetModelViewOptionsResult.model_validate(response_dict)

    def get_project_info(
        self
    ) -> tapir_commands.GetProjectInfoResult:
        """
                Retrieves information about the currently loaded project.
                """
        response_dict = self._core.post_tapir_command("GetProjectInfo")
        return tapir_commands.GetProjectInfoResult.model_validate(response_dict)

    def get_project_info_fields(
        self
    ) -> tapir_commands.GetProjectInfoFieldsResult:
        """
                Retrieves the names and values of all project info fields.
                """
        response_dict = self._core.post_tapir_command("GetProjectInfoFields")
        return tapir_commands.GetProjectInfoFieldsResult.model_validate(response_dict)

    def get_property_values_of_attributes(
        self,
        attribute_ids: list[AttributeIdArrayItem],
        properties: list[PropertyIdArrayItem]
    ) -> tapir_commands.GetPropertyValuesOfAttributesResult:
        """
                Returns the property values of the attributes for the given property.

                Args:
        attribute_ids (list[AttributeIdArrayItem]): A list of attributes.
        properties (list[PropertyIdArrayItem]): A list of property identifiers.
                """
        params_dict = {
                    'attributeIds': attribute_ids,
                    'properties': properties,
                }
        validated_params = tapir_commands.GetPropertyValuesOfAttributesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetPropertyValuesOfAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetPropertyValuesOfAttributesResult.model_validate(response_dict)

    def get_revision_changes(
        self
    ) -> tapir_commands.GetRevisionChangesResult:
        """
                Retrieves all changes.
                """
        response_dict = self._core.post_tapir_command("GetRevisionChanges")
        return tapir_commands.GetRevisionChangesResult.model_validate(response_dict)

    def get_revision_changes_of_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> tapir_commands.GetRevisionChangesOfElementsResult:
        """
                Retrieves the changes belong to the given elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.GetRevisionChangesOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetRevisionChangesOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetRevisionChangesOfElementsResult.model_validate(response_dict)

    def get_revision_issues(
        self
    ) -> tapir_commands.GetRevisionIssuesResult:
        """
                Retrieves all issues.
                """
        response_dict = self._core.post_tapir_command("GetRevisionIssues")
        return tapir_commands.GetRevisionIssuesResult.model_validate(response_dict)

    def get_stories(
        self
    ) -> tapir_commands.GetStoriesResult:
        """
                Retrieves information about the story sructure of the currently loaded project.
                """
        response_dict = self._core.post_tapir_command("GetStories")
        return tapir_commands.GetStoriesResult.model_validate(response_dict)

    def get_subelements_of_hierarchical_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> tapir_commands.GetSubelementsOfHierarchicalElementsResult:
        """
                Gets the subelements of the given hierarchical elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.GetSubelementsOfHierarchicalElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetSubelementsOfHierarchicalElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetSubelementsOfHierarchicalElementsResult.model_validate(response_dict)

    def get_view_2_d_transformations(
        self,
        databases: Union[list[DatabaseIdArrayItem], None] = None
    ) -> tapir_commands.GetView2DTransformationsResult:
        """
                Get zoom and rotation of 2D views

                Args:
        databases (Union[list[DatabaseIdArrayItem], None]): A list of Archicad databases.
                """
        params_dict = {
                    'databases': databases,
                }
        validated_params = tapir_commands.GetView2DTransformationsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetView2DTransformations",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetView2DTransformationsResult.model_validate(response_dict)

    def get_view_settings(
        self,
        navigator_item_ids: list[NavigatorItemIdArrayItem]
    ) -> tapir_commands.GetViewSettingsResult:
        """
                Gets the view settings of navigator items

                Args:
        navigator_item_ids (list[NavigatorItemIdArrayItem]): A list of navigator item
                        identifiers.
                """
        params_dict = {
                    'navigatorItemIds': navigator_item_ids,
                }
        validated_params = tapir_commands.GetViewSettingsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetViewSettings",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetViewSettingsResult.model_validate(response_dict)

    def get_zone_boundaries(
        self,
        zone_element_id: ElementId
    ) -> tapir_commands.GetZoneBoundariesResult:
        """
                Gets the boundaries of the given Zone (connected elements, neighbour zones, etc.).

                Args:
        zone_element_id (ElementId)
                """
        params_dict = {
                    'zoneElementId': zone_element_id,
                }
        validated_params = tapir_commands.GetZoneBoundariesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetZoneBoundaries",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.GetZoneBoundariesResult.model_validate(response_dict)

    def highlight_elements(
        self,
        elements: list[ElementIdArrayItem],
        highlighted_colors: list[HighlightedColor],
        wireframe_3_d: bool | None = None,
        non_highlighted_color: Annotated[Union[list[int], None], MinLen(min_length=4), MaxLen(max_length=4)] = None
    ) -> None:
        """
                Highlights the elements given in the elements array. In case of empty elements array removes all previously set highlights.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
        highlighted_colors (list[HighlightedColor]): A list of colors to highlight elements.
        wireframe_3_d (bool | None): Optional parameter. Switch non highlighted elements in the
                        3D window to wireframe.
        non_highlighted_color (Annotated[Union[list[int], None], MinLen(min_length=4),
                        MaxLen(max_length=4)]): Optional parameter. Color of the non highlighted elements as
                        an [r, g, b, a] array. Each component must be in the 0-255 range.
                """
        params_dict = {
                    'elements': elements,
                    'highlightedColors': highlighted_colors,
                    'wireframe3D': wireframe_3_d,
                    'nonHighlightedColor': non_highlighted_color,
                }
        validated_params = tapir_commands.HighlightElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "HighlightElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def import_issues_from_bcf(
        self,
        import_path: str,
        align_by_survey_point: bool
    ) -> None:
        """
                Imports issues from the specified BCF file.

                Args:
        import_path (str): The os path to the bcf file, including it's name.
        align_by_survey_point (bool): Align BCF views by Archicad Survey Point or Archicad
                        Project Origin.
                """
        params_dict = {
                    'importPath': import_path,
                    'alignBySurveyPoint': align_by_survey_point,
                }
        validated_params = tapir_commands.ImportIssuesFromBCFParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ImportIssuesFromBCF",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def move_elements(
        self,
        elements_with_move_vectors: list[ElementsWithMoveVector]
    ) -> tapir_commands.MoveElementsResult:
        """
                Moves elements with a given vector.

                Args:
        elements_with_move_vectors (list[ElementsWithMoveVector]): The elements with move vector
                        pairs.
                """
        params_dict = {
                    'elementsWithMoveVectors': elements_with_move_vectors,
                }
        validated_params = tapir_commands.MoveElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "MoveElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.MoveElementsResult.model_validate(response_dict)

    def open_project(
        self,
        project_file_path: str
    ) -> None:
        """
                Opens the given project.

                Args:
        project_file_path (str): The target project file to open.
                """
        params_dict = {
                    'projectFilePath': project_file_path,
                }
        validated_params = tapir_commands.OpenProjectParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "OpenProject",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def publish_publisher_set(
        self,
        publisher_set_name: Annotated[str, MinLen(min_length=1)],
        output_path: Annotated[str | None, MinLen(min_length=1)] = None
    ) -> None:
        """
                Performs a publish operation on the currently opened project. Only the given publisher set will be published.

                Args:
        publisher_set_name (Annotated[str, MinLen(min_length=1)]): The name of the publisher
                        set.
        output_path (Annotated[str | None, MinLen(min_length=1)]): Full local or LAN path for
                        publishing. Optional, by default the path set in the settings of the publiser set
                        will be used.
                """
        params_dict = {
                    'publisherSetName': publisher_set_name,
                    'outputPath': output_path,
                }
        validated_params = tapir_commands.PublishPublisherSetParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "PublishPublisherSet",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def quit_archicad(
        self
    ) -> None:
        """
                Performs a quit operation on the currently running Archicad instance.
                """
        response_dict = self._core.post_tapir_command("QuitArchicad")
        return None

    def release_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> None:
        """
                Releases elements in Teamwork mode.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.ReleaseElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ReleaseElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def reload_libraries(
        self
    ) -> None:
        """
                Executes the reload libraries command.
                """
        response_dict = self._core.post_tapir_command("ReloadLibraries")
        return None

    def reserve_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> tapir_commands.ReserveElementsResult:
        """
                Reserves elements in Teamwork mode.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.ReserveElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ReserveElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.ReserveElementsResult.model_validate(response_dict)

    def set_details_of_elements(
        self,
        elements_with_details: list[ElementsWithDetail]
    ) -> tapir_commands.SetDetailsOfElementsResult:
        """
                Sets the details of the given elements (floor, layer, order etc).

                Args:
        elements_with_details (list[ElementsWithDetail]): The elements with parameters.
                """
        params_dict = {
                    'elementsWithDetails': elements_with_details,
                }
        validated_params = tapir_commands.SetDetailsOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetDetailsOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.SetDetailsOfElementsResult.model_validate(response_dict)

    def set_gdl_parameters_of_elements(
        self,
        elements_with_gdl_parameters: list[ElementsWithGDLParameter]
    ) -> tapir_commands.SetGDLParametersOfElementsResult:
        """
                Sets the given GDL parameters of the given elements.

                Args:
        elements_with_gdl_parameters (list[ElementsWithGDLParameter]): The elements with GDL
                        parameters dictionary pairs.
                """
        params_dict = {
                    'elementsWithGDLParameters': elements_with_gdl_parameters,
                }
        validated_params = tapir_commands.SetGDLParametersOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetGDLParametersOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.SetGDLParametersOfElementsResult.model_validate(response_dict)

    def set_project_info_field(
        self,
        project_info_id: Annotated[str, MinLen(min_length=1)],
        project_info_value: Annotated[str, MinLen(min_length=1)]
    ) -> None:
        """
                Sets the value of a project info field.

                Args:
        project_info_id (Annotated[str, MinLen(min_length=1)]): The id of the project info
                        field.
        project_info_value (Annotated[str, MinLen(min_length=1)]): The new value of the project
                        info field.
                """
        params_dict = {
                    'projectInfoId': project_info_id,
                    'projectInfoValue': project_info_value,
                }
        validated_params = tapir_commands.SetProjectInfoFieldParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetProjectInfoField",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def set_property_values_of_attributes(
        self,
        attribute_property_values: list[AttributePropertyValue]
    ) -> tapir_commands.SetPropertyValuesOfAttributesResult:
        """
                Sets the property values of attributes.

                Args:
        attribute_property_values (list[AttributePropertyValue]): A list of attribute property
                        values.
                """
        params_dict = {
                    'attributePropertyValues': attribute_property_values,
                }
        validated_params = tapir_commands.SetPropertyValuesOfAttributesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetPropertyValuesOfAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.SetPropertyValuesOfAttributesResult.model_validate(response_dict)

    def set_stories(
        self,
        stories: list[StorySettings]
    ) -> None:
        """
                Sets the story sructure of the currently loaded project.

                Args:
        stories (list[StorySettings]): A list of story settings, used as input for creating or
                        modifying multiple stories.
                """
        params_dict = {
                    'stories': stories,
                }
        validated_params = tapir_commands.SetStoriesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetStories",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def set_view_settings(
        self,
        navigator_item_ids_with_view_settings: list[NavigatorItemIdsWithViewSetting]
    ) -> tapir_commands.SetViewSettingsResult:
        """
                Sets the view settings of navigator items

                Args:
        navigator_item_ids_with_view_settings (list[NavigatorItemIdsWithViewSetting])
                """
        params_dict = {
                    'navigatorItemIdsWithViewSettings': navigator_item_ids_with_view_settings,
                }
        validated_params = tapir_commands.SetViewSettingsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetViewSettings",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return tapir_commands.SetViewSettingsResult.model_validate(response_dict)

    def teamwork_receive(
        self
    ) -> None:
        """
                Performs a receive operation on the currently opened Teamwork project.
                """
        response_dict = self._core.post_tapir_command("TeamworkReceive")
        return None

    def teamwork_send(
        self
    ) -> None:
        """
                Performs a send operation on the currently opened Teamwork project.
                """
        response_dict = self._core.post_tapir_command("TeamworkSend")
        return None

    def update_drawings(
        self,
        elements: list[ElementIdArrayItem]
    ) -> None:
        """
                Performs a drawing update on the given elements.

                Args:
        elements (list[ElementIdArrayItem]): A list of elements.
                """
        params_dict = {
                    'elements': elements,
                }
        validated_params = tapir_commands.UpdateDrawingsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "UpdateDrawings",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None
