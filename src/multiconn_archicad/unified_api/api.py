# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from .official.addon import AddonCommands
from .official.attribute import AttributeCommands
from .official.basic import BasicCommands
from .official.classification import ClassificationCommands
from .official.component import ComponentCommands
from .official.element_geometry import ElementGeometryCommands
from .official.element_listing import ElementListingCommands
from .official.element_relation import ElementRelationCommands
from .official.layout_book import LayoutBookCommands
from .official.navigator_tree import NavigatorTreeCommands
from .official.property import PropertyCommands
from .official.view_map import ViewMapCommands
from .tapir.application import ApplicationCommands
from .tapir.attribute import AttributeCommands
from .tapir.developer import DeveloperCommands
from .tapir.element import ElementCommands
from .tapir.favorites import FavoritesCommands
from .tapir.issue_management import IssueManagementCommands
from .tapir.library import LibraryCommands
from .tapir.navigator import NavigatorCommands
from .tapir.project import ProjectCommands
from .tapir.property import PropertyCommands
from .tapir.revision_management import RevisionManagementCommands
from .tapir.teamwork import TeamworkCommands

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


# --- Container class for Tapir commands ---
class TapirApi:
    """A container for all command groups of the Archicad Tapir API."""
    def __init__(self, core: CoreCommands):
        self.application = ApplicationCommands(core)
        self.attribute = AttributeCommands(core)
        self.developer = DeveloperCommands(core)
        self.element = ElementCommands(core)
        self.favorites = FavoritesCommands(core)
        self.issue_management = IssueManagementCommands(core)
        self.library = LibraryCommands(core)
        self.navigator = NavigatorCommands(core)
        self.project = ProjectCommands(core)
        self.property = PropertyCommands(core)
        self.revision_management = RevisionManagementCommands(core)
        self.teamwork = TeamworkCommands(core)


# --- Container class for Official commands ---
class OfficialApi:
    """A container for all command groups of the Archicad Official API."""
    def __init__(self, core: CoreCommands):
        self.addon = AddonCommands(core)
        self.attribute = AttributeCommands(core)
        self.basic = BasicCommands(core)
        self.classification = ClassificationCommands(core)
        self.component = ComponentCommands(core)
        self.element_geometry = ElementGeometryCommands(core)
        self.element_listing = ElementListingCommands(core)
        self.element_relation = ElementRelationCommands(core)
        self.layout_book = LayoutBookCommands(core)
        self.navigator_tree = NavigatorTreeCommands(core)
        self.property = PropertyCommands(core)
        self.view_map = ViewMapCommands(core)


class UnifiedApi:
    """
    A unified, high-level, object-oriented interface for both the Tapir
    and Official Archicad JSON APIs, organized by command groups.
    """
    def __init__(self, core: CoreCommands):
        self.tapir = TapirApi(core)
        self.official = OfficialApi(core)