# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    CreatePropertyDefinitionsParameters,
    CreatePropertyDefinitionsResult,
    CreatePropertyGroupsParameters,
    CreatePropertyGroupsResult,
    DeletePropertyDefinitionsParameters,
    DeletePropertyDefinitionsResult,
    DeletePropertyGroupsParameters,
    DeletePropertyGroupsResult,
    GetAllPropertiesResult,
    GetPropertyValuesOfAttributesParameters,
    GetPropertyValuesOfAttributesResult,
    GetPropertyValuesOfElementsParameters,
    GetPropertyValuesOfElementsResult,
    SetPropertyValuesOfAttributesParameters,
    SetPropertyValuesOfAttributesResult,
    SetPropertyValuesOfElementsParameters,
    SetPropertyValuesOfElementsResult,
)
from multiconn_archicad.models.tapir.types import (
    AttributeIdArrayItem,
    AttributePropertyValue,
    ElementIdArrayItem,
    ElementPropertyValue,
    ErrorItem,
    FailedExecutionResult,
    PropertyDefinitionArrayItem,
    PropertyDetails,
    PropertyGroupArrayItem,
    PropertyGroupIdArrayItem,
    PropertyIdArrayItem,
    PropertyValuesArrayItem,
    SuccessfulExecutionResult,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class PropertyCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def create_property_definitions(
        self, property_definitions: list[PropertyDefinitionArrayItem]
    ) -> list[ErrorItem | PropertyIdArrayItem]:
        """
        Creates Custom Property Definitions based on the given parameters.

        Args:
            property_definitions (list[PropertyDefinitionArrayItem]): The parameters of the new
                properties.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyDefinitions": property_definitions,
        }
        validated_params = CreatePropertyDefinitionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePropertyDefinitions", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreatePropertyDefinitionsResult.model_validate(response_dict)
        return validated_response.propertyIds

    def create_property_groups(self, property_groups: list[PropertyGroupArrayItem]) -> list[PropertyGroupIdArrayItem]:
        """
        Creates Property Groups based on the given parameters.

        Args:
            property_groups (list[PropertyGroupArrayItem]): The parameters of the new property
                groups.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyGroups": property_groups,
        }
        validated_params = CreatePropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePropertyGroups", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreatePropertyGroupsResult.model_validate(response_dict)
        return validated_response.propertyGroupIds

    def delete_property_definitions(
        self, property_ids: list[PropertyIdArrayItem]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Deletes the given Custom Property Definitions.

        Args:
            property_ids (list[PropertyIdArrayItem]): The identifiers of properties to delete.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyIds": property_ids,
        }
        validated_params = DeletePropertyDefinitionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeletePropertyDefinitions", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = DeletePropertyDefinitionsResult.model_validate(response_dict)
        return validated_response.executionResults

    def delete_property_groups(
        self, property_group_ids: list[PropertyGroupIdArrayItem]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Deletes the given Custom Property Groups.

        Args:
            property_group_ids (list[PropertyGroupIdArrayItem]): The identifiers of property
                groups to delete.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyGroupIds": property_group_ids,
        }
        validated_params = DeletePropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeletePropertyGroups", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = DeletePropertyGroupsResult.model_validate(response_dict)
        return validated_response.executionResults

    def get_all_properties(self) -> list[PropertyDetails]:
        """
        Returns all user defined and built-in properties.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetAllProperties")
        validated_response = GetAllPropertiesResult.model_validate(response_dict)
        return validated_response.properties

    def get_property_values_of_attributes(
        self, attribute_ids: list[AttributeIdArrayItem], properties: list[PropertyIdArrayItem]
    ) -> list[ErrorItem | PropertyValuesArrayItem]:
        """
        Returns the property values of the attributes for the given property.

        Args:
            attribute_ids (list[AttributeIdArrayItem]): A list of attributes.
            properties (list[PropertyIdArrayItem]): A list of property identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
            "properties": properties,
        }
        validated_params = GetPropertyValuesOfAttributesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetPropertyValuesOfAttributes", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetPropertyValuesOfAttributesResult.model_validate(response_dict)
        return validated_response.propertyValuesForAttributes

    def get_property_values_of_elements(
        self, elements: list[ElementIdArrayItem], properties: list[PropertyIdArrayItem]
    ) -> list[ErrorItem | PropertyValuesArrayItem]:
        """
        Returns the property values of the elements for the given property. It works for
        subelements of hierarchal elements also.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            properties (list[PropertyIdArrayItem]): A list of property identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "properties": properties,
        }
        validated_params = GetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetPropertyValuesOfElements", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetPropertyValuesOfElementsResult.model_validate(response_dict)
        return validated_response.propertyValuesForElements

    def set_property_values_of_attributes(
        self, attribute_property_values: list[AttributePropertyValue]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Sets the property values of attributes.

        Args:
            attribute_property_values (list[AttributePropertyValue]): A list of attribute
                property values.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributePropertyValues": attribute_property_values,
        }
        validated_params = SetPropertyValuesOfAttributesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetPropertyValuesOfAttributes", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = SetPropertyValuesOfAttributesResult.model_validate(response_dict)
        return validated_response.executionResults

    def set_property_values_of_elements(
        self, element_property_values: list[ElementPropertyValue]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Sets the property values of elements. It works for subelements of hierarchal elements
        also.

        Args:
            element_property_values (list[ElementPropertyValue]): A list of element property
                values.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementPropertyValues": element_property_values,
        }
        validated_params = SetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetPropertyValuesOfElements", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = SetPropertyValuesOfElementsResult.model_validate(response_dict)
        return validated_response.executionResults
