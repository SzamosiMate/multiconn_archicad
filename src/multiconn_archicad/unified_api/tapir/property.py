# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import CreatePropertyDefinitionsParameters, CreatePropertyDefinitionsResult, CreatePropertyGroupsParameters, CreatePropertyGroupsResult, DeletePropertyDefinitionsParameters, DeletePropertyDefinitionsResult, DeletePropertyGroupsParameters, DeletePropertyGroupsResult, GetAllPropertiesResult, GetPropertyValuesOfAttributesParameters, GetPropertyValuesOfAttributesResult, GetPropertyValuesOfElementsParameters, GetPropertyValuesOfElementsResult, SetPropertyValuesOfAttributesParameters, SetPropertyValuesOfAttributesResult, SetPropertyValuesOfElementsParameters, SetPropertyValuesOfElementsResult
from multiconn_archicad.models.tapir.types import AttributeIdArrayItem, AttributePropertyValue, ElementIdArrayItem, ElementPropertyValue, PropertyDefinitionArrayItem, PropertyGroupArrayItem, PropertyGroupIdArrayItem, PropertyIdArrayItem

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class PropertyCommands:
    def __init__(self, core: CoreCommands):
        self._core = core


    def create_property_definitions(
        self,
        property_definitions: list[PropertyDefinitionArrayItem]
    ) -> CreatePropertyDefinitionsResult:
        """
        Creates Custom Property Definitions based on the given parameters.

        Args:
            property_definitions (list[PropertyDefinitionArrayItem]): The parameters of the new
                properties.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'propertyDefinitions': property_definitions,
            }
        validated_params = CreatePropertyDefinitionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePropertyDefinitions",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return CreatePropertyDefinitionsResult.model_validate(response_dict)


    def create_property_groups(
        self,
        property_groups: list[PropertyGroupArrayItem]
    ) -> CreatePropertyGroupsResult:
        """
        Creates Property Groups based on the given parameters.

        Args:
            property_groups (list[PropertyGroupArrayItem]): The parameters of the new property
                groups.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'propertyGroups': property_groups,
            }
        validated_params = CreatePropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePropertyGroups",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return CreatePropertyGroupsResult.model_validate(response_dict)


    def delete_property_definitions(
        self,
        property_ids: list[PropertyIdArrayItem]
    ) -> DeletePropertyDefinitionsResult:
        """
        Deletes the given Custom Property Definitions.

        Args:
            property_ids (list[PropertyIdArrayItem]): The identifiers of properties to delete.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'propertyIds': property_ids,
            }
        validated_params = DeletePropertyDefinitionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeletePropertyDefinitions",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return DeletePropertyDefinitionsResult.model_validate(response_dict)


    def delete_property_groups(
        self,
        property_group_ids: list[PropertyGroupIdArrayItem]
    ) -> DeletePropertyGroupsResult:
        """
        Deletes the given Custom Property Groups.

        Args:
            property_group_ids (list[PropertyGroupIdArrayItem]): The identifiers of property
                groups to delete.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'propertyGroupIds': property_group_ids,
            }
        validated_params = DeletePropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "DeletePropertyGroups",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return DeletePropertyGroupsResult.model_validate(response_dict)


    def get_all_properties(
        self
    ) -> GetAllPropertiesResult:
        """
        Returns all user defined and built-in properties.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command(
            "GetAllProperties"
        )
        return GetAllPropertiesResult.model_validate(response_dict)


    def get_property_values_of_attributes(
        self,
        attribute_ids: list[AttributeIdArrayItem],
        properties: list[PropertyIdArrayItem]
    ) -> GetPropertyValuesOfAttributesResult:
        """
        Returns the property values of the attributes for the given property.

        Args:
            attribute_ids (list[AttributeIdArrayItem]): A list of attributes.
            properties (list[PropertyIdArrayItem]): A list of property identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'attributeIds': attribute_ids,
                'properties': properties,
            }
        validated_params = GetPropertyValuesOfAttributesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetPropertyValuesOfAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetPropertyValuesOfAttributesResult.model_validate(response_dict)


    def get_property_values_of_elements(
        self,
        elements: list[ElementIdArrayItem],
        properties: list[PropertyIdArrayItem]
    ) -> GetPropertyValuesOfElementsResult:
        """
        Returns the property values of the elements for the given property. It works for
        subelements of hierarchal elements also.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            properties (list[PropertyIdArrayItem]): A list of property identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'elements': elements,
                'properties': properties,
            }
        validated_params = GetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetPropertyValuesOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetPropertyValuesOfElementsResult.model_validate(response_dict)


    def set_property_values_of_attributes(
        self,
        attribute_property_values: list[AttributePropertyValue]
    ) -> SetPropertyValuesOfAttributesResult:
        """
        Sets the property values of attributes.

        Args:
            attribute_property_values (list[AttributePropertyValue]): A list of attribute
                property values.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'attributePropertyValues': attribute_property_values,
            }
        validated_params = SetPropertyValuesOfAttributesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetPropertyValuesOfAttributes",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return SetPropertyValuesOfAttributesResult.model_validate(response_dict)


    def set_property_values_of_elements(
        self,
        element_property_values: list[ElementPropertyValue]
    ) -> SetPropertyValuesOfElementsResult:
        """
        Sets the property values of elements. It works for subelements of hierarchal elements
        also.

        Args:
            element_property_values (list[ElementPropertyValue]): A list of element property
                values.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'elementPropertyValues': element_property_values,
            }
        validated_params = SetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetPropertyValuesOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return SetPropertyValuesOfElementsResult.model_validate(response_dict)
