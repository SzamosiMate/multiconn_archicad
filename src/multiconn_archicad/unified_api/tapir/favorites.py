# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    ApplyFavoritesToElementDefaultsParameters,
    ApplyFavoritesToElementDefaultsResult,
    CreateFavoritesFromElementsParameters,
    CreateFavoritesFromElementsResult,
    GetFavoritesByTypeParameters,
    GetFavoritesByTypeResult,
)
from multiconn_archicad.models.tapir.types import (
    ElementType,
    FailedExecutionResult,
    FavoritesFromElement,
    SuccessfulExecutionResult,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class FavoritesCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def apply_favorites_to_element_defaults(
        self, favorites: list[str]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Apply the given favorites to element defaults.

        Args:
            favorites (list[str]): A list of favorite names

        Returns:
            list[FailedExecutionResult | SuccessfulExecutionResult]: A list of execution
                results.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "favorites": favorites,
        }
        validated_params = ApplyFavoritesToElementDefaultsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ApplyFavoritesToElementDefaults",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = ApplyFavoritesToElementDefaultsResult.model_validate(response_dict)
        return validated_response.executionResults

    def create_favorites_from_elements(
        self, favorites_from_elements: list[FavoritesFromElement]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Create favorites from the given elements.

        Args:
            favorites_from_elements (list[FavoritesFromElement])

        Returns:
            list[FailedExecutionResult | SuccessfulExecutionResult]: A list of execution
                results.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "favoritesFromElements": favorites_from_elements,
        }
        validated_params = CreateFavoritesFromElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateFavoritesFromElements", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreateFavoritesFromElementsResult.model_validate(response_dict)
        return validated_response.executionResults

    def get_favorites_by_type(self, element_type: ElementType) -> list[str]:
        """
        Returns a list of the names of all favorites with the given element type

        Args:
            element_type (ElementType)

        Returns:
            list[str]: A list of favorite names

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "elementType": element_type,
        }
        validated_params = GetFavoritesByTypeParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetFavoritesByType", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetFavoritesByTypeResult.model_validate(response_dict)
        return validated_response.favorites
