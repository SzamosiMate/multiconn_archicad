# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    AddCommentToIssueParameters,
    AttachElementsToIssueParameters,
    CreateIssueParameters,
    CreateIssueResult,
    DeleteIssueParameters,
    DetachElementsFromIssueParameters,
    ExportIssuesToBCFParameters,
    GetCommentsFromIssueParameters,
    GetCommentsFromIssueResult,
    GetElementsAttachedToIssueParameters,
    GetElementsAttachedToIssueResult,
    GetIssuesResult,
    ImportIssuesFromBCFParameters,
)
from multiconn_archicad.models.tapir.types import (
    ElementIdArrayItem,
    IssueCommentStatus,
    IssueElementType,
    IssueId,
    IssueIdArrayItem,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class IssueManagementCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def add_comment_to_issue(
        self, issue_id: IssueId, text: str, author: str | None = None, status: IssueCommentStatus | None = None
    ) -> None:
        """
        Adds a new comment to the specified issue.

        Args:
            issue_id (IssueId)
            text (str): Comment text to add.
            author (str | None): The author of the new comment.
            status (IssueCommentStatus | None)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "issueId": issue_id,
            "author": author,
            "status": status,
            "text": text,
        }
        validated_params = AddCommentToIssueParameters(**params_dict)
        self._core.post_tapir_command(
            "AddCommentToIssue", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def attach_elements_to_issue(
        self, issue_id: IssueId, elements: list[ElementIdArrayItem], type: IssueElementType
    ) -> None:
        """
        Attaches elements to the specified issue.

        Args:
            issue_id (IssueId)
            elements (list[ElementIdArrayItem]): A list of elements.
            type (IssueElementType)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "issueId": issue_id,
            "elements": elements,
            "type": type,
        }
        validated_params = AttachElementsToIssueParameters(**params_dict)
        self._core.post_tapir_command(
            "AttachElementsToIssue", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def create_issue(
        self, name: str, parent_issue_id: IssueId | None = None, tag_text: str | None = None
    ) -> CreateIssueResult:
        """
        Creates a new issue.

        Args:
            name (str): The name of the issue.
            parent_issue_id (IssueId | None)
            tag_text (str | None): Tag text of the issue, optional.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "name": name,
            "parentIssueId": parent_issue_id,
            "tagText": tag_text,
        }
        validated_params = CreateIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateIssue", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return CreateIssueResult.model_validate(response_dict)

    def delete_issue(self, issue_id: IssueId, accept_all_elements: bool | None = None) -> None:
        """
        Deletes the specified issue.

        Args:
            issue_id (IssueId)
            accept_all_elements (bool | None): Accept all creation/deletion/modification of the
                deleted issue. By default false.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "issueId": issue_id,
            "acceptAllElements": accept_all_elements,
        }
        validated_params = DeleteIssueParameters(**params_dict)
        self._core.post_tapir_command("DeleteIssue", validated_params.model_dump(by_alias=True, exclude_none=True))
        return None

    def detach_elements_from_issue(self, issue_id: IssueId, elements: list[ElementIdArrayItem]) -> None:
        """
        Detaches elements from the specified issue.

        Args:
            issue_id (IssueId)
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "issueId": issue_id,
            "elements": elements,
        }
        validated_params = DetachElementsFromIssueParameters(**params_dict)
        self._core.post_tapir_command(
            "DetachElementsFromIssue", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def export_issues_to_bcf(
        self,
        export_path: str,
        use_external_id: bool,
        align_by_survey_point: bool,
        issues: list[IssueIdArrayItem] | None = None,
    ) -> None:
        """
        Exports specified issues to a BCF file.

        Args:
            export_path (str): The os path to the bcf file, including it's name.
            use_external_id (bool): Use external IFC ID or Archicad IFC ID as referenced in BCF
                topics.
            align_by_survey_point (bool): Align BCF views by Archicad Survey Point or Archicad
                Project Origin.
            issues (list[IssueIdArrayItem] | None): Leave it empty to export all issues.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "issues": issues,
            "exportPath": export_path,
            "useExternalId": use_external_id,
            "alignBySurveyPoint": align_by_survey_point,
        }
        validated_params = ExportIssuesToBCFParameters(**params_dict)
        self._core.post_tapir_command(
            "ExportIssuesToBCF", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def get_comments_from_issue(self, issue_id: IssueId) -> GetCommentsFromIssueResult:
        """
        Retrieves comments information from the specified issue.

        Args:
            issue_id (IssueId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "issueId": issue_id,
        }
        validated_params = GetCommentsFromIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetCommentsFromIssue", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetCommentsFromIssueResult.model_validate(response_dict)

    def get_elements_attached_to_issue(
        self, issue_id: IssueId, type: IssueElementType
    ) -> GetElementsAttachedToIssueResult:
        """
        Retrieves attached elements of the specified issue, filtered by attachment type.

        Args:
            issue_id (IssueId)
            type (IssueElementType)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "issueId": issue_id,
            "type": type,
        }
        validated_params = GetElementsAttachedToIssueParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetElementsAttachedToIssue", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetElementsAttachedToIssueResult.model_validate(response_dict)

    def get_issues(self) -> GetIssuesResult:
        """
        Retrieves information about existing issues.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetIssues")
        return GetIssuesResult.model_validate(response_dict)

    def import_issues_from_bcf(self, import_path: str, align_by_survey_point: bool) -> None:
        """
        Imports issues from the specified BCF file.

        Args:
            import_path (str): The os path to the bcf file, including it's name.
            align_by_survey_point (bool): Align BCF views by Archicad Survey Point or Archicad
                Project Origin.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "importPath": import_path,
            "alignBySurveyPoint": align_by_survey_point,
        }
        validated_params = ImportIssuesFromBCFParameters(**params_dict)
        self._core.post_tapir_command(
            "ImportIssuesFromBCF", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None
