# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    CreateBuildingMaterialsParameters,
    CreateBuildingMaterialsResult,
    CreateCompositesParameters,
    CreateCompositesResult,
    CreateLayersParameters,
    CreateLayersResult,
    CreateSurfacesParameters,
    CreateSurfacesResult,
    GetAttributesByTypeParameters,
    GetAttributesByTypeResult,
    GetBuildingMaterialPhysicalPropertiesParameters,
    GetBuildingMaterialPhysicalPropertiesResult,
)
from multiconn_archicad.models.tapir.types import (
    Attribute,
    AttributeIdArrayItem,
    AttributeType,
    BuildingMaterialDataArrayItem,
    CompositeDataArrayItem,
    LayerDataArrayItem,
    Property,
    SurfaceDataArrayItem,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class AttributeCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def create_building_materials(
        self, building_material_data_array: list[BuildingMaterialDataArrayItem], overwrite_existing: None | bool = None
    ) -> list[AttributeIdArrayItem]:
        """
        Creates Building Material attributes based on the given parameters.

        Args:
            building_material_data_array (list[BuildingMaterialDataArrayItem]): Array of data to
                create new Building Materials.
            overwrite_existing (None | bool): Overwrite the Building Material if exists with the
                same name. The default is false.

        Returns:
            list[AttributeIdArrayItem]: A list of attributes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "buildingMaterialDataArray": building_material_data_array,
            "overwriteExisting": overwrite_existing,
        }
        validated_params = CreateBuildingMaterialsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateBuildingMaterials", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreateBuildingMaterialsResult.model_validate(response_dict)
        return validated_response.attributeIds

    def create_composites(
        self, composite_data_array: list[CompositeDataArrayItem], overwrite_existing: None | bool = None
    ) -> list[AttributeIdArrayItem]:
        """
        Creates Composite attributes based on the given parameters.

        Args:
            composite_data_array (list[CompositeDataArrayItem]): Array of data to create
                Composites.
            overwrite_existing (None | bool): Overwrite the Composite if exists with the same
                name. The default is false.

        Returns:
            list[AttributeIdArrayItem]: A list of attributes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "compositeDataArray": composite_data_array,
            "overwriteExisting": overwrite_existing,
        }
        validated_params = CreateCompositesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateComposites", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreateCompositesResult.model_validate(response_dict)
        return validated_response.attributeIds

    def create_layers(
        self, layer_data_array: list[LayerDataArrayItem], overwrite_existing: None | bool = None
    ) -> list[AttributeIdArrayItem]:
        """
        Creates Layer attributes based on the given parameters.

        Args:
            layer_data_array (list[LayerDataArrayItem]): Array of data to create new Layers.
            overwrite_existing (None | bool): Overwrite the Layer if exists with the same name.
                The default is false.

        Returns:
            list[AttributeIdArrayItem]: A list of attributes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "layerDataArray": layer_data_array,
            "overwriteExisting": overwrite_existing,
        }
        validated_params = CreateLayersParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateLayers", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreateLayersResult.model_validate(response_dict)
        return validated_response.attributeIds

    def create_surfaces(
        self, surface_data_array: list[SurfaceDataArrayItem], overwrite_existing: None | bool = None
    ) -> list[AttributeIdArrayItem]:
        """
        Creates Surface attributes based on the given parameters.

        Args:
            surface_data_array (list[SurfaceDataArrayItem]): Array of data to create new
                surfaces.
            overwrite_existing (None | bool): Overwrite the Surface if exists with the same
                name. The default is false.

        Returns:
            list[AttributeIdArrayItem]: A list of attributes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "surfaceDataArray": surface_data_array,
            "overwriteExisting": overwrite_existing,
        }
        validated_params = CreateSurfacesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateSurfaces", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreateSurfacesResult.model_validate(response_dict)
        return validated_response.attributeIds

    def get_attributes_by_type(self, attribute_type: AttributeType) -> list[Attribute]:
        """
        Returns the details of every attribute of the given type.

        Args:
            attribute_type (AttributeType)

        Returns:
            list[Attribute]: Details of attributes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "attributeType": attribute_type,
        }
        validated_params = GetAttributesByTypeParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetAttributesByType", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetAttributesByTypeResult.model_validate(response_dict)
        return validated_response.attributes

    def get_building_material_physical_properties(self, attribute_ids: list[AttributeIdArrayItem]) -> list[Property]:
        """
        Retrieves the physical properties of the given Building Materials.

        Args:
            attribute_ids (list[AttributeIdArrayItem]): A list of attributes.

        Returns:
            list[Property]: Physical properties list.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetBuildingMaterialPhysicalPropertiesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetBuildingMaterialPhysicalProperties",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = GetBuildingMaterialPhysicalPropertiesResult.model_validate(response_dict)
        return validated_response.properties
