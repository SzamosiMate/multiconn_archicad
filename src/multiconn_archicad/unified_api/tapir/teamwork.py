# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    ReleaseElementsParameters,
    ReserveElementsParameters,
    ReserveElementsResult,
)
from multiconn_archicad.models.tapir.types import ElementIdArrayItem

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class TeamworkCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def release_elements(self, elements: list[ElementIdArrayItem]) -> None:
        """
        Releases elements in Teamwork mode.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = ReleaseElementsParameters(**params_dict)
        self._core.post_tapir_command(
            "ReleaseElements", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        return None

    def reserve_elements(self, elements: list[ElementIdArrayItem]) -> ReserveElementsResult:
        """
        Reserves elements in Teamwork mode.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Returns:
            ReserveElementsResult

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = ReserveElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ReserveElements", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = ReserveElementsResult.model_validate(response_dict)
        return validated_response

    def teamwork_receive(self) -> None:
        """
        Performs a receive operation on the currently opened Teamwork project.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        self._core.post_tapir_command("TeamworkReceive")
        return None

    def teamwork_send(self) -> None:
        """
        Performs a send operation on the currently opened Teamwork project.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        self._core.post_tapir_command("TeamworkSend")
        return None
