# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    ChangeSelectionOfElementsParameters,
    ChangeSelectionOfElementsResult,
    CreateColumnsParameters,
    CreateColumnsResult,
    CreateMeshesParameters,
    CreateMeshesResult,
    CreateObjectsParameters,
    CreateObjectsResult,
    CreatePolylinesParameters,
    CreatePolylinesResult,
    CreateSlabsParameters,
    CreateSlabsResult,
    CreateZonesParameters,
    CreateZonesResult,
    DeleteElementsParameters,
    FilterElementsParameters,
    FilterElementsResult,
    Get3DBoundingBoxesParameters,
    Get3DBoundingBoxesResult,
    GetAllElementsParameters,
    GetAllElementsResult,
    GetClassificationsOfElementsParameters,
    GetClassificationsOfElementsResult,
    GetCollisionsParameters,
    GetCollisionsResult,
    GetConnectedElementsParameters,
    GetConnectedElementsResult,
    GetDetailsOfElementsParameters,
    GetDetailsOfElementsResult,
    GetElementsByTypeParameters,
    GetElementsByTypeResult,
    GetGDLParametersOfElementsParameters,
    GetGDLParametersOfElementsResult,
    GetSelectedElementsResult,
    GetSubelementsOfHierarchicalElementsParameters,
    GetSubelementsOfHierarchicalElementsResult,
    GetZoneBoundariesParameters,
    GetZoneBoundariesResult,
    HighlightElementsParameters,
    MoveElementsParameters,
    MoveElementsResult,
    SetClassificationsOfElementsParameters,
    SetClassificationsOfElementsResult,
    SetDetailsOfElementsParameters,
    SetDetailsOfElementsResult,
    SetGDLParametersOfElementsParameters,
    SetGDLParametersOfElementsResult,
)
from multiconn_archicad.models.tapir.types import (
    BoundingBox3DArrayItem,
    ClassificationSystemIdArrayItem,
    Collision,
    ColumnsDatum,
    ConnectedElement,
    DatabaseIdArrayItem,
    DetailsOfElement,
    ElementClassification,
    ElementClassificationItemArray,
    ElementFilter,
    ElementId,
    ElementIdArrayItem,
    ElementType,
    ElementsWithDetail,
    ElementsWithGDLParameter,
    ElementsWithMoveVector,
    ErrorItem,
    FailedExecutionResult,
    GDLParameterList,
    HighlightedColor,
    MeshesDatum,
    ObjectsDatum,
    PolylinesDatum,
    Settings,
    SlabsDatum,
    Subelement,
    SuccessfulExecutionResult,
    ZoneBoundary,
    ZonesDatum,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class ElementCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def change_selection_of_elements(
        self,
        add_elements_to_selection: None | list[ElementIdArrayItem] = None,
        remove_elements_from_selection: None | list[ElementIdArrayItem] = None,
    ) -> ChangeSelectionOfElementsResult:
        """
        Adds/removes a number of elements to/from the current selection.

        Args:
            add_elements_to_selection (None | list[ElementIdArrayItem]): A list of elements.
            remove_elements_from_selection (None | list[ElementIdArrayItem]): A list of
                elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "addElementsToSelection": add_elements_to_selection,
            "removeElementsFromSelection": remove_elements_from_selection,
        }
        validated_params = ChangeSelectionOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "ChangeSelectionOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = ChangeSelectionOfElementsResult.model_validate(response_dict)
        return validated_response

    def create_columns(self, columns_data: list[ColumnsDatum]) -> list[ElementIdArrayItem]:
        """
        Creates Column elements based on the given parameters.

        Args:
            columns_data (list[ColumnsDatum]): Array of data to create Columns.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "columnsData": columns_data,
        }
        validated_params = CreateColumnsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateColumns", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = CreateColumnsResult.model_validate(response_dict)
        return validated_response.elements

    def create_meshes(self, meshes_data: list[MeshesDatum]) -> list[ElementIdArrayItem]:
        """
        Creates Mesh elements based on the given parameters.

        Args:
            meshes_data (list[MeshesDatum]): Array of data to create Meshes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "meshesData": meshes_data,
        }
        validated_params = CreateMeshesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateMeshes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = CreateMeshesResult.model_validate(response_dict)
        return validated_response.elements

    def create_objects(self, objects_data: list[ObjectsDatum]) -> list[ElementIdArrayItem]:
        """
        Creates Object elements based on the given parameters.

        Args:
            objects_data (list[ObjectsDatum]): Array of data to create Objects.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "objectsData": objects_data,
        }
        validated_params = CreateObjectsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateObjects", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = CreateObjectsResult.model_validate(response_dict)
        return validated_response.elements

    def create_polylines(self, polylines_data: list[PolylinesDatum]) -> list[ElementIdArrayItem]:
        """
        Creates Polyline elements based on the given parameters.

        Args:
            polylines_data (list[PolylinesDatum]): Array of data to create Polylines.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "polylinesData": polylines_data,
        }
        validated_params = CreatePolylinesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreatePolylines", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = CreatePolylinesResult.model_validate(response_dict)
        return validated_response.elements

    def create_slabs(self, slabs_data: list[SlabsDatum]) -> list[ElementIdArrayItem]:
        """
        Creates Slab elements based on the given parameters.

        Args:
            slabs_data (list[SlabsDatum]): Array of data to create Slabs.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "slabsData": slabs_data,
        }
        validated_params = CreateSlabsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateSlabs", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = CreateSlabsResult.model_validate(response_dict)
        return validated_response.elements

    def create_zones(self, zones_data: list[ZonesDatum]) -> list[ElementIdArrayItem]:
        """
        Creates Zone elements based on the given parameters.

        Args:
            zones_data (list[ZonesDatum]): Array of data to create Zones.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "zonesData": zones_data,
        }
        validated_params = CreateZonesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "CreateZones", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = CreateZonesResult.model_validate(response_dict)
        return validated_response.elements

    def delete_elements(self, elements: list[ElementIdArrayItem]) -> None:
        """
        Deletes elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = DeleteElementsParameters(**params_dict)
        self._core.post_tapir_command("DeleteElements", validated_params.model_dump(by_alias=True, exclude_none=True))
        return None

    def filter_elements(
        self, elements: list[ElementIdArrayItem], filters: None | list[ElementFilter] = None
    ) -> list[ElementIdArrayItem]:
        """
        Tests an elements by the given criterias.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            filters (None | list[ElementFilter])

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "filters": filters,
        }
        validated_params = FilterElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "FilterElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = FilterElementsResult.model_validate(response_dict)
        return validated_response.elements

    def get_3d_bounding_boxes(self, elements: list[ElementIdArrayItem]) -> list[BoundingBox3DArrayItem | ErrorItem]:
        """
        Get the 3D bounding box of elements. The bounding box is calculated from the global
        origin in the 3D view. The output is the array of the bounding boxes respective to the
        input array of elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = Get3DBoundingBoxesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "Get3DBoundingBoxes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = Get3DBoundingBoxesResult.model_validate(response_dict)
        return validated_response.boundingBoxes3D

    def get_all_elements(
        self, filters: None | list[ElementFilter] = None, databases: None | list[DatabaseIdArrayItem] = None
    ) -> GetAllElementsResult:
        """
        Returns the identifier of all elements on the plan. Use the optional filter parameter
        for filtering.

        Args:
            filters (None | list[ElementFilter])
            databases (None | list[DatabaseIdArrayItem]): A list of Archicad databases.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "filters": filters,
            "databases": databases,
        }
        validated_params = GetAllElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetAllElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetAllElementsResult.model_validate(response_dict)
        return validated_response

    def get_classifications_of_elements(
        self, elements: list[ElementIdArrayItem], classification_system_ids: list[ClassificationSystemIdArrayItem]
    ) -> list[ElementClassificationItemArray | ErrorItem]:
        """
        Returns the classification of the given elements in the given classification systems. It
        works for subelements of hierarchal elements also.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of
                classification system identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "classificationSystemIds": classification_system_ids,
        }
        validated_params = GetClassificationsOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetClassificationsOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetClassificationsOfElementsResult.model_validate(response_dict)
        return validated_response.elementClassifications

    def get_collisions(
        self,
        elements_group_1: list[ElementIdArrayItem],
        elements_group_2: list[ElementIdArrayItem],
        settings: None | Settings = None,
    ) -> list[Collision]:
        """
        Detect collisions between the given two groups of elements.

        Args:
            elements_group_1 (list[ElementIdArrayItem]): A list of elements.
            elements_group_2 (list[ElementIdArrayItem]): A list of elements.
            settings (None | Settings)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementsGroup1": elements_group_1,
            "elementsGroup2": elements_group_2,
            "settings": settings,
        }
        validated_params = GetCollisionsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetCollisions", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetCollisionsResult.model_validate(response_dict)
        return validated_response.collisions

    def get_connected_elements(
        self, elements: list[ElementIdArrayItem], connected_element_type: ElementType
    ) -> list[ConnectedElement]:
        """
        Gets connected elements of the given elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            connected_element_type (ElementType)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "connectedElementType": connected_element_type,
        }
        validated_params = GetConnectedElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetConnectedElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetConnectedElementsResult.model_validate(response_dict)
        return validated_response.connectedElements

    def get_details_of_elements(self, elements: list[ElementIdArrayItem]) -> list[DetailsOfElement]:
        """
        Gets the details of the given elements (geometry parameters etc).

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = GetDetailsOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetDetailsOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetDetailsOfElementsResult.model_validate(response_dict)
        return validated_response.detailsOfElements

    def get_elements_by_type(
        self,
        element_type: ElementType,
        filters: None | list[ElementFilter] = None,
        databases: None | list[DatabaseIdArrayItem] = None,
    ) -> GetElementsByTypeResult:
        """
        Returns the identifier of every element of the given type on the plan. It works for any
        type. Use the optional filter parameter for filtering.

        Args:
            element_type (ElementType)
            filters (None | list[ElementFilter])
            databases (None | list[DatabaseIdArrayItem]): A list of Archicad databases.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementType": element_type,
            "filters": filters,
            "databases": databases,
        }
        validated_params = GetElementsByTypeParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetElementsByType", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetElementsByTypeResult.model_validate(response_dict)
        return validated_response

    def get_gdl_parameters_of_elements(self, elements: list[ElementIdArrayItem]) -> list[GDLParameterList]:
        """
        Gets all the GDL parameters (name, type, value) of the given elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = GetGDLParametersOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetGDLParametersOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetGDLParametersOfElementsResult.model_validate(response_dict)
        return validated_response.gdlParametersOfElements

    def get_selected_elements(self) -> list[ElementIdArrayItem]:
        """
        Gets the list of the currently selected elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetSelectedElements")
        validated_response = GetSelectedElementsResult.model_validate(response_dict)
        return validated_response.elements

    def get_subelements_of_hierarchical_elements(self, elements: list[ElementIdArrayItem]) -> list[Subelement]:
        """
        Gets the subelements of the given hierarchical elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = GetSubelementsOfHierarchicalElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetSubelementsOfHierarchicalElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetSubelementsOfHierarchicalElementsResult.model_validate(response_dict)
        return validated_response.subelements

    def get_zone_boundaries(self, zone_element_id: ElementId) -> list[ZoneBoundary]:
        """
        Gets the boundaries of the given Zone (connected elements, neighbour zones, etc.).

        Args:
            zone_element_id (ElementId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "zoneElementId": zone_element_id,
        }
        validated_params = GetZoneBoundariesParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetZoneBoundaries", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetZoneBoundariesResult.model_validate(response_dict)
        return validated_response.zoneBoundaries

    def highlight_elements(
        self,
        elements: list[ElementIdArrayItem],
        highlighted_colors: list[HighlightedColor],
        wireframe_3d: None | bool = None,
        non_highlighted_color: None | list[int] = None,
    ) -> None:
        """
        Highlights the elements given in the elements array. In case of empty elements array
        removes all previously set highlights.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            highlighted_colors (list[HighlightedColor]): A list of colors to highlight elements.
            wireframe_3d (None | bool): Optional parameter. Switch non highlighted elements in
                the 3D window to wireframe.
            non_highlighted_color (None | list[int]): Optional parameter. Color of the non
                highlighted elements as an [r, g, b, a] array. Each component must be in the
                0-255 range.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "highlightedColors": highlighted_colors,
            "wireframe3D": wireframe_3d,
            "nonHighlightedColor": non_highlighted_color,
        }
        validated_params = HighlightElementsParameters(**params_dict)
        self._core.post_tapir_command(
            "HighlightElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def move_elements(
        self, elements_with_move_vectors: list[ElementsWithMoveVector]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Moves elements with a given vector.

        Args:
            elements_with_move_vectors (list[ElementsWithMoveVector]): The elements with move
                vector pairs.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementsWithMoveVectors": elements_with_move_vectors,
        }
        validated_params = MoveElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "MoveElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = MoveElementsResult.model_validate(response_dict)
        return validated_response.executionResults

    def set_classifications_of_elements(
        self, element_classifications: list[ElementClassification]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Sets the classifications of elements. In order to set the classification of an element
        to unclassified, omit the classificationItemId field. It works for subelements of
        hierarchal elements also.

        Args:
            element_classifications (list[ElementClassification]): A list of element
                classification identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementClassifications": element_classifications,
        }
        validated_params = SetClassificationsOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetClassificationsOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = SetClassificationsOfElementsResult.model_validate(response_dict)
        return validated_response.executionResults

    def set_details_of_elements(
        self, elements_with_details: list[ElementsWithDetail]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Sets the details of the given elements (floor, layer, order etc).

        Args:
            elements_with_details (list[ElementsWithDetail]): The elements with parameters.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementsWithDetails": elements_with_details,
        }
        validated_params = SetDetailsOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetDetailsOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = SetDetailsOfElementsResult.model_validate(response_dict)
        return validated_response.executionResults

    def set_gdl_parameters_of_elements(
        self, elements_with_gdl_parameters: list[ElementsWithGDLParameter]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Sets the given GDL parameters of the given elements.

        Args:
            elements_with_gdl_parameters (list[ElementsWithGDLParameter]): The elements with GDL
                parameters dictionary pairs.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementsWithGDLParameters": elements_with_gdl_parameters,
        }
        validated_params = SetGDLParametersOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "SetGDLParametersOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = SetGDLParametersOfElementsResult.model_validate(response_dict)
        return validated_response.executionResults
