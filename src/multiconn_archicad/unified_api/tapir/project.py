# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    GetGeoLocationResult,
    GetHotlinksResult,
    GetProjectInfoFieldsResult,
    GetProjectInfoResult,
    GetStoriesResult,
    OpenProjectParameters,
    SetProjectInfoFieldParameters,
    SetStoriesParameters,
)
from multiconn_archicad.models.tapir.types import FieldModel, Hotlink, StorySettings

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class ProjectCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def get_geo_location(self) -> GetGeoLocationResult:
        """
        Gets the project location details.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetGeoLocation")
        validated_response = GetGeoLocationResult.model_validate(response_dict)
        return validated_response

    def get_hotlinks(self) -> list[Hotlink]:
        """
        Gets the file system locations (path) of the hotlink modules. The hotlinks can have tree
        hierarchy in the project.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetHotlinks")
        validated_response = GetHotlinksResult.model_validate(response_dict)
        return validated_response.hotlinks

    def get_project_info(self) -> GetProjectInfoResult:
        """
        Retrieves information about the currently loaded project.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetProjectInfo")
        validated_response = GetProjectInfoResult.model_validate(response_dict)
        return validated_response

    def get_project_info_fields(self) -> list[FieldModel]:
        """
        Retrieves the names and values of all project info fields.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetProjectInfoFields")
        validated_response = GetProjectInfoFieldsResult.model_validate(response_dict)
        return validated_response.fields

    def get_stories(self) -> GetStoriesResult:
        """
        Retrieves information about the story sructure of the currently loaded project.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetStories")
        validated_response = GetStoriesResult.model_validate(response_dict)
        return validated_response

    def open_project(self, project_file_path: str) -> None:
        """
        Opens the given project.

        Args:
            project_file_path (str): The target project file to open.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "projectFilePath": project_file_path,
        }
        validated_params = OpenProjectParameters(**params_dict)
        self._core.post_tapir_command("OpenProject", validated_params.model_dump(by_alias=True, exclude_none=True))
        return None

    def set_project_info_field(self, project_info_id: str, project_info_value: str) -> None:
        """
        Sets the value of a project info field.

        Args:
            project_info_id (str): The id of the project info field.
            project_info_value (str): The new value of the project info field.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "projectInfoId": project_info_id,
            "projectInfoValue": project_info_value,
        }
        validated_params = SetProjectInfoFieldParameters(**params_dict)
        self._core.post_tapir_command(
            "SetProjectInfoField", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def set_stories(self, stories: list[StorySettings]) -> None:
        """
        Sets the story sructure of the currently loaded project.

        Args:
            stories (list[StorySettings]): A list of story settings, used as input for creating
                or modifying multiple stories.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "stories": stories,
        }
        validated_params = SetStoriesParameters(**params_dict)
        self._core.post_tapir_command("SetStories", validated_params.model_dump(by_alias=True, exclude_none=True))
        return None
