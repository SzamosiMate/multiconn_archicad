# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.tapir.commands import (
    GetCurrentRevisionChangesOfLayoutsParameters,
    GetCurrentRevisionChangesOfLayoutsResult,
    GetDocumentRevisionsResult,
    GetRevisionChangesOfElementsParameters,
    GetRevisionChangesOfElementsResult,
    GetRevisionChangesResult,
    GetRevisionIssuesResult,
)
from multiconn_archicad.models.tapir.types import (
    DatabaseIdArrayItem,
    DocumentRevision,
    ElementIdArrayItem,
    ErrorItem,
    RevisionChange,
    RevisionChangesArrayItem,
    RevisionIssue,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class RevisionManagementCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def get_current_revision_changes_of_layouts(
        self, layout_database_ids: list[DatabaseIdArrayItem]
    ) -> ErrorItem | RevisionChangesArrayItem:
        """
        Retrieves all changes belong to the last revision of the given layouts.

        Args:
            layout_database_ids (list[DatabaseIdArrayItem]): A list of Archicad databases.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "layoutDatabaseIds": layout_database_ids,
        }
        validated_params = GetCurrentRevisionChangesOfLayoutsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetCurrentRevisionChangesOfLayouts", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetCurrentRevisionChangesOfLayoutsResult.model_validate(response_dict)
        return validated_response.currentRevisionChangesOfLayouts

    def get_document_revisions(self) -> list[DocumentRevision]:
        """
        Retrieves all document revisions.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetDocumentRevisions")
        validated_response = GetDocumentRevisionsResult.model_validate(response_dict)
        return validated_response.documentRevisions

    def get_revision_changes(self) -> list[RevisionChange]:
        """
        Retrieves all changes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetRevisionChanges")
        validated_response = GetRevisionChangesResult.model_validate(response_dict)
        return validated_response.revisionChanges

    def get_revision_changes_of_elements(
        self, elements: list[ElementIdArrayItem]
    ) -> ErrorItem | RevisionChangesArrayItem:
        """
        Retrieves the changes belong to the given elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = GetRevisionChangesOfElementsParameters(**params_dict)
        response_dict = self._core.post_tapir_command(
            "GetRevisionChangesOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetRevisionChangesOfElementsResult.model_validate(response_dict)
        return validated_response.revisionChangesOfElements

    def get_revision_issues(self) -> list[RevisionIssue]:
        """
        Retrieves all issues.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_tapir_command("GetRevisionIssues")
        validated_response = GetRevisionIssuesResult.model_validate(response_dict)
        return validated_response.revisionIssues
