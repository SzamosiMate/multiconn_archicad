# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import (
    GetAllClassificationSystemsResult,
    GetAllClassificationsInSystemParameters,
    GetAllClassificationsInSystemResult,
    GetClassificationItemAvailabilityParameters,
    GetClassificationItemAvailabilityResult,
    GetClassificationSystemIdsResult,
    GetClassificationSystemsParameters,
    GetClassificationSystemsResult,
    GetClassificationsOfElementsParameters,
    GetClassificationsOfElementsResult,
    GetDetailsOfClassificationItemsParameters,
    GetDetailsOfClassificationItemsResult,
    SetClassificationsOfElementsParameters,
    SetClassificationsOfElementsResult,
)
from multiconn_archicad.models.official.types import (
    ClassificationItemArrayItem,
    ClassificationItemAvailabilityWrapperItem,
    ClassificationItemIdArrayItem,
    ClassificationItemWrapperItem,
    ClassificationSystem,
    ClassificationSystemId,
    ClassificationSystemIdArrayItem,
    ClassificationSystemWrapperItem,
    ElementClassification,
    ElementClassificationWrapperItem,
    ElementIdArrayItem,
    ErrorItem,
    FailedExecutionResult,
    SuccessfulExecutionResult,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class ClassificationCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def get_all_classification_systems(self) -> list[ClassificationSystem]:
        """
        Returns the list of available classification systems.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_command("API.GetAllClassificationSystems")
        validated_response = GetAllClassificationSystemsResult.model_validate(response_dict)
        return validated_response.classificationSystems

    def get_all_classifications_in_system(
        self, classification_system_id: ClassificationSystemId
    ) -> list[ClassificationItemArrayItem]:
        """
        Returns the tree of classifications in the given classification system.

        Args:
            classification_system_id (ClassificationSystemId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "classificationSystemId": classification_system_id,
        }
        validated_params = GetAllClassificationsInSystemParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllClassificationsInSystem",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = GetAllClassificationsInSystemResult.model_validate(response_dict)
        return validated_response.classificationItems

    def get_classification_item_availability(
        self, classification_item_ids: list[ClassificationItemIdArrayItem]
    ) -> list[ClassificationItemAvailabilityWrapperItem | ErrorItem]:
        """
        Returns the ids of property definitions available for a given classification item.

        Args:
            classification_item_ids (list[ClassificationItemIdArrayItem]): A list of
                classification item identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "classificationItemIds": classification_item_ids,
        }
        validated_params = GetClassificationItemAvailabilityParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetClassificationItemAvailability",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = GetClassificationItemAvailabilityResult.model_validate(response_dict)
        return validated_response.classificationItemAvailabilityList

    def get_classification_system_ids(self) -> list[ClassificationSystemIdArrayItem]:
        """
        Returns the list of available classification systems.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_command("API.GetClassificationSystemIds")
        validated_response = GetClassificationSystemIdsResult.model_validate(response_dict)
        return validated_response.classificationSystemIds

    def get_classification_systems(
        self, classification_system_ids: list[ClassificationSystemIdArrayItem]
    ) -> list[ClassificationSystemWrapperItem | ErrorItem]:
        """
        Returns the details of classification systems identified by their GUIDs.

        Args:
            classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of
                classification system identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "classificationSystemIds": classification_system_ids,
        }
        validated_params = GetClassificationSystemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetClassificationSystems", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetClassificationSystemsResult.model_validate(response_dict)
        return validated_response.classificationSystems

    def get_classifications_of_elements(
        self, elements: list[ElementIdArrayItem], classification_system_ids: list[ClassificationSystemIdArrayItem]
    ) -> list[ElementClassificationWrapperItem | ErrorItem]:
        """
        Returns the classification of the given elements in the given classification systems.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of
                classification system identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "classificationSystemIds": classification_system_ids,
        }
        validated_params = GetClassificationsOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetClassificationsOfElements",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = GetClassificationsOfElementsResult.model_validate(response_dict)
        return validated_response.elementClassifications

    def get_details_of_classification_items(
        self, classification_item_ids: list[ClassificationItemIdArrayItem]
    ) -> list[ClassificationItemWrapperItem | ErrorItem]:
        """
        Returns the details of classification items.

        Args:
            classification_item_ids (list[ClassificationItemIdArrayItem]): A list of
                classification item identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "classificationItemIds": classification_item_ids,
        }
        validated_params = GetDetailsOfClassificationItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDetailsOfClassificationItems",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = GetDetailsOfClassificationItemsResult.model_validate(response_dict)
        return validated_response.classificationItems

    def set_classifications_of_elements(
        self, element_classifications: list[ElementClassification]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Sets the classifications of elements. In order to set the classification of an element
        to unclassified, omit the classificationItemId field.

        Args:
            element_classifications (list[ElementClassification]): A list of element
                classification identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementClassifications": element_classifications,
        }
        validated_params = SetClassificationsOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.SetClassificationsOfElements",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = SetClassificationsOfElementsResult.model_validate(response_dict)
        return validated_response.executionResults
