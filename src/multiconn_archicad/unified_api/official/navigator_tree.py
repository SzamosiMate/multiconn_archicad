# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import (
    DeleteNavigatorItemsParameters,
    DeleteNavigatorItemsResult,
    GetBuiltInContainerNavigatorItemsParameters,
    GetBuiltInContainerNavigatorItemsResult,
    GetDetailNavigatorItemsParameters,
    GetDetailNavigatorItemsResult,
    GetDocument3DNavigatorItemsParameters,
    GetDocument3DNavigatorItemsResult,
    GetElevationNavigatorItemsParameters,
    GetElevationNavigatorItemsResult,
    GetInteriorElevationNavigatorItemsParameters,
    GetInteriorElevationNavigatorItemsResult,
    GetNavigatorItemTreeParameters,
    GetNavigatorItemTreeResult,
    GetNavigatorItemsTypeParameters,
    GetNavigatorItemsTypeResult,
    GetPublisherSetNamesResult,
    GetSectionNavigatorItemsParameters,
    GetSectionNavigatorItemsResult,
    GetStoryNavigatorItemsParameters,
    GetStoryNavigatorItemsResult,
    GetWorksheetNavigatorItemsParameters,
    GetWorksheetNavigatorItemsResult,
    MoveNavigatorItemParameters,
    RenameNavigatorItemParameters,
)
from multiconn_archicad.models.official.types import (
    BuiltInContainerNavigatorItemWrapperItem,
    DetailNavigatorItemWrapperItem,
    Document3DNavigatorItemWrapperItem,
    ElevationNavigatorItemWrapperItem,
    ErrorItem,
    FailedExecutionResult,
    InteriorElevationNavigatorItemWrapperItem,
    NavigatorItemId,
    NavigatorItemIdAndTypeWrapperItem,
    NavigatorItemIdWrapperItem,
    NavigatorTree,
    OtherNavigatorTreeId,
    PublisherSetId,
    SectionNavigatorItemWrapperItem,
    StoryNavigatorItemWrapperItem,
    SuccessfulExecutionResult,
    WorksheetNavigatorItemWrapperItem,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class NavigatorTreeCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def delete_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[FailedExecutionResult | SuccessfulExecutionResult]:
        """
        Deletes items from navigator tree.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = DeleteNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.DeleteNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = DeleteNavigatorItemsResult.model_validate(response_dict)
        return validated_response.executionResults

    def get_built_in_container_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[BuiltInContainerNavigatorItemWrapperItem | ErrorItem]:
        """
        Returns the details of the built-in container navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetBuiltInContainerNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetBuiltInContainerNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetBuiltInContainerNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def get_detail_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[DetailNavigatorItemWrapperItem | ErrorItem]:
        """
        Returns the details of the detail navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetDetailNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDetailNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetDetailNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def get_document_3d_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[Document3DNavigatorItemWrapperItem | ErrorItem]:
        """
        Returns the details of the 3D document navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetDocument3DNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDocument3DNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetDocument3DNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def get_elevation_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[ElevationNavigatorItemWrapperItem | ErrorItem]:
        """
        Returns the detailed elevation navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetElevationNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElevationNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetElevationNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def get_interior_elevation_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[ErrorItem | InteriorElevationNavigatorItemWrapperItem]:
        """
        Returns the details of the interior elevation navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetInteriorElevationNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetInteriorElevationNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetInteriorElevationNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def get_navigator_item_tree(self, navigator_tree_id: OtherNavigatorTreeId | PublisherSetId) -> NavigatorTree:
        """
        Returns the tree of navigator items.

        Args:
            navigator_tree_id (OtherNavigatorTreeId | PublisherSetId): The identifier of a
                navigator item tree.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorTreeId": navigator_tree_id,
        }
        validated_params = GetNavigatorItemTreeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetNavigatorItemTree", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetNavigatorItemTreeResult.model_validate(response_dict)
        return validated_response.navigatorTree

    def get_navigator_items_type(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[ErrorItem | NavigatorItemIdAndTypeWrapperItem]:
        """
        Returns all navigator item types based on the navigator item identifiers given. An error
        is returned for each identifier that is not found.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetNavigatorItemsTypeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetNavigatorItemsType", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetNavigatorItemsTypeResult.model_validate(response_dict)
        return validated_response.navigatorItemIdAndTypeList

    def get_publisher_set_names(self) -> list[str]:
        """
        Returns the names of available publisher sets.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_command("API.GetPublisherSetNames")
        validated_response = GetPublisherSetNamesResult.model_validate(response_dict)
        return validated_response.publisherSetNames

    def get_section_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[ErrorItem | SectionNavigatorItemWrapperItem]:
        """
        Returns the details of the section navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetSectionNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetSectionNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetSectionNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def get_story_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[ErrorItem | StoryNavigatorItemWrapperItem]:
        """
        Returns the details of the story navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetStoryNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetStoryNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetStoryNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def get_worksheet_navigator_items(
        self, navigator_item_ids: list[NavigatorItemIdWrapperItem]
    ) -> list[ErrorItem | WorksheetNavigatorItemWrapperItem]:
        """
        Returns the details of the worksheet navigator items identified by their Ids.

        Args:
            navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIds": navigator_item_ids,
        }
        validated_params = GetWorksheetNavigatorItemsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetWorksheetNavigatorItems", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        validated_response = GetWorksheetNavigatorItemsResult.model_validate(response_dict)
        return validated_response.navigatorItems

    def move_navigator_item(
        self,
        navigator_item_id_to_move: NavigatorItemId,
        parent_navigator_item_id: NavigatorItemId,
        previous_navigator_item_id: NavigatorItemId | None = None,
    ) -> None:
        """
        Moves the given navigator item under the <i>parentNavigatorItemId</i> in the navigator
        tree. If <i>previousNavigatorItemId</i> is not given then inserts it at the first place
        under the new parent. If it is given then inserts it after this navigator item.

        Args:
            navigator_item_id_to_move (NavigatorItemId)
            parent_navigator_item_id (NavigatorItemId)
            previous_navigator_item_id (NavigatorItemId | None)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "navigatorItemIdToMove": navigator_item_id_to_move,
            "parentNavigatorItemId": parent_navigator_item_id,
            "previousNavigatorItemId": previous_navigator_item_id,
        }
        validated_params = MoveNavigatorItemParameters(**params_dict)
        self._core.post_command("API.MoveNavigatorItem", validated_params.model_dump(by_alias=True, exclude_none=True))
        return None

    def rename_navigator_item(self, root: RootModelRootType = PydanticUndefined) -> None:
        """
        Renames an existing navigator item by specifying either the name or the ID, or both.

        Args:
            root (RootModelRootType)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "root": root,
        }
        validated_params = RenameNavigatorItemParameters(**params_dict)
        self._core.post_command(
            "API.RenameNavigatorItem", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None
