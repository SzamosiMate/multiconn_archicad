# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import (
    CloneProjectMapItemToViewMapParameters,
    CloneProjectMapItemToViewMapResult,
    CreateViewMapFolderParameters,
    CreateViewMapFolderResult,
)
from multiconn_archicad.models.official.types import FolderParameters, NavigatorItemId

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class ViewMapCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def clone_project_map_item_to_view_map(
        self, project_map_navigator_item_id: NavigatorItemId, parent_navigator_item_id: NavigatorItemId
    ) -> CloneProjectMapItemToViewMapResult:
        """
        Clones a project map item to the view map.

        Args:
            project_map_navigator_item_id (NavigatorItemId): The ID of the navigator item to be
                cloned. Only navigator items from the project map can be cloned.
            parent_navigator_item_id (NavigatorItemId): The ID of the navigator item below which
                the new view will be inserted. Only navigator items from the view map are
                allowed.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "projectMapNavigatorItemId": project_map_navigator_item_id,
            "parentNavigatorItemId": parent_navigator_item_id,
        }
        validated_params = CloneProjectMapItemToViewMapParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CloneProjectMapItemToViewMap", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return CloneProjectMapItemToViewMapResult.model_validate(response_dict)

    def create_view_map_folder(
        self,
        folder_parameters: FolderParameters,
        parent_navigator_item_id: NavigatorItemId | None = None,
        previous_navigator_item_id: NavigatorItemId | None = None,
    ) -> CreateViewMapFolderResult:
        """
        Creates a view folder item at the given position in the navigator tree.

        Args:
            folder_parameters (FolderParameters): This is the name of the new folder.
            parent_navigator_item_id (NavigatorItemId | None): The newly created folder will be
                placed under this parent item. If this parameter is not given the folder will be
                created as the first item in the View Map list.
            previous_navigator_item_id (NavigatorItemId | None): The newly created folder will
                be placed after this sibling item. If this parameter is not given the folder
                will be created as the first item under the parent.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "folderParameters": folder_parameters,
            "parentNavigatorItemId": parent_navigator_item_id,
            "previousNavigatorItemId": previous_navigator_item_id,
        }
        validated_params = CreateViewMapFolderParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateViewMapFolder", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return CreateViewMapFolderResult.model_validate(response_dict)
