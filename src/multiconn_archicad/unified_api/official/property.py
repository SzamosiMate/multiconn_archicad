# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import (
    GetAllPropertyGroupIdsParameters,
    GetAllPropertyGroupIdsResult,
    GetAllPropertyIdsOfElementsParameters,
    GetAllPropertyIdsOfElementsResult,
    GetAllPropertyIdsParameters,
    GetAllPropertyIdsResult,
    GetAllPropertyNamesResult,
    GetDetailsOfPropertiesParameters,
    GetDetailsOfPropertiesResult,
    GetPropertyDefinitionAvailabilityParameters,
    GetPropertyDefinitionAvailabilityResult,
    GetPropertyGroupsParameters,
    GetPropertyGroupsResult,
    GetPropertyIdsParameters,
    GetPropertyIdsResult,
    GetPropertyValuesOfElementsParameters,
    GetPropertyValuesOfElementsResult,
    SetPropertyValuesOfElementsParameters,
    SetPropertyValuesOfElementsResult,
)
from multiconn_archicad.models.official.types import (
    BuiltInPropertyUserId,
    ElementIdArrayItem,
    ElementPropertyValue,
    PropertyGroupIdArrayItem,
    PropertyIdArrayItem,
    PropertyType,
    UserDefinedPropertyUserId,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class PropertyCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def get_all_property_group_ids(self, property_type: PropertyType | None = None) -> GetAllPropertyGroupIdsResult:
        """
        Returns the identifier of every property group in the current plan. The optional
        propertyType parameter can be used to filter the results based on the type of the
        property group (Built-in or User Defined).

        Args:
            property_type (PropertyType | None)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyType": property_type,
        }
        validated_params = GetAllPropertyGroupIdsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllPropertyGroupIds", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetAllPropertyGroupIdsResult.model_validate(response_dict)

    def get_all_property_ids(self, property_type: PropertyType | None = None) -> GetAllPropertyIdsResult:
        """
        Returns the identifier of every property in the current plan. The optional propertyType
        parameter can be used to filter the results based on the type of the property (Built-in
        or User Defined).

        Args:
            property_type (PropertyType | None)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyType": property_type,
        }
        validated_params = GetAllPropertyIdsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllPropertyIds", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetAllPropertyIdsResult.model_validate(response_dict)

    def get_all_property_ids_of_elements(
        self, elements: list[ElementIdArrayItem], property_type: PropertyType | None = None
    ) -> GetAllPropertyIdsOfElementsResult:
        """
        Returns all property identifiers of the given elements. The optional propertyType
        parameter can be used to filter the results based on the type of the property (Built-in
        or User Defined).

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            property_type (PropertyType | None)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "propertyType": property_type,
        }
        validated_params = GetAllPropertyIdsOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAllPropertyIdsOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetAllPropertyIdsOfElementsResult.model_validate(response_dict)

    def get_all_property_names(self) -> GetAllPropertyNamesResult:
        """
        Returns the human-readable names of available Property definitions for debug and
        development purposes.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_command("API.GetAllPropertyNames")
        return GetAllPropertyNamesResult.model_validate(response_dict)

    def get_details_of_properties(self, properties: list[PropertyIdArrayItem]) -> GetDetailsOfPropertiesResult:
        """
        Returns the details of property definitions.

        Args:
            properties (list[PropertyIdArrayItem]): A list of property identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "properties": properties,
        }
        validated_params = GetDetailsOfPropertiesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetDetailsOfProperties", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetDetailsOfPropertiesResult.model_validate(response_dict)

    def get_property_definition_availability(
        self, property_ids: list[PropertyIdArrayItem]
    ) -> GetPropertyDefinitionAvailabilityResult:
        """
        Returns the ids of classification items a given property definition is available for.

        Args:
            property_ids (list[PropertyIdArrayItem]): A list of property identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyIds": property_ids,
        }
        validated_params = GetPropertyDefinitionAvailabilityParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyDefinitionAvailability", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetPropertyDefinitionAvailabilityResult.model_validate(response_dict)

    def get_property_groups(self, property_group_ids: list[PropertyGroupIdArrayItem]) -> GetPropertyGroupsResult:
        """
        Returns the details of property groups.

        Args:
            property_group_ids (list[PropertyGroupIdArrayItem]): A list of property group
                identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "propertyGroupIds": property_group_ids,
        }
        validated_params = GetPropertyGroupsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyGroups", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetPropertyGroupsResult.model_validate(response_dict)

    def get_property_ids(
        self, properties: list[UserDefinedPropertyUserId | BuiltInPropertyUserId]
    ) -> GetPropertyIdsResult:
        """
        Returns the identifiers of property definitions for the requested property names.

        Args:
            properties (list[UserDefinedPropertyUserId | BuiltInPropertyUserId]): List of
                property names whose ids are requested.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "properties": properties,
        }
        validated_params = GetPropertyIdsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyIds", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetPropertyIdsResult.model_validate(response_dict)

    def get_property_values_of_elements(
        self, elements: list[ElementIdArrayItem], properties: list[PropertyIdArrayItem]
    ) -> GetPropertyValuesOfElementsResult:
        """
        Returns the property values of the elements for the given property.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.
            properties (list[PropertyIdArrayItem]): A list of property identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elements": elements,
            "properties": properties,
        }
        validated_params = GetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPropertyValuesOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetPropertyValuesOfElementsResult.model_validate(response_dict)

    def set_property_values_of_elements(
        self, element_property_values: list[ElementPropertyValue]
    ) -> SetPropertyValuesOfElementsResult:
        """
        Sets the property values of elements.

        Args:
            element_property_values (list[ElementPropertyValue]): A list of element property
                values.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "elementPropertyValues": element_property_values,
        }
        validated_params = SetPropertyValuesOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.SetPropertyValuesOfElements", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return SetPropertyValuesOfElementsResult.model_validate(response_dict)
