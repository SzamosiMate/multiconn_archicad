# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import (
    GetAllElementsResult,
    GetElementsByClassificationParameters,
    GetElementsByClassificationResult,
    GetElementsByTypeParameters,
    GetElementsByTypeResult,
    GetSelectedElementsParameters,
    GetSelectedElementsResult,
    GetTypesOfElementsParameters,
    GetTypesOfElementsResult,
)
from multiconn_archicad.models.official.types import (
    ClassificationItemId,
    ElementIdArrayItem,
    ElementType,
    ErrorItem,
    TypeOfElementWrapperItem,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class ElementListingCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def get_all_elements(self) -> list[ElementIdArrayItem]:
        """
        Returns the identifier of every element in the current plan.

        Returns:
            list[ElementIdArrayItem]: A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        response_dict = self._core.post_command("API.GetAllElements")
        validated_response = GetAllElementsResult.model_validate(response_dict)
        return validated_response.elements

    def get_elements_by_classification(self, classification_item_id: ClassificationItemId) -> list[ElementIdArrayItem]:
        """
        Returns the identifier of every element with the given classification identifier.

        Args:
            classification_item_id (ClassificationItemId)

        Returns:
            list[ElementIdArrayItem]: A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "classificationItemId": classification_item_id,
        }
        validated_params = GetElementsByClassificationParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElementsByClassification",
            validated_params.model_dump(mode="json", by_alias=True, exclude_none=True),
        )
        validated_response = GetElementsByClassificationResult.model_validate(response_dict)
        return validated_response.elements

    def get_elements_by_type(self, element_type: ElementType) -> list[ElementIdArrayItem]:
        """
        Returns the identifier of every element of the given type on the plan.

        Args:
            element_type (ElementType)

        Returns:
            list[ElementIdArrayItem]: A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "elementType": element_type,
        }
        validated_params = GetElementsByTypeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElementsByType", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetElementsByTypeResult.model_validate(response_dict)
        return validated_response.elements

    def get_selected_elements(
        self, only_editable: None | bool = None, only_supported_types: None | bool = None
    ) -> list[ElementIdArrayItem]:
        """
        Returns the identifiers of selected elements in the current plan.

        Args:
            only_editable (None | bool): Optional parameter that defines whether the selection
                list should include only the editable elements or all of them. The default value
                is FALSE
            only_supported_types (None | bool): Optional parameter. When it is set to true, only
                elements with types that are supported by any other JSON API command will be
                returned.

        Returns:
            list[ElementIdArrayItem]: A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "onlyEditable": only_editable,
            "onlySupportedTypes": only_supported_types,
        }
        validated_params = GetSelectedElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetSelectedElements", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetSelectedElementsResult.model_validate(response_dict)
        return validated_response.elements

    def get_types_of_elements(self, elements: list[ElementIdArrayItem]) -> list[ErrorItem | TypeOfElementWrapperItem]:
        """
        Returns the types of the given elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Returns:
            list[ErrorItem | TypeOfElementWrapperItem]: A list of element types or errors.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        params_dict = {
            "elements": elements,
        }
        validated_params = GetTypesOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetTypesOfElements", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetTypesOfElementsResult.model_validate(response_dict)
        return validated_response.typesOfElements
