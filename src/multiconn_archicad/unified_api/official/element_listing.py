# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import GetAllElementsResult, GetElementsByClassificationParameters, GetElementsByClassificationResult, GetElementsByTypeParameters, GetElementsByTypeResult, GetSelectedElementsParameters, GetSelectedElementsResult, GetTypesOfElementsParameters, GetTypesOfElementsResult
from multiconn_archicad.models.official.types import ClassificationItemId, ElementIdArrayItem, ElementType

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class ElementListingCommands:
    def __init__(self, core: CoreCommands):
        self._core = core


    def get_all_elements(
        self
    ) -> GetAllElementsResult:
        """
        Returns the identifier of every element in the current plan.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_command(
            "API.GetAllElements"
        )
        return GetAllElementsResult.model_validate(response_dict)


    def get_elements_by_classification(
        self,
        classification_item_id: ClassificationItemId
    ) -> GetElementsByClassificationResult:
        """
        Returns the identifier of every element with the given classification identifier.

        Args:
            classification_item_id (ClassificationItemId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'classificationItemId': classification_item_id,
            }
        validated_params = GetElementsByClassificationParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElementsByClassification",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetElementsByClassificationResult.model_validate(response_dict)


    def get_elements_by_type(
        self,
        element_type: ElementType
    ) -> GetElementsByTypeResult:
        """
        Returns the identifier of every element of the given type on the plan.

        Args:
            element_type (ElementType)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'elementType': element_type,
            }
        validated_params = GetElementsByTypeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetElementsByType",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetElementsByTypeResult.model_validate(response_dict)


    def get_selected_elements(
        self,
        only_editable: bool | None = None,
        only_supported_types: bool | None = None
    ) -> GetSelectedElementsResult:
        """
        Returns the identifiers of selected elements in the current plan.

        Args:
            only_editable (bool | None): Optional parameter that defines whether the selection
                list should include only the editable elements or all of them. The default value
                is FALSE
            only_supported_types (bool | None): Optional parameter. When it is set to true, only
                elements with types that are supported by any other JSON API command will be
                returned.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'onlyEditable': only_editable,
                'onlySupportedTypes': only_supported_types,
            }
        validated_params = GetSelectedElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetSelectedElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetSelectedElementsResult.model_validate(response_dict)


    def get_types_of_elements(
        self,
        elements: list[ElementIdArrayItem]
    ) -> GetTypesOfElementsResult:
        """
        Returns the types of the given elements.

        Args:
            elements (list[ElementIdArrayItem]): A list of elements.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
                'elements': elements,
            }
        validated_params = GetTypesOfElementsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetTypesOfElements",
            validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetTypesOfElementsResult.model_validate(response_dict)
