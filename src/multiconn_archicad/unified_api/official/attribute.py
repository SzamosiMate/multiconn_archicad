# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import (
    CreateAttributeFoldersParameters,
    CreateAttributeFoldersResult,
    DeleteAttributeFoldersParameters,
    DeleteAttributeFoldersResult,
    DeleteAttributesParameters,
    DeleteAttributesResult,
    GetActivePenTablesResult,
    GetAttributeFolderStructureParameters,
    GetAttributeFolderStructureResult,
    GetAttributeFoldersParameters,
    GetAttributeFoldersResult,
    GetAttributesByTypeParameters,
    GetAttributesByTypeResult,
    GetAttributesIndicesParameters,
    GetAttributesIndicesResult,
    GetBuildingMaterialAttributesParameters,
    GetBuildingMaterialAttributesResult,
    GetCompositeAttributesParameters,
    GetCompositeAttributesResult,
    GetFillAttributesParameters,
    GetFillAttributesResult,
    GetLayerAttributesParameters,
    GetLayerAttributesResult,
    GetLayerCombinationAttributesParameters,
    GetLayerCombinationAttributesResult,
    GetLineAttributesParameters,
    GetLineAttributesResult,
    GetPenTableAttributesParameters,
    GetPenTableAttributesResult,
    GetProfileAttributePreviewParameters,
    GetProfileAttributePreviewResult,
    GetProfileAttributesParameters,
    GetProfileAttributesResult,
    GetSurfaceAttributesParameters,
    GetSurfaceAttributesResult,
    GetZoneCategoryAttributesParameters,
    GetZoneCategoryAttributesResult,
    MoveAttributesAndFoldersParameters,
    RenameAttributeFoldersParameters,
    RenameAttributeFoldersResult,
)
from multiconn_archicad.models.official.types import (
    AttributeFolderCreationParameters,
    AttributeFolderId,
    AttributeFolderIdWrapperItem,
    AttributeFolderRenameParameters,
    AttributeIdWrapperItem,
    AttributeType,
    RGBColor,
)

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class AttributeCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def create_attribute_folders(
        self, attribute_folders: list[AttributeFolderCreationParameters]
    ) -> CreateAttributeFoldersResult:
        """
        Creates attribute folders. To create a folder, its full path has to be provided. The
        command will create all folders along the path, if they do not exist.

        Args:
            attribute_folders (list[AttributeFolderCreationParameters])

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeFolders": attribute_folders,
        }
        validated_params = CreateAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateAttributeFolders", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return CreateAttributeFoldersResult.model_validate(response_dict)

    def delete_attribute_folders(
        self, attribute_folder_ids: list[AttributeFolderIdWrapperItem]
    ) -> DeleteAttributeFoldersResult:
        """
        Deletes attribute folders and all the deletable attributes and folders it contains. To
        delete a folder, its identifier has to be provided.

        Args:
            attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute
                folder identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeFolderIds": attribute_folder_ids,
        }
        validated_params = DeleteAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.DeleteAttributeFolders", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return DeleteAttributeFoldersResult.model_validate(response_dict)

    def delete_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> DeleteAttributesResult:
        """
        Deletes attributes.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = DeleteAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.DeleteAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return DeleteAttributesResult.model_validate(response_dict)

    def get_active_pen_tables(self) -> GetActivePenTablesResult:
        """
        Returns the model view and layout book pen table identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        response_dict = self._core.post_command("API.GetActivePenTables")
        return GetActivePenTablesResult.model_validate(response_dict)

    def get_attribute_folder_structure(
        self, attribute_type: AttributeType, path: list[str] | None = None
    ) -> GetAttributeFolderStructureResult:
        """
        Returns the detailed folder structure for the attributes of a given type. If the path is
        not given, the root folder will be returned

        Args:
            attribute_type (AttributeType)
            path (list[str] | None): A list of attribute folder names. May be empty.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeType": attribute_type,
            "path": path,
        }
        validated_params = GetAttributeFolderStructureParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributeFolderStructure", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetAttributeFolderStructureResult.model_validate(response_dict)

    def get_attribute_folders(
        self, attribute_folder_ids: list[AttributeFolderIdWrapperItem]
    ) -> GetAttributeFoldersResult:
        """
        Returns the detailed attribute folders identified by their Ids.

        Args:
            attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute
                folder identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeFolderIds": attribute_folder_ids,
        }
        validated_params = GetAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributeFolders", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetAttributeFoldersResult.model_validate(response_dict)

    def get_attributes_by_type(self, attribute_type: AttributeType) -> GetAttributesByTypeResult:
        """
        Returns the identifier of every attribute of the given type.

        Args:
            attribute_type (AttributeType)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeType": attribute_type,
        }
        validated_params = GetAttributesByTypeParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributesByType", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetAttributesByTypeResult.model_validate(response_dict)

    def get_attributes_indices(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetAttributesIndicesResult:
        """
        Returns the requested indices and guids of attributes.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetAttributesIndicesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetAttributesIndices", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetAttributesIndicesResult.model_validate(response_dict)

    def get_building_material_attributes(
        self, attribute_ids: list[AttributeIdWrapperItem]
    ) -> GetBuildingMaterialAttributesResult:
        """
        Returns the detailed building material attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetBuildingMaterialAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetBuildingMaterialAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetBuildingMaterialAttributesResult.model_validate(response_dict)

    def get_composite_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetCompositeAttributesResult:
        """
        Returns the detailed composite attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetCompositeAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetCompositeAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetCompositeAttributesResult.model_validate(response_dict)

    def get_fill_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetFillAttributesResult:
        """
        Returns the detailed fill attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetFillAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetFillAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetFillAttributesResult.model_validate(response_dict)

    def get_layer_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetLayerAttributesResult:
        """
        Returns the detailed layer attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetLayerAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLayerAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetLayerAttributesResult.model_validate(response_dict)

    def get_layer_combination_attributes(
        self, attribute_ids: list[AttributeIdWrapperItem]
    ) -> GetLayerCombinationAttributesResult:
        """
        Returns the detailed layer combination attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetLayerCombinationAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLayerCombinationAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetLayerCombinationAttributesResult.model_validate(response_dict)

    def get_line_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetLineAttributesResult:
        """
        Returns the detailed line attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetLineAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLineAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetLineAttributesResult.model_validate(response_dict)

    def get_pen_table_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetPenTableAttributesResult:
        """
        Returns the detailed pen table attributes (including their pens) identified by their
        GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetPenTableAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetPenTableAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetPenTableAttributesResult.model_validate(response_dict)

    def get_profile_attribute_preview(
        self,
        attribute_ids: list[AttributeIdWrapperItem],
        image_width: int,
        image_height: int,
        background_color: RGBColor | None = None,
    ) -> GetProfileAttributePreviewResult:
        """
        Returns the preview image of each requested profile attribute in a base64 string format.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
            image_width (int): The width of the preview image.
            image_height (int): The height of the preview image.
            background_color (RGBColor | None): The background color of the preview image.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
            "imageWidth": image_width,
            "imageHeight": image_height,
            "backgroundColor": background_color,
        }
        validated_params = GetProfileAttributePreviewParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetProfileAttributePreview", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetProfileAttributePreviewResult.model_validate(response_dict)

    def get_profile_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetProfileAttributesResult:
        """
        Returns the detailed profile attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetProfileAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetProfileAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetProfileAttributesResult.model_validate(response_dict)

    def get_surface_attributes(self, attribute_ids: list[AttributeIdWrapperItem]) -> GetSurfaceAttributesResult:
        """
        Returns the detailed surface attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetSurfaceAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetSurfaceAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetSurfaceAttributesResult.model_validate(response_dict)

    def get_zone_category_attributes(
        self, attribute_ids: list[AttributeIdWrapperItem]
    ) -> GetZoneCategoryAttributesResult:
        """
        Returns the detailed zone category attributes identified by their GUIDs.

        Args:
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeIds": attribute_ids,
        }
        validated_params = GetZoneCategoryAttributesParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetZoneCategoryAttributes", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return GetZoneCategoryAttributesResult.model_validate(response_dict)

    def move_attributes_and_folders(
        self,
        attribute_folder_ids: list[AttributeFolderIdWrapperItem],
        attribute_ids: list[AttributeIdWrapperItem],
        target_folder_id: AttributeFolderId,
    ) -> None:
        """
        Moves attributes and attribute folders.

        Args:
            attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute
                folder identifiers.
            attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.
            target_folder_id (AttributeFolderId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeFolderIds": attribute_folder_ids,
            "attributeIds": attribute_ids,
            "targetFolderId": target_folder_id,
        }
        validated_params = MoveAttributesAndFoldersParameters(**params_dict)
        self._core.post_command(
            "API.MoveAttributesAndFolders", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return None

    def rename_attribute_folders(
        self, attribute_folder_parameters_list: list[AttributeFolderRenameParameters]
    ) -> RenameAttributeFoldersResult:
        """
        Rename attribute folder.

        Args:
            attribute_folder_parameters_list (list[AttributeFolderRenameParameters])

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "attributeFolderParametersList": attribute_folder_parameters_list,
        }
        validated_params = RenameAttributeFoldersParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.RenameAttributeFolders", validated_params.model_dump(by_alias=True, exclude_none=True)
        )
        return RenameAttributeFoldersResult.model_validate(response_dict)
