# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import (
    CreateLayoutParameters,
    CreateLayoutResult,
    CreateLayoutSubsetParameters,
    CreateLayoutSubsetResult,
    GetLayoutSettingsParameters,
    GetLayoutSettingsResult,
    SetLayoutSettingsParameters,
)
from multiconn_archicad.models.official.types import LayoutParameters, NavigatorItemId, Subset

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class LayoutBookCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def create_layout(
        self,
        layout_name: str,
        layout_parameters: LayoutParameters,
        master_navigator_item_id: NavigatorItemId,
        parent_navigator_item_id: NavigatorItemId,
    ) -> NavigatorItemId:
        """
        Creates a new layout.

        Args:
            layout_name (str): The name of the layout.
            layout_parameters (LayoutParameters)
            master_navigator_item_id (NavigatorItemId)
            parent_navigator_item_id (NavigatorItemId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "layoutName": layout_name,
            "layoutParameters": layout_parameters,
            "masterNavigatorItemId": master_navigator_item_id,
            "parentNavigatorItemId": parent_navigator_item_id,
        }
        validated_params = CreateLayoutParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateLayout", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreateLayoutResult.model_validate(response_dict)
        return validated_response.createdNavigatorItemId

    def create_layout_subset(
        self, subset_parameters: Subset, parent_navigator_item_id: NavigatorItemId
    ) -> NavigatorItemId:
        """
        Creates a new layout subset.

        Args:
            subset_parameters (Subset)
            parent_navigator_item_id (NavigatorItemId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "subsetParameters": subset_parameters,
            "parentNavigatorItemId": parent_navigator_item_id,
        }
        validated_params = CreateLayoutSubsetParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.CreateLayoutSubset", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = CreateLayoutSubsetResult.model_validate(response_dict)
        return validated_response.createdSubsetId

    def get_layout_settings(self, layout_navigator_item_id: NavigatorItemId) -> LayoutParameters:
        """
        Returns the parameters (settings) of the given layout.

        Args:
            layout_navigator_item_id (NavigatorItemId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "layoutNavigatorItemId": layout_navigator_item_id,
        }
        validated_params = GetLayoutSettingsParameters(**params_dict)
        response_dict = self._core.post_command(
            "API.GetLayoutSettings", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        validated_response = GetLayoutSettingsResult.model_validate(response_dict)
        return validated_response.layoutParameters

    def set_layout_settings(
        self, layout_parameters: LayoutParameters, layout_navigator_item_id: NavigatorItemId
    ) -> None:
        """
        Sets the parameters (settings) of the given layout.

        Args:
            layout_parameters (LayoutParameters)
            layout_navigator_item_id (NavigatorItemId)

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
        """
        params_dict = {
            "layoutParameters": layout_parameters,
            "layoutNavigatorItemId": layout_navigator_item_id,
        }
        validated_params = SetLayoutSettingsParameters(**params_dict)
        self._core.post_command(
            "API.SetLayoutSettings", validated_params.model_dump(mode="json", by_alias=True, exclude_none=True)
        )
        return None
