# This file is automatically generated by the build system.
# Do not edit this file directly.

from __future__ import annotations
from typing import TYPE_CHECKING

from multiconn_archicad.models.official.commands import GetProductInfoResult, IsAliveResult

if TYPE_CHECKING:
    from multiconn_archicad.core.core_commands import CoreCommands


class BasicCommands:
    def __init__(self, core: CoreCommands):
        self._core = core

    def get_product_info(self) -> GetProductInfoResult:
        """
        Accesses the version information from the running Archicad.

        Returns:
            GetProductInfoResult

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        response_dict = self._core.post_command("API.GetProductInfo")
        validated_response = GetProductInfoResult.model_validate(response_dict)
        return validated_response

    def is_alive(self) -> bool:
        """
        Checks if the Archicad connection is alive.

        Returns:
            bool: Returns true if the connection is alive.

        Raises:
            ArchicadAPIError: If the API returns an error response.
            RequestError: If there is a network or connection error.
            pydantic.ValidationError: If the parameters, or the API Response fail validation.
        """
        response_dict = self._core.post_command("API.IsAlive")
        validated_response = IsAliveResult.model_validate(response_dict)
        return validated_response.isAlive
