from __future__ import annotations
from typing import Any, List, Literal, TypedDict, Union
from typing_extensions import NotRequired

### This file is automatically generated and split. Do not edit directly. ###


AttributeIds = List[AttributeIdArrayItem]


AttributePropertyValues = Any


AttributeType = Literal[
    "Layer",
    "Line",
    "Fill",
    "Composite",
    "Surface",
    "LayerCombination",
    "ZoneCategory",
    "Profile",
    "PenTable",
    "MEPSystem",
    "OperationProfile",
    "BuildingMaterial",
]


BoundingBox3DOrError = BoundingBox3DOrError | ErrorItem


BoundingBoxes3D = List[BoundingBox3DOrError]


ClassificationIdOrError = ClassificationIdOrError | ErrorItem


ClassificationIdsOrErrors = List[ClassificationIdOrError]


ClassificationSystemIds = List[ClassificationSystemIdArrayItem]


Databases = List[DatabaseIdArrayItem]


ElementClassificationOrError = ElementClassificationOrError | ErrorItem


ElementClassifications = List[ElementClassification]


ElementClassificationsOrErrors = List[ElementClassificationOrError]


ElementFilter = Literal[
    "IsEditable",
    "IsVisibleByLayer",
    "IsVisibleByRenovation",
    "IsVisibleByStructureDisplay",
    "IsVisibleIn3D",
    "OnActualFloor",
    "OnActualLayout",
    "InMyWorkspace",
    "IsIndependent",
    "InCroppedView",
    "HasAccessRight",
    "IsOverriddenByRenovation",
]


ElementPropertyValues = List[ElementPropertyValue]


ElementType = Literal[
    "Wall",
    "Column",
    "Beam",
    "Window",
    "Door",
    "Object",
    "Lamp",
    "Slab",
    "Roof",
    "Mesh",
    "Dimension",
    "RadialDimension",
    "LevelDimension",
    "AngleDimension",
    "Text",
    "Label",
    "Zone",
    "Hatch",
    "Line",
    "PolyLine",
    "Arc",
    "Circle",
    "Spline",
    "Hotspot",
    "CutPlane",
    "Camera",
    "CamSet",
    "Group",
    "SectElem",
    "Drawing",
    "Picture",
    "Detail",
    "Elevation",
    "InteriorElevation",
    "Worksheet",
    "Hotlink",
    "CurtainWall",
    "CurtainWallSegment",
    "CurtainWallFrame",
    "CurtainWallPanel",
    "CurtainWallJunction",
    "CurtainWallAccessory",
    "Shell",
    "Skylight",
    "Morph",
    "ChangeMarker",
    "Stair",
    "Riser",
    "Tread",
    "StairStructure",
    "Railing",
    "RailingToprail",
    "RailingHandrail",
    "RailingRail",
    "RailingPost",
    "RailingInnerPost",
    "RailingBaluster",
    "RailingPanel",
    "RailingSegment",
    "RailingNode",
    "RailingBalusterSet",
    "RailingPattern",
    "RailingToprailEnd",
    "RailingHandrailEnd",
    "RailingRailEnd",
    "RailingToprailConnection",
    "RailingHandrailConnection",
    "RailingRailConnection",
    "RailingEndFinish",
    "BeamSegment",
    "ColumnSegment",
    "Opening",
    "Unknown",
]


Elements = List[ElementIdArrayItem]


EnumValueId = DisplayValueEnumId | NonLocalizedValueEnumId


EnumValueIds = List[EnumValueId]


ExecutionResult = SuccessfulExecutionResult | FailedExecutionResult


ExecutionResults = List[ExecutionResult]


Guid = str


Hotlinks = List[Hotlink]


IssueCommentStatus = Literal["Error", "Warning", "Info", "Unknown"]


IssueElementType = Literal["Creation", "Highlight", "Deletion", "Modification"]


Issues = List[IssueIdArrayItem]


NavigatorItemIds = List[NavigatorItemIdArrayItem]


NormalOrUserUndefinedPropertyValue = (
    NormalNumberPropertyValue
    | NormalIntegerPropertyValue
    | NormalStringPropertyValue
    | NormalBooleanPropertyValue
    | NormalLengthPropertyValue
    | NormalAreaPropertyValue
    | NormalVolumePropertyValue
    | NormalAnglePropertyValue
    | NormalNumberListPropertyValue
    | NormalIntegerListPropertyValue
    | NormalStringListPropertyValue
    | NormalBooleanListPropertyValue
    | NormalLengthListPropertyValue
    | NormalAreaListPropertyValue
    | NormalVolumeListPropertyValue
    | NormalAngleListPropertyValue
    | NormalSingleEnumPropertyValue
    | NormalMultiEnumPropertyValue
    | UserUndefinedPropertyValue
)


PropertyDefaultValue = BasicDefaultValue | ExpressionDefaultValue


PropertyIdOrError = PropertyIdOrError | ErrorItem


PropertyIdOrErrorArray = List[PropertyIdOrError]


PropertyIds = List[PropertyIdArrayItem]


PropertyType = Literal[
    "number",
    "integer",
    "string",
    "boolean",
    "length",
    "area",
    "volume",
    "angle",
    "numberList",
    "integerList",
    "stringList",
    "booleanList",
    "lengthList",
    "areaList",
    "volumeList",
    "angleList",
    "singleEnum",
    "multiEnum",
]


PropertyValueDetails = NormalOrUserUndefinedPropertyValue | NotAvailablePropertyValue


PropertyValueOrErrorItem = PropertyValueOrErrorItem | ErrorItem


PropertyValues = List[PropertyValueOrErrorItem]


PropertyValuesOrError = PropertyValuesOrError | ErrorItem


PropertyValuesOrErrorArray = List[PropertyValuesOrError]


RevisionChangesOfEntities = RevisionChangesOfEntities | ErrorItem


RevisionCustomSchemeData = List[RevisionCustomSchemeDatum]


TypeSpecificDetails = (
    WallDetails
    | BeamDetails
    | SlabDetails
    | ColumnDetails
    | DetailWorksheetDetails
    | LibPartBasedElementDetails
    | PolylineDetails
    | ZoneDetails
    | CurtainWallDetails
    | CurtainWallSegmentDetails
    | CurtainWallPanelDetails
    | CurtainWallFrameDetails
    | NotYetSupportedElementTypeDetails
)


ViewSettingsOrError = ViewSettings | ErrorItem


ViewTransformationsOrError = ViewTransformations | ErrorItem


WindowType = Literal[
    "FloorPlan",
    "Section",
    "Details",
    "3DModel",
    "Layout",
    "Drawing",
    "CustomText",
    "CustomDraw",
    "MasterLayout",
    "Elevation",
    "InteriorElevation",
    "Worksheet",
    "Report",
    "3DDocument",
    "External3D",
    "Movie3D",
    "MovieRendering",
    "Rendering",
    "ModelCompare",
    "Interactive Schedule",
    "Unknown",
]


class Attribute(TypedDict):
    attributeId: AttributeId
    index: float
    name: str


class AttributeId(TypedDict):
    guid: Guid


class AttributeIdArrayItem(TypedDict):
    attributeId: AttributeId


class BasicDefaultValue(TypedDict):
    basicDefaultValue: PropertyValueDetails


class BeamDetails(TypedDict):
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    level: float
    offset: float
    slantAngle: float
    arcAngle: float
    verticalCurveHeight: float


class BoundingBox3D(TypedDict):
    xMin: float
    yMin: float
    zMin: float
    xMax: float
    yMax: float
    zMax: float


class BoundingBox3DOrError(TypedDict):
    boundingBox3D: BoundingBox3D


class BuildingMaterialDataArrayItem(TypedDict):
    name: str
    id: NotRequired[str]
    manufacturer: NotRequired[str]
    description: NotRequired[str]
    connPriority: NotRequired[int]
    cutFillIndex: NotRequired[int]
    cutFillPen: NotRequired[int]
    cutFillBackgroundPen: NotRequired[int]
    cutSurfaceIndex: NotRequired[int]
    thermalConductivity: NotRequired[float]
    density: NotRequired[float]
    heatCapacity: NotRequired[float]
    embodiedEnergy: NotRequired[float]
    embodiedCarbon: NotRequired[float]


class Change(TypedDict):
    id: str


class ClassificationId(TypedDict):
    classificationSystemId: ClassificationSystemId
    classificationItemId: NotRequired[ClassificationItemId]


class ClassificationIdOrError(TypedDict):
    classificationId: ClassificationId


class ClassificationItemId(TypedDict):
    guid: Guid


class ClassificationItemIdArrayItem(TypedDict):
    classificationItemId: ClassificationItemId


class ClassificationSystemId(TypedDict):
    guid: Guid


class ClassificationSystemIdArrayItem(TypedDict):
    classificationSystemId: ClassificationSystemId


class ColumnDetails(TypedDict):
    origin: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float


class ColumnsDatum(TypedDict):
    coordinates: Coordinates


class Comment(TypedDict):
    guid: Guid
    author: str
    text: str
    status: IssueCommentStatus
    creaTime: int


class CompositeDataArrayItem(TypedDict):
    name: str
    useWith: NotRequired[List[str]]
    skins: List[Skin]
    separators: List[Separator]


class Conflict(TypedDict):
    elementId: ElementId
    user: User


class ConnectedElement(TypedDict):
    elements: Elements


class Coordinates(TypedDict):
    x: float
    y: float
    z: float


class CurtainWallDetails(TypedDict):
    height: NotRequired[float]
    angle: NotRequired[float]


class CurtainWallFrameDetails(TypedDict):
    begCoordinate: Field3DCoordinate
    endCoordinate: Field3DCoordinate
    orientationVector: Field3DCoordinate
    panelConnectionHole: PanelConnectionHole
    frameContour: FrameContour
    segmentIndex: float
    className: str
    type: Literal["Deleted", "Division", "Corner", "Boundary", "Custom"]


class CurtainWallPanelDetails(TypedDict):
    polygonCoordinates: List[Field3DCoordinate]
    isHidden: bool
    segmentIndex: float
    className: str
    frames: List[ElementIdArrayItem]


class CurtainWallSegmentDetails(TypedDict):
    begCoordinate: Field3DCoordinate
    endCoordinate: Field3DCoordinate
    extrusionVector: Field3DCoordinate
    gridOrigin: Field3DCoordinate
    gridAngle: float
    arcOrigin: NotRequired[Field3DCoordinate]
    isNegativeArc: NotRequired[bool]


class DatabaseId(TypedDict):
    guid: Guid


class DatabaseIdArrayItem(TypedDict):
    databaseId: DatabaseId


class DetailWorksheetDetails(TypedDict):
    basePoint: Field2DCoordinate
    angle: float
    markerId: ElementId
    detailName: str
    detailIdStr: str
    isHorizontalMarker: bool
    isWindowOpened: bool
    clipPolygon: List[Field2DCoordinate]
    linkData: LinkData


class Details(TypedDict):
    floorIndex: NotRequired[float]
    layerIndex: NotRequired[float]
    drawIndex: NotRequired[float]
    typeSpecificDetails: NotRequired[TypeSpecificDetails]


class DetailsOfElement(TypedDict):
    type: ElementType
    id: str
    floorIndex: float
    layerIndex: float
    drawIndex: float
    details: TypeSpecificDetails


class DisplayValueEnumId(TypedDict):
    type: Literal["displayValue"]
    displayValue: str


class DocumentRevision(TypedDict):
    revisionId: DocumentRevisionId
    id: str
    finalId: str
    ownerUser: str
    status: Literal["Actual", "Issued"]
    changes: NotRequired[List[Change]]
    layoutInfo: LayoutInfo


class DocumentRevisionId(TypedDict):
    guid: Guid


class ElementClassification(TypedDict):
    elementId: ElementId
    classificationId: ClassificationId


class ElementClassificationOrError(TypedDict):
    classificationIds: ClassificationIdsOrErrors


class ElementId(TypedDict):
    guid: Guid


class ElementIdArrayItem(TypedDict):
    elementId: ElementId


class ElementPropertyValue(TypedDict):
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: PropertyValue


class ElementsWithDetail(TypedDict):
    elementId: ElementId
    details: Details


class ElementsWithGDLParameter(TypedDict):
    elementId: ElementId
    gdlParameters: GDLParameterList


class ElementsWithMoveVector(TypedDict):
    elementId: ElementId
    moveVector: MoveVector
    copy_: NotRequired[bool]


class EnumValue(TypedDict):
    enumValueId: NotRequired[EnumValueId]
    displayValue: str
    nonLocalizedValue: NotRequired[str]


class EnumValueId(TypedDict):
    enumValueId: EnumValueId


class Error(TypedDict):
    code: int
    message: str


class ErrorItem(TypedDict):
    error: Error


class ExpressionDefaultValue(TypedDict):
    expressions: List[str]


class FailedExecutionResult(TypedDict):
    success: Literal[False]
    error: Error


class FavoritesFromElement(TypedDict):
    elementId: ElementId
    favorite: str


class Field(TypedDict):
    projectInfoId: NotRequired[str]
    projectInfoName: NotRequired[str]
    projectInfoValue: NotRequired[str]


class Field2DCoordinate(TypedDict):
    x: float
    y: float


class Field3DCoordinate(TypedDict):
    x: float
    y: float
    z: float


class Field3DDimensions(TypedDict):
    x: float
    y: float
    z: float


class FrameContour(TypedDict):
    a1: float
    a2: float
    b1: float
    b2: float


class GDLParameterDetails(TypedDict):
    name: NotRequired[str]
    index: str
    type: str
    dimension1: NotRequired[float]
    dimension2: NotRequired[float]
    value: Any


class GDLParameterList(TypedDict):
    parameters: List[GDLParameterDetails]


class GeoReferencingParameters(TypedDict):
    crsName: str
    description: str
    geodeticDatum: str
    verticalDatum: str
    mapProjection: str
    mapZone: str


class Geometry(TypedDict):
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole]]


class Geometry(TypedDict):
    referencePosition: Field2DCoordinate


class Group(TypedDict):
    propertyGroupId: NotRequired[PropertyGroupId]
    name: NotRequired[str]


class Hole(TypedDict):
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class Hole4(TypedDict):
    polygonCoordinates: List[Field3DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class Hotlink(TypedDict):
    location: str
    children: NotRequired[Hotlinks]


class Issue(TypedDict):
    issueId: IssueId
    name: str
    parentIssueId: IssueId
    creaTime: int
    modiTime: int
    tagText: str
    tagTextElementId: ElementId
    isTagTextElemVisible: bool


class IssueId(TypedDict):
    guid: Guid


class IssueIdArrayItem(TypedDict):
    issueId: IssueId


class LayerDataArrayItem(TypedDict):
    name: str
    isHidden: NotRequired[bool]
    isLocked: NotRequired[bool]
    isWireframe: NotRequired[bool]


class LayoutInfo(TypedDict):
    id: str
    databaseId: DatabaseId
    name: str
    masterLayoutName: str
    width: float
    height: float
    subsetId: str
    subsetName: str
    ownerUser: str
    customSchemeData: NotRequired[RevisionCustomSchemeData]


class LibPartBasedElementDetails(TypedDict):
    libPart: LibPartDetails
    ownerElementId: NotRequired[ElementId]


class LibPartDetails(TypedDict):
    name: str
    parentUnID: LibPartUnId
    ownUnID: LibPartUnId


class LibPartUnId(TypedDict):
    guid: Guid


class Library(TypedDict):
    name: str
    path: str
    type: str
    available: NotRequired[bool]
    readOnly: NotRequired[bool]
    twServerUrl: NotRequired[str]
    urlWebLibrary: NotRequired[str]


class LinkData(TypedDict):
    referredView: NotRequired[ElementId]
    referredDrawing: NotRequired[ElementId]
    referredPMViewPoint: NotRequired[ElementId]


class MeshesDatum(TypedDict):
    floorIndex: NotRequired[int]
    level: NotRequired[float]
    skirtType: NotRequired[
        Literal["SurfaceOnlyWithoutSkirt", "WithSkirt", "SolidBodyWithSkirt"]
    ]
    skirtLevel: NotRequired[float]
    polygonCoordinates: List[Field3DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole4]]
    sublines: NotRequired[List[Subline]]


class ModelViewOption(TypedDict):
    name: str


class MoveVector(TypedDict):
    x: float
    y: float
    z: float


class NavigatorItemId(TypedDict):
    guid: Guid


class NavigatorItemIdArrayItem(TypedDict):
    navigatorItemId: NavigatorItemId


class NavigatorItemIdsWithViewSetting(TypedDict):
    navigatorItemId: NavigatorItemId
    viewSettings: ViewSettings


class NonLocalizedValueEnumId(TypedDict):
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class NormalAngleListPropertyValue(TypedDict):
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class NormalAnglePropertyValue(TypedDict):
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalAreaListPropertyValue(TypedDict):
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaPropertyValue(TypedDict):
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalBooleanListPropertyValue(TypedDict):
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalBooleanPropertyValue(TypedDict):
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalIntegerListPropertyValue(TypedDict):
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalIntegerPropertyValue(TypedDict):
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalLengthListPropertyValue(TypedDict):
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalLengthPropertyValue(TypedDict):
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalMultiEnumPropertyValue(TypedDict):
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: EnumValueIds


class NormalNumberListPropertyValue(TypedDict):
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalNumberPropertyValue(TypedDict):
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalSingleEnumPropertyValue(TypedDict):
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: EnumValueId


class NormalStringListPropertyValue(TypedDict):
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalStringPropertyValue(TypedDict):
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalVolumeListPropertyValue(TypedDict):
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumePropertyValue(TypedDict):
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NotAvailablePropertyValue(TypedDict):
    type: PropertyType
    status: Literal["notAvailable"]


class NotYetSupportedElementTypeDetails(TypedDict):
    error: str


class ObjectsDatum(TypedDict):
    libraryPartName: str
    coordinates: Field3DCoordinate
    dimensions: Field3DDimensions


class PanelConnectionHole(TypedDict):
    d: float
    w: float


class PolyArc(TypedDict):
    begIndex: int
    endIndex: int
    arcAngle: float


class PolylineDetails(TypedDict):
    coordinates: List[Field2DCoordinate]
    arcs: NotRequired[List[PolyArc]]
    zCoordinate: float


class PolylinesDatum(TypedDict):
    floorInd: NotRequired[float]
    coordinates: List[Field2DCoordinate]
    arcs: NotRequired[List[PolyArc]]


class Position(TypedDict):
    eastings: float
    northings: float
    elevation: float


class PossibleEnumValue(TypedDict):
    enumValue: EnumValue


class ProjectLocation(TypedDict):
    longitude: float
    latitude: float
    altitude: float
    north: float


class Properties(TypedDict):
    thermalConductivity: NotRequired[float]
    density: NotRequired[float]
    heatCapacity: NotRequired[float]
    embodiedEnergy: NotRequired[float]
    embodiedCarbon: NotRequired[float]


class Property(TypedDict):
    properties: NotRequired[Properties]


class PropertyDefinition(TypedDict):
    name: str
    description: str
    type: PropertyType
    isEditable: bool
    defaultValue: NotRequired[PropertyDefaultValue]
    possibleEnumValues: NotRequired[List[PossibleEnumValue]]
    availability: List[ClassificationItemIdArrayItem]
    group: Group


class PropertyDefinition(TypedDict):
    propertyDefinition: PropertyDefinition


class PropertyDetails(TypedDict):
    propertyId: PropertyId
    propertyType: Literal["StaticBuiltIn", "DynamicBuiltIn", "Custom"]
    propertyGroupName: str
    propertyName: str
    propertyCollectionType: Literal[
        "Undefined",
        "Single",
        "List",
        "SingleChoiceEnumeration",
        "MultipleChoiceEnumeration",
    ]
    propertyValueType: Literal[
        "Undefined", "Integer", "Real", "String", "Boolean", "Guid"
    ]
    propertyMeasureType: Literal[
        "Undefined", "Default", "Length", "Area", "Volume", "Angle"
    ]
    propertyIsEditable: bool


class PropertyGroup(TypedDict):
    name: str
    description: NotRequired[str]


class PropertyGroup(TypedDict):
    propertyGroup: PropertyGroup


class PropertyGroupId(TypedDict):
    guid: Guid


class PropertyGroupId(TypedDict):
    propertyGroupId: PropertyGroupId


class PropertyId(TypedDict):
    guid: Guid


class PropertyId(TypedDict):
    propertyId: PropertyId


class PropertyIdArrayItem(TypedDict):
    propertyId: PropertyId


class PropertyIdOrError(TypedDict):
    propertyId: PropertyId


class PropertyValue(TypedDict):
    value: str


class PropertyValueOrErrorItem(TypedDict):
    propertyValue: PropertyValue


class PropertyValuesOrError(TypedDict):
    propertyValues: PropertyValues


class RevisionChange(TypedDict):
    id: str
    description: str
    lastModifiedTime: str
    modifiedByUser: str
    isIssued: bool
    firstRevisionIssueId: NotRequired[RevisionIssueId]
    isArchived: bool
    customSchemeData: NotRequired[RevisionCustomSchemeData]


class RevisionChangesOfEntities(TypedDict):
    revisionChanges: List[RevisionChange]


class RevisionCustomSchemeDatum(TypedDict):
    customSchemeKey: Guid
    customSchemeValue: str


class RevisionIssue(TypedDict):
    revisionIssueId: RevisionIssueId
    id: str
    description: str
    issueTime: str
    issuedByUser: str
    overrideRevisionIDOfAllIncludedLayouts: bool
    createNewRevisionInAllIncludedLayouts: bool
    markersVisibleSinceIndex: NotRequired[int]
    isIssued: bool
    documentRevisions: NotRequired[List[DocumentRevision]]
    customSchemeData: NotRequired[RevisionCustomSchemeData]


class RevisionIssueId(TypedDict):
    guid: Guid


class Separator(TypedDict):
    lineTypeId: AttributeIdArrayItem
    linePen: int


class Skin(TypedDict):
    type: str
    buildingMaterialId: AttributeIdArrayItem
    framePen: int
    thickness: float


class SlabDetails(TypedDict):
    thickness: float
    level: float
    offsetFromTop: float
    zCoordinate: float
    polygonOutline: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: List[Hole]


class SlabsDatum(TypedDict):
    level: float
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole]]


class Story(TypedDict):
    dispOnSections: bool
    level: float
    name: str


class Story(TypedDict):
    index: int
    floorId: int
    dispOnSections: bool
    level: float
    name: str


class Subelement(TypedDict):
    cWallSegments: NotRequired[Elements]
    cWallFrames: NotRequired[Elements]
    cWallPanels: NotRequired[Elements]
    cWallJunctions: NotRequired[Elements]
    cWallAccessories: NotRequired[Elements]
    stairRisers: NotRequired[Elements]
    stairTreads: NotRequired[Elements]
    stairStructures: NotRequired[Elements]
    railingNodes: NotRequired[Elements]
    railingSegments: NotRequired[Elements]
    railingPosts: NotRequired[Elements]
    railingRailEnds: NotRequired[Elements]
    railingRailConnections: NotRequired[Elements]
    railingHandrailEnds: NotRequired[Elements]
    railingHandrailConnections: NotRequired[Elements]
    railingToprailEnds: NotRequired[Elements]
    railingToprailConnections: NotRequired[Elements]
    railingRails: NotRequired[Elements]
    railingToprails: NotRequired[Elements]
    railingHandrails: NotRequired[Elements]
    railingPatterns: NotRequired[Elements]
    railingInnerPosts: NotRequired[Elements]
    railingPanels: NotRequired[Elements]
    railingBalusterSets: NotRequired[Elements]
    railingBalusters: NotRequired[Elements]
    beamSegments: NotRequired[Elements]
    columnSegments: NotRequired[Elements]


class Subline(TypedDict):
    coordinates: List[Field3DCoordinate]


class SuccessfulExecutionResult(TypedDict):
    success: Literal[True]


class SurveyPoint(TypedDict):
    position: Position
    geoReferencingParameters: GeoReferencingParameters


class TypeSpecificDetails(TypedDict):
    begCoordinate: NotRequired[Field2DCoordinate]
    endCoordinate: NotRequired[Field2DCoordinate]
    height: NotRequired[float]
    bottomOffset: NotRequired[float]
    offset: NotRequired[float]
    begThickness: NotRequired[float]
    endThickness: NotRequired[float]


class User(TypedDict):
    userId: float
    userName: str


class UserUndefinedPropertyValue(TypedDict):
    type: PropertyType
    status: Literal["userUndefined"]


class ViewSettings(TypedDict):
    modelViewOptions: NotRequired[str]
    layerCombination: NotRequired[str]
    dimensionStyle: NotRequired[str]
    penSetName: NotRequired[str]
    graphicOverrideCombination: NotRequired[str]


class ViewTransformations(TypedDict):
    zoom: Zoom
    rotation: float


class WallDetails(TypedDict):
    geometryType: Literal["Straight", "Trapezoid", "Polygonal"]
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float
    offset: float
    arcAngle: NotRequired[float]
    begThickness: NotRequired[float]
    endThickness: NotRequired[float]
    polygonOutline: NotRequired[List[Field2DCoordinate]]
    polygonArcs: NotRequired[List[PolyArc]]


class ZoneDetails(TypedDict):
    name: str
    numberStr: str
    categoryAttributeId: AttributeId
    stampPosition: Field2DCoordinate
    isManual: bool
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole]]
    zCoordinate: float


class ZonesDatum(TypedDict):
    floorIndex: NotRequired[float]
    name: str
    numberStr: str
    categoryAttributeId: NotRequired[AttributeId]
    stampPosition: NotRequired[Field2DCoordinate]
    geometry: Geometry | Geometry


class Zoom(TypedDict):
    xMin: float
    yMin: float
    xMax: float
    yMax: float
