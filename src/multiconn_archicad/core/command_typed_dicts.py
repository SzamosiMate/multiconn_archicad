from __future__ import annotations
from typing import Any, List, Literal, TypedDict, Union
from typing_extensions import NotRequired

### This file is automatically generated and split. Do not edit directly. ###


from .base_typed_dicts import (
    Attribute,
    AttributeIdArrayItem,
    BoundingBox3DOrError,
    BuildingMaterialDataArrayItem,
    ClassificationSystemIdArrayItem,
    ColumnsDatum,
    Comment,
    CompositeDataArrayItem,
    Conflict,
    ConnectedElement,
    DatabaseIdArrayItem,
    DetailsOfElement,
    DocumentRevision,
    ElementClassification,
    ElementClassificationOrError,
    ElementIdArrayItem,
    ElementPropertyValue,
    ElementsWithDetail,
    ElementsWithGDLParameter,
    ElementsWithMoveVector,
    ErrorItem,
    FailedExecutionResult,
    FavoritesFromElement,
    Field,
    GDLParameterList,
    Hotlink,
    Issue,
    IssueId,
    IssueIdArrayItem,
    LayerDataArrayItem,
    Library,
    MeshesDatum,
    ModelViewOption,
    NavigatorItemIdArrayItem,
    NavigatorItemIdsWithViewSetting,
    ObjectsDatum,
    PolylinesDatum,
    ProjectLocation,
    Property,
    PropertyDefinition,
    PropertyDetails,
    PropertyGroup,
    PropertyGroupId,
    PropertyId,
    PropertyIdArrayItem,
    PropertyIdOrError,
    PropertyValuesOrError,
    RevisionChange,
    RevisionChangesOfEntities,
    RevisionIssue,
    SlabsDatum,
    Story,
    Subelement,
    SuccessfulExecutionResult,
    SurveyPoint,
    ViewSettings,
    ViewTransformations,
    ZonesDatum,
)


class AddCommentToIssueParameters(TypedDict):
    issueId: IssueId
    author: NotRequired[str]
    status: NotRequired[Literal["Error", "Warning", "Info", "Unknown"]]
    text: str


class ApplyFavoritesToElementDefaultsParameters(TypedDict):
    favorites: List[str]


class ApplyFavoritesToElementDefaultsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class AttachElementsToIssueParameters(TypedDict):
    issueId: IssueId
    elements: List[ElementIdArrayItem]
    type: Literal["Creation", "Highlight", "Deletion", "Modification"]


class ChangeSelectionOfElementsParameters(TypedDict):
    addElementsToSelection: NotRequired[List[ElementIdArrayItem]]
    removeElementsFromSelection: NotRequired[List[ElementIdArrayItem]]


class ChangeSelectionOfElementsResult(TypedDict):
    executionResultsOfAddToSelection: List[
        SuccessfulExecutionResult | FailedExecutionResult
    ]
    executionResultsOfRemoveFromSelection: List[
        SuccessfulExecutionResult | FailedExecutionResult
    ]


class CreateBuildingMaterialsParameters(TypedDict):
    buildingMaterialDataArray: List[BuildingMaterialDataArrayItem]
    overwriteExisting: NotRequired[bool]


class CreateBuildingMaterialsResult(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class CreateColumnsParameters(TypedDict):
    columnsData: List[ColumnsDatum]


class CreateColumnsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreateCompositesParameters(TypedDict):
    compositeDataArray: List[CompositeDataArrayItem]
    overwriteExisting: NotRequired[bool]


class CreateCompositesResult(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class CreateFavoritesFromElementsParameters(TypedDict):
    favoritesFromElements: List[FavoritesFromElement]


class CreateFavoritesFromElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class CreateIssueParameters(TypedDict):
    name: str
    parentIssueId: NotRequired[IssueId]
    tagText: NotRequired[str]


class CreateIssueResult(TypedDict):
    issueId: IssueId


class CreateLayersParameters(TypedDict):
    layerDataArray: List[LayerDataArrayItem]
    overwriteExisting: NotRequired[bool]


class CreateLayersResult(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class CreateMeshesParameters(TypedDict):
    meshesData: List[MeshesDatum]


class CreateMeshesResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreateObjectsParameters(TypedDict):
    objectsData: List[ObjectsDatum]


class CreateObjectsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreatePolylinesParameters(TypedDict):
    polylinesData: List[PolylinesDatum]


class CreatePolylinesResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreatePropertyDefinitionsParameters(TypedDict):
    propertyDefinitions: List[PropertyDefinition]


class CreatePropertyDefinitionsResult(TypedDict):
    propertyIds: List[PropertyIdOrError | ErrorItem]


class CreatePropertyGroupsParameters(TypedDict):
    propertyGroups: List[PropertyGroup]


class CreatePropertyGroupsResult(TypedDict):
    propertyGroupIds: List[PropertyGroupId]


class CreateSlabsParameters(TypedDict):
    slabsData: List[SlabsDatum]


class CreateSlabsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreateZonesParameters(TypedDict):
    zonesData: List[ZonesDatum]


class CreateZonesResult(TypedDict):
    elements: List[ElementIdArrayItem]


class DeleteIssueParameters(TypedDict):
    issueId: IssueId
    acceptAllElements: NotRequired[bool]


class DeletePropertyDefinitionsParameters(TypedDict):
    propertyIds: List[PropertyId]


class DeletePropertyDefinitionsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class DeletePropertyGroupsParameters(TypedDict):
    propertyGroupIds: List[PropertyGroupId]


class DeletePropertyGroupsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class DetachElementsFromIssueParameters(TypedDict):
    issueId: IssueId
    elements: List[ElementIdArrayItem]


class ExportIssuesToBCFParameters(TypedDict):
    issues: NotRequired[List[IssueIdArrayItem]]
    exportPath: str
    useExternalId: bool
    alignBySurveyPoint: bool


class FilterElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    filters: NotRequired[
        List[
            Literal[
                "IsEditable",
                "IsVisibleByLayer",
                "IsVisibleByRenovation",
                "IsVisibleByStructureDisplay",
                "IsVisibleIn3D",
                "OnActualFloor",
                "OnActualLayout",
                "InMyWorkspace",
                "IsIndependent",
                "InCroppedView",
                "HasAccessRight",
                "IsOverriddenByRenovation",
            ]
        ]
    ]


class FilterElementsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class GenerateDocumentationParameters(TypedDict):
    destinationFolder: str


class Get3DBoundingBoxesParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class Get3DBoundingBoxesResult(TypedDict):
    boundingBoxes3D: List[BoundingBox3DOrError | ErrorItem]


class GetAddOnVersionResult(TypedDict):
    version: str


class GetAllElementsParameters(TypedDict):
    filters: NotRequired[
        List[
            Literal[
                "IsEditable",
                "IsVisibleByLayer",
                "IsVisibleByRenovation",
                "IsVisibleByStructureDisplay",
                "IsVisibleIn3D",
                "OnActualFloor",
                "OnActualLayout",
                "InMyWorkspace",
                "IsIndependent",
                "InCroppedView",
                "HasAccessRight",
                "IsOverriddenByRenovation",
            ]
        ]
    ]
    databases: NotRequired[List[DatabaseIdArrayItem]]


class GetAllElementsResult(TypedDict):
    elements: List[ElementIdArrayItem]
    executionResultForDatabases: NotRequired[
        List[SuccessfulExecutionResult | FailedExecutionResult]
    ]


class GetAllPropertiesResult(TypedDict):
    properties: List[PropertyDetails]


class GetArchicadLocationResult(TypedDict):
    archicadLocation: str


class GetAttributesByTypeParameters(TypedDict):
    attributeType: Literal[
        "Layer",
        "Line",
        "Fill",
        "Composite",
        "Surface",
        "LayerCombination",
        "ZoneCategory",
        "Profile",
        "PenTable",
        "MEPSystem",
        "OperationProfile",
        "BuildingMaterial",
    ]


class GetAttributesByTypeResult(TypedDict):
    attributes: List[Attribute]


class GetBuildingMaterialPhysicalPropertiesParameters(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class GetBuildingMaterialPhysicalPropertiesResult(TypedDict):
    properties: List[Property]


class GetClassificationsOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    classificationSystemIds: List[ClassificationSystemIdArrayItem]


class GetClassificationsOfElementsResult(TypedDict):
    elementClassifications: List[ElementClassificationOrError | ErrorItem]


class GetCommentsFromIssueParameters(TypedDict):
    issueId: IssueId


class GetCommentsFromIssueResult(TypedDict):
    comments: List[Comment]


class GetConnectedElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    connectedElementType: Literal[
        "Wall",
        "Column",
        "Beam",
        "Window",
        "Door",
        "Object",
        "Lamp",
        "Slab",
        "Roof",
        "Mesh",
        "Dimension",
        "RadialDimension",
        "LevelDimension",
        "AngleDimension",
        "Text",
        "Label",
        "Zone",
        "Hatch",
        "Line",
        "PolyLine",
        "Arc",
        "Circle",
        "Spline",
        "Hotspot",
        "CutPlane",
        "Camera",
        "CamSet",
        "Group",
        "SectElem",
        "Drawing",
        "Picture",
        "Detail",
        "Elevation",
        "InteriorElevation",
        "Worksheet",
        "Hotlink",
        "CurtainWall",
        "CurtainWallSegment",
        "CurtainWallFrame",
        "CurtainWallPanel",
        "CurtainWallJunction",
        "CurtainWallAccessory",
        "Shell",
        "Skylight",
        "Morph",
        "ChangeMarker",
        "Stair",
        "Riser",
        "Tread",
        "StairStructure",
        "Railing",
        "RailingToprail",
        "RailingHandrail",
        "RailingRail",
        "RailingPost",
        "RailingInnerPost",
        "RailingBaluster",
        "RailingPanel",
        "RailingSegment",
        "RailingNode",
        "RailingBalusterSet",
        "RailingPattern",
        "RailingToprailEnd",
        "RailingHandrailEnd",
        "RailingRailEnd",
        "RailingToprailConnection",
        "RailingHandrailConnection",
        "RailingRailConnection",
        "RailingEndFinish",
        "BeamSegment",
        "ColumnSegment",
        "Opening",
        "Unknown",
    ]


class GetConnectedElementsResult(TypedDict):
    connectedElements: List[ConnectedElement]


class GetCurrentRevisionChangesOfLayoutsParameters(TypedDict):
    layoutDatabaseIds: List[DatabaseIdArrayItem]


class GetCurrentRevisionChangesOfLayoutsResult(TypedDict):
    currentRevisionChangesOfLayouts: RevisionChangesOfEntities | ErrorItem


class GetCurrentWindowTypeResult(TypedDict):
    currentWindowType: Literal[
        "FloorPlan",
        "Section",
        "Details",
        "3DModel",
        "Layout",
        "Drawing",
        "CustomText",
        "CustomDraw",
        "MasterLayout",
        "Elevation",
        "InteriorElevation",
        "Worksheet",
        "Report",
        "3DDocument",
        "External3D",
        "Movie3D",
        "MovieRendering",
        "Rendering",
        "ModelCompare",
        "Interactive Schedule",
        "Unknown",
    ]


class GetDatabaseIdFromNavigatorItemIdParameters(TypedDict):
    navigatorItemIds: List[NavigatorItemIdArrayItem]


class GetDatabaseIdFromNavigatorItemIdResult(TypedDict):
    databases: List[DatabaseIdArrayItem]


class GetDetailsOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class GetDetailsOfElementsResult(TypedDict):
    detailsOfElements: List[DetailsOfElement]


class GetDocumentRevisionsResult(TypedDict):
    documentRevisions: List[DocumentRevision]


class GetElementsAttachedToIssueParameters(TypedDict):
    issueId: IssueId
    type: Literal["Creation", "Highlight", "Deletion", "Modification"]


class GetElementsAttachedToIssueResult(TypedDict):
    elements: List[ElementIdArrayItem]


class GetElementsByTypeParameters(TypedDict):
    elementType: Literal[
        "Wall",
        "Column",
        "Beam",
        "Window",
        "Door",
        "Object",
        "Lamp",
        "Slab",
        "Roof",
        "Mesh",
        "Dimension",
        "RadialDimension",
        "LevelDimension",
        "AngleDimension",
        "Text",
        "Label",
        "Zone",
        "Hatch",
        "Line",
        "PolyLine",
        "Arc",
        "Circle",
        "Spline",
        "Hotspot",
        "CutPlane",
        "Camera",
        "CamSet",
        "Group",
        "SectElem",
        "Drawing",
        "Picture",
        "Detail",
        "Elevation",
        "InteriorElevation",
        "Worksheet",
        "Hotlink",
        "CurtainWall",
        "CurtainWallSegment",
        "CurtainWallFrame",
        "CurtainWallPanel",
        "CurtainWallJunction",
        "CurtainWallAccessory",
        "Shell",
        "Skylight",
        "Morph",
        "ChangeMarker",
        "Stair",
        "Riser",
        "Tread",
        "StairStructure",
        "Railing",
        "RailingToprail",
        "RailingHandrail",
        "RailingRail",
        "RailingPost",
        "RailingInnerPost",
        "RailingBaluster",
        "RailingPanel",
        "RailingSegment",
        "RailingNode",
        "RailingBalusterSet",
        "RailingPattern",
        "RailingToprailEnd",
        "RailingHandrailEnd",
        "RailingRailEnd",
        "RailingToprailConnection",
        "RailingHandrailConnection",
        "RailingRailConnection",
        "RailingEndFinish",
        "BeamSegment",
        "ColumnSegment",
        "Opening",
        "Unknown",
    ]
    filters: NotRequired[
        List[
            Literal[
                "IsEditable",
                "IsVisibleByLayer",
                "IsVisibleByRenovation",
                "IsVisibleByStructureDisplay",
                "IsVisibleIn3D",
                "OnActualFloor",
                "OnActualLayout",
                "InMyWorkspace",
                "IsIndependent",
                "InCroppedView",
                "HasAccessRight",
                "IsOverriddenByRenovation",
            ]
        ]
    ]
    databases: NotRequired[List[DatabaseIdArrayItem]]


class GetElementsByTypeResult(TypedDict):
    elements: List[ElementIdArrayItem]
    executionResultForDatabases: NotRequired[
        List[SuccessfulExecutionResult | FailedExecutionResult]
    ]


class GetGDLParametersOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class GetGDLParametersOfElementsResult(TypedDict):
    gdlParametersOfElements: List[GDLParameterList]


class GetGeoLocationResult(TypedDict):
    projectLocation: ProjectLocation
    surveyPoint: SurveyPoint


class GetHotlinksResult(TypedDict):
    hotlinks: List[Hotlink]


class GetIssuesResult(TypedDict):
    issues: List[Issue]


class GetLibrariesResult(TypedDict):
    libraries: List[Library]


class GetModelViewOptionsResult(TypedDict):
    modelViewOptions: List[ModelViewOption]


class GetProjectInfoFieldsResult(TypedDict):
    fields: List[Field]


class GetProjectInfoResult(TypedDict):
    isUntitled: bool
    isTeamwork: bool
    projectLocation: NotRequired[str]
    projectPath: NotRequired[str]
    projectName: NotRequired[str]


class GetPropertyValuesOfAttributesParameters(TypedDict):
    attributeIds: List[AttributeIdArrayItem]
    properties: List[PropertyIdArrayItem]


class GetPropertyValuesOfAttributesResult(TypedDict):
    propertyValuesForAttributes: List[PropertyValuesOrError | ErrorItem]


class GetPropertyValuesOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    properties: List[PropertyIdArrayItem]


class GetPropertyValuesOfElementsResult(TypedDict):
    propertyValuesForElements: List[PropertyValuesOrError | ErrorItem]


class GetRevisionChangesOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class GetRevisionChangesOfElementsResult(TypedDict):
    revisionChangesOfElements: RevisionChangesOfEntities | ErrorItem


class GetRevisionChangesResult(TypedDict):
    revisionChanges: List[RevisionChange]


class GetRevisionIssuesResult(TypedDict):
    revisionIssues: List[RevisionIssue]


class GetSelectedElementsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class GetStoriesResult(TypedDict):
    firstStory: int
    lastStory: int
    actStory: int
    skipNullFloor: bool
    stories: List[Story]


class GetSubelementsOfHierarchicalElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class GetSubelementsOfHierarchicalElementsResult(TypedDict):
    subelements: List[Subelement]


class GetView2DTransformationsParameters(TypedDict):
    databases: NotRequired[List[DatabaseIdArrayItem]]


class GetView2DTransformationsResult(TypedDict):
    transformations: List[ViewTransformations | ErrorItem]


class GetViewSettingsParameters(TypedDict):
    navigatorItemIds: List[NavigatorItemIdArrayItem]


class GetViewSettingsResult(TypedDict):
    viewSettings: List[ViewSettings | ErrorItem]


class HighlightElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    highlightedColors: List[List[int]]
    wireframe3D: NotRequired[bool]
    nonHighlightedColor: NotRequired[List[int]]


class ImportIssuesFromBCFParameters(TypedDict):
    importPath: str
    alignBySurveyPoint: bool


class MoveElementsParameters(TypedDict):
    elementsWithMoveVectors: List[ElementsWithMoveVector]


class MoveElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class OpenProjectParameters(TypedDict):
    projectFilePath: str


class PublishPublisherSetParameters(TypedDict):
    publisherSetName: str
    outputPath: NotRequired[str]


class ReleaseElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class ReserveElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class ReserveElementsResult(TypedDict):
    executionResult: SuccessfulExecutionResult | FailedExecutionResult
    conflicts: NotRequired[List[Conflict]]


class SetClassificationsOfElementsParameters(TypedDict):
    elementClassifications: List[ElementClassification]


class SetClassificationsOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class SetDetailsOfElementsParameters(TypedDict):
    elementsWithDetails: List[ElementsWithDetail]


class SetDetailsOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class SetGDLParametersOfElementsParameters(TypedDict):
    elementsWithGDLParameters: List[ElementsWithGDLParameter]


class SetGDLParametersOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class SetProjectInfoFieldParameters(TypedDict):
    projectInfoId: str
    projectInfoValue: str


class SetPropertyValuesOfAttributesParameters(TypedDict):
    attributePropertyValues: Any


class SetPropertyValuesOfAttributesResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class SetPropertyValuesOfElementsParameters(TypedDict):
    elementPropertyValues: List[ElementPropertyValue]


class SetPropertyValuesOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class SetStoriesParameters(TypedDict):
    stories: List[Story]


class SetViewSettingsParameters(TypedDict):
    navigatorItemIdsWithViewSettings: List[NavigatorItemIdsWithViewSetting]


class SetViewSettingsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class UpdateDrawingsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
