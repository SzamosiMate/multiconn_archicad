import json
from code_generation.paths import paths

def main():
    """
    Generates a pytest file to test the instantiation of all command Pydantic models
    using property-based testing with Hypothesis.
    """
    print("--- Starting Test File Generation ---")

    # 1. Load the master schema
    try:
        with open(paths.MASTER_SCHEMA_OUTPUT, "r", encoding="utf-8") as f:
            master_schema = json.load(f)
    except FileNotFoundError:
        print(f"❌ Error: Master schema not found at {paths.MASTER_SCHEMA_OUTPUT}. Run step 1 first.")
        return

    # 2. Load the names of the command models we want to test
    try:
        with open(paths.COMMAND_MODELS_NAMES_OUTPUT, "r", encoding="utf-8") as f:
            command_model_names = json.load(f)
    except FileNotFoundError:
        print(f"❌ Error: Command model names not found at {paths.COMMAND_MODELS_NAMES_OUTPUT}. Run step 1 first.")
        return

    # 3. Define the Python code structure for the test file
    file_header = f"""
# This file is automatically generated by the pipeline. Do not edit directly.

import pytest
import json
from hypothesis import given, strategies as st
from hypothesis_jsonschema import from_schema

from multiconn_archicad.models.types import *
from multiconn_archicad.models.commands import *


# Load the master schema which hypothesis will use to generate test data
MASTER_SCHEMA = json.loads(r'''
{json.dumps(master_schema, indent=4)}
''')

"""

    # 4. Generate a test function for each command model
    test_functions = []
    all_definitions = master_schema.get("$defs", {})

    for model_name in sorted(command_model_names):
        temp_schema_for_test = {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$defs": all_definitions,
            "$ref": f"#/$defs/{model_name}",
        }

        schema_as_string = json.dumps(temp_schema_for_test)

        test_function = f"""
@given(data=from_schema(json.loads(r'''{schema_as_string}''')))
def test_instantiate_{model_name}(data: dict):
    \"\"\"
    Tests that the {model_name} model can be successfully instantiated
    with valid data generated from its JSON schema.
    \"\"\"
    try:
        {model_name}.model_validate(data)
    except Exception as e:
        pytest.fail(f"Failed to instantiate {model_name} with data: {{repr(data)}}\\nError: {{e}}")

"""
        test_functions.append(test_function)

    # 5. Assemble and write the final test file
    final_content = file_header + "".join(test_functions)
    paths.GENERATED_TESTS_OUTPUT.write_text(final_content, encoding="utf-8")

    print(f"✅ Successfully generated {len(test_functions)} tests.")
    print(f"   Test file created at: {paths.GENERATED_TESTS_OUTPUT}")


if __name__ == "__main__":
    main()