from __future__ import annotations
from typing import Any, List, Literal, Union, TypeAlias, Annotated
from uuid import UUID
from enum import Enum

from pydantic import BaseModel, ConfigDict, Field, RootModel, StringConstraints

### This file is automatically generated and surgically cleaned. Do not edit directly. ###


class AttributeType(Enum):
    Layer = "Layer"
    Line = "Line"
    Fill = "Fill"
    Composite = "Composite"
    Surface = "Surface"
    LayerCombination = "LayerCombination"
    ZoneCategory = "ZoneCategory"
    Profile = "Profile"
    PenTable = "PenTable"
    MEPSystem = "MEPSystem"
    OperationProfile = "OperationProfile"
    BuildingMaterial = "BuildingMaterial"


class GDLParameterDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str | None, Field(description="The name of the parameter.")] = None
    index: Annotated[str, Field(description="The index of the parameter.")]
    type: Annotated[str, Field(description="The type of the parameter.")]
    dimension1: Annotated[
        float | None,
        Field(description="The 1st dimension of array (in case of array value)."),
    ] = None
    dimension2: Annotated[
        float | None,
        Field(description="The 2nd dimension of array (in case of array value)."),
    ] = None
    value: Annotated[Any, Field(description="The value of the parameter.")]


class PolyArc(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begIndex: Annotated[
        int, Field(description="Node index of one end point of the arc.")
    ]
    endIndex: Annotated[
        int, Field(description="Node index of the other end point of the arc.")
    ]
    arcAngle: Annotated[
        float,
        Field(
            description="Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment."
        ),
    ]


class Coordinate2D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: Annotated[float, Field(description="X value of the coordinate.")]
    y: Annotated[float, Field(description="Y value of the coordinate.")]


class Coordinate3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: Annotated[float, Field(description="X value of the coordinate.")]
    y: Annotated[float, Field(description="Y value of the coordinate.")]
    z: Annotated[float, Field(description="Z value of the coordinate.")]


class Dimensions3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: Annotated[float, Field(description="X dimension.")]
    y: Annotated[float, Field(description="Y dimension.")]
    z: Annotated[float, Field(description="Z dimension.")]


class Error(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: Annotated[int, Field(description="The code of the error.")]
    message: Annotated[str, Field(description="The error message.")]


class ErrorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    error: Error


class SuccessfulExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[True]


class FailedExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[False]
    error: Annotated[Error, Field(description="The details of an execution failure.")]


class ElementType(Enum):
    Wall = "Wall"
    Column = "Column"
    Beam = "Beam"
    Window = "Window"
    Door = "Door"
    Object = "Object"
    Lamp = "Lamp"
    Slab = "Slab"
    Roof = "Roof"
    Mesh = "Mesh"
    Dimension = "Dimension"
    RadialDimension = "RadialDimension"
    LevelDimension = "LevelDimension"
    AngleDimension = "AngleDimension"
    Text = "Text"
    Label = "Label"
    Zone = "Zone"
    Hatch = "Hatch"
    Line = "Line"
    PolyLine = "PolyLine"
    Arc = "Arc"
    Circle = "Circle"
    Spline = "Spline"
    Hotspot = "Hotspot"
    CutPlane = "CutPlane"
    Camera = "Camera"
    CamSet = "CamSet"
    Group = "Group"
    SectElem = "SectElem"
    Drawing = "Drawing"
    Picture = "Picture"
    Detail = "Detail"
    Elevation = "Elevation"
    InteriorElevation = "InteriorElevation"
    Worksheet = "Worksheet"
    Hotlink = "Hotlink"
    CurtainWall = "CurtainWall"
    CurtainWallSegment = "CurtainWallSegment"
    CurtainWallFrame = "CurtainWallFrame"
    CurtainWallPanel = "CurtainWallPanel"
    CurtainWallJunction = "CurtainWallJunction"
    CurtainWallAccessory = "CurtainWallAccessory"
    Shell = "Shell"
    Skylight = "Skylight"
    Morph = "Morph"
    ChangeMarker = "ChangeMarker"
    Stair = "Stair"
    Riser = "Riser"
    Tread = "Tread"
    StairStructure = "StairStructure"
    Railing = "Railing"
    RailingToprail = "RailingToprail"
    RailingHandrail = "RailingHandrail"
    RailingRail = "RailingRail"
    RailingPost = "RailingPost"
    RailingInnerPost = "RailingInnerPost"
    RailingBaluster = "RailingBaluster"
    RailingPanel = "RailingPanel"
    RailingSegment = "RailingSegment"
    RailingNode = "RailingNode"
    RailingBalusterSet = "RailingBalusterSet"
    RailingPattern = "RailingPattern"
    RailingToprailEnd = "RailingToprailEnd"
    RailingHandrailEnd = "RailingHandrailEnd"
    RailingRailEnd = "RailingRailEnd"
    RailingToprailConnection = "RailingToprailConnection"
    RailingHandrailConnection = "RailingHandrailConnection"
    RailingRailConnection = "RailingRailConnection"
    RailingEndFinish = "RailingEndFinish"
    BeamSegment = "BeamSegment"
    ColumnSegment = "ColumnSegment"
    Opening = "Opening"
    Unknown = "Unknown"


class ElementFilter(Enum):
    IsEditable = "IsEditable"
    IsVisibleByLayer = "IsVisibleByLayer"
    IsVisibleByRenovation = "IsVisibleByRenovation"
    IsVisibleByStructureDisplay = "IsVisibleByStructureDisplay"
    IsVisibleIn3D = "IsVisibleIn3D"
    OnActualFloor = "OnActualFloor"
    OnActualLayout = "OnActualLayout"
    InMyWorkspace = "InMyWorkspace"
    IsIndependent = "IsIndependent"
    InCroppedView = "InCroppedView"
    HasAccessRight = "HasAccessRight"
    IsOverriddenByRenovation = "IsOverriddenByRenovation"


class WindowType(Enum):
    FloorPlan = "FloorPlan"
    Section = "Section"
    Details = "Details"
    field_3DModel = "3DModel"
    Layout = "Layout"
    Drawing = "Drawing"
    CustomText = "CustomText"
    CustomDraw = "CustomDraw"
    MasterLayout = "MasterLayout"
    Elevation = "Elevation"
    InteriorElevation = "InteriorElevation"
    Worksheet = "Worksheet"
    Report = "Report"
    field_3DDocument = "3DDocument"
    External3D = "External3D"
    Movie3D = "Movie3D"
    MovieRendering = "MovieRendering"
    Rendering = "Rendering"
    ModelCompare = "ModelCompare"
    Interactive_Schedule = "Interactive Schedule"
    Unknown = "Unknown"


class IssueId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class IssueIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class IssueElementType(Enum):
    Creation = "Creation"
    Highlight = "Highlight"
    Deletion = "Deletion"
    Modification = "Modification"


class IssueCommentStatus(Enum):
    Error = "Error"
    Warning = "Warning"
    Info = "Info"
    Unknown = "Unknown"


class PropertyGroupId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class PropertyGroupIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupId: PropertyGroupId


class PropertyId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class PropertyIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId


class PropertyType(Enum):
    StaticBuiltIn = "StaticBuiltIn"
    DynamicBuiltIn = "DynamicBuiltIn"
    Custom = "Custom"


class PropertyCollectionType(Enum):
    Undefined = "Undefined"
    Single = "Single"
    List = "List"
    SingleChoiceEnumeration = "SingleChoiceEnumeration"
    MultipleChoiceEnumeration = "MultipleChoiceEnumeration"


class PropertyValueType(Enum):
    Undefined = "Undefined"
    Integer = "Integer"
    Real = "Real"
    String = "String"
    Boolean = "Boolean"
    Guid = "Guid"


class PropertyMeasureType(Enum):
    Undefined = "Undefined"
    Default = "Default"
    Length = "Length"
    Area = "Area"
    Volume = "Volume"
    Angle = "Angle"


class PropertyDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId
    propertyType: PropertyType
    propertyGroupName: str
    propertyName: str
    propertyCollectionType: PropertyCollectionType
    propertyValueType: PropertyValueType
    propertyMeasureType: PropertyMeasureType
    propertyIsEditable: bool


class PropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    value: str


class PropertyValueArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValue: PropertyValue


class PropertyValuesArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValues: Annotated[
        List[PropertyValueArrayItem | ErrorItem],
        Field(description="A list of property values."),
    ]


class PropertyDataType(Enum):
    number = "number"
    integer = "integer"
    string = "string"
    boolean = "boolean"
    length = "length"
    area = "area"
    volume = "volume"
    angle = "angle"
    numberList = "numberList"
    integerList = "integerList"
    stringList = "stringList"
    booleanList = "booleanList"
    lengthList = "lengthList"
    areaList = "areaList"
    volumeList = "volumeList"
    angleList = "angleList"
    singleEnum = "singleEnum"
    multiEnum = "multiEnum"


class DisplayValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class EnumValueIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValueId: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]


class UserUndefinedPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: PropertyDataType
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: PropertyDataType
    status: Literal["notAvailable"]


class NormalNumberPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class NormalSingleEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]


class NormalMultiEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: Annotated[
        List[EnumValueIdArrayItem],
        Field(description="A list of enumeration identifiers."),
    ]


class ExpressionDefaultValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    expressions: List[str]


class ClassificationSystemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class ClassificationSystemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId


class ClassificationItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class ClassificationItemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId


class ClassificationId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId
    classificationItemId: Annotated[
        ClassificationItemId | None,
        Field(
            description="The element's classification in the given system. If no value is specified here, the element is Unclassified in this system."
        ),
    ] = None


class ClassificationIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationId: ClassificationId


class ElementClassificationItemArray(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationIds: Annotated[
        List[ClassificationIdArrayItem | ErrorItem],
        Field(description="A list of element classification identifiers or errors."),
    ]


class BoundingBox3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: Annotated[
        float, Field(description="The minimum X value of the bounding box.")
    ]
    yMin: Annotated[
        float, Field(description="The minimum Y value of the bounding box.")
    ]
    zMin: Annotated[
        float, Field(description="The minimum Z value of the bounding box.")
    ]
    xMax: Annotated[
        float, Field(description="The maximum X value of the bounding box.")
    ]
    yMax: Annotated[
        float, Field(description="The maximum Y value of the bounding box.")
    ]
    zMax: Annotated[
        float, Field(description="The maximum Z value of the bounding box.")
    ]


class BoundingBox3DArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBox3D: BoundingBox3D


class LibPartUnId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class LibPartDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    parentUnID: LibPartUnId
    ownUnID: LibPartUnId


class NavigatorItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class DatabaseId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class ViewSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modelViewOptions: Annotated[
        str | None,
        Field(
            description="The name of the model view options. If empty, the view has custom model view options."
        ),
    ] = None
    layerCombination: Annotated[
        str | None,
        Field(
            description="The name of the layer combination. If empty, the view has custom layer combination."
        ),
    ] = None
    dimensionStyle: Annotated[
        str | None,
        Field(
            description="The name of the dimension style. If empty, the view has custom dimension style."
        ),
    ] = None
    penSetName: Annotated[
        str | None,
        Field(
            description="The name of the pen set. If empty, the view has custom pen set."
        ),
    ] = None
    graphicOverrideCombination: Annotated[
        str | None,
        Field(
            description="The name of the graphic override combination. If empty, the view has custom graphic override combination."
        ),
    ] = None


class Zoom(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: Annotated[float, Field(description="The minimum X value of the zoom box.")]
    yMin: Annotated[float, Field(description="The minimum Y value of the zoom box.")]
    xMax: Annotated[float, Field(description="The maximum X value of the zoom box.")]
    yMax: Annotated[float, Field(description="The maximum Y value of the zoom box.")]


class ViewTransformations(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    zoom: Annotated[
        Zoom,
        Field(
            description="The actual zoom parameters, rectangular region of the model."
        ),
    ]
    rotation: Annotated[float, Field(description="The orientation in radian.")]


class Hole2D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: Annotated[
        List[Coordinate2D],
        Field(description="The 2D coordinates of the edge of the hole.", min_length=3),
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the hole.")
    ] = None


class Hole3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: Annotated[
        List[Coordinate3D],
        Field(
            description="The 3D coordinates of the polygon of the hole.", min_length=3
        ),
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the hole.")
    ] = None


class GeometryType(Enum):
    Straight = "Straight"
    Trapezoid = "Trapezoid"
    Polygonal = "Polygonal"


class WallDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geometryType: GeometryType
    begCoordinate: Coordinate2D
    endCoordinate: Coordinate2D
    zCoordinate: float
    height: Annotated[float, Field(description="height relative to bottom")]
    bottomOffset: Annotated[
        float, Field(description="base level of the wall relative to the floor level")
    ]
    offset: Annotated[
        float, Field(description="wall's base line's offset from ref. line")
    ]
    arcAngle: Annotated[
        float | None, Field(description="The arc angle of the curved wall in radians.")
    ] = None
    begThickness: Annotated[
        float | None,
        Field(description="Thickness at the beginning in case of trapezoid wall"),
    ] = None
    endThickness: Annotated[
        float | None,
        Field(description="Thickness at the end in case of trapezoid wall"),
    ] = None
    polygonOutline: Annotated[
        List[Coordinate2D] | None,
        Field(description="Polygon outline in case of polygonal wall"),
    ] = None
    polygonArcs: Annotated[
        List[PolyArc] | None,
        Field(description="Polygon arcs in case of polygonal wall"),
    ] = None


class BeamDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begCoordinate: Coordinate2D
    endCoordinate: Coordinate2D
    zCoordinate: float
    level: Annotated[
        float, Field(description="base height of the beam relative to the floor level")
    ]
    offset: Annotated[float, Field(description="beam ref.line offset from the center")]
    slantAngle: Annotated[
        float, Field(description="The slant angle of the beam in radians.")
    ]
    arcAngle: Annotated[
        float,
        Field(
            description="The arc angle of the (horizontally) curved beam in radians."
        ),
    ]
    verticalCurveHeight: Annotated[
        float, Field(description="The height of the vertical curve of the beam.")
    ]


class SlabDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    thickness: Annotated[float, Field(description="Thickness of the slab.")]
    level: Annotated[
        float,
        Field(
            description="Distance of the reference level of the slab from the floor level."
        ),
    ]
    offsetFromTop: Annotated[
        float,
        Field(
            description="Vertical distance between the reference level and the top of the slab."
        ),
    ]
    zCoordinate: float
    polygonOutline: Annotated[
        List[Coordinate2D], Field(description="Polygon outline of the slab.")
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the slab.")
    ] = None
    holes: Annotated[
        List[Hole2D],
        Field(
            description="A list of 2D holes in an element defined by closed polylines"
        ),
    ]


class ColumnDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    origin: Coordinate2D
    zCoordinate: float
    height: Annotated[float, Field(description="height relative to bottom")]
    bottomOffset: Annotated[
        float, Field(description="base level of the column relative to the floor level")
    ]


class ObjectDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    origin: Coordinate3D
    dimensions: Coordinate3D
    angle: float


class PolylineDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    coordinates: List[Coordinate2D]
    arcs: Annotated[
        List[PolyArc] | None, Field(description="The arcs of the polyline.")
    ] = None
    zCoordinate: float


class CurtainWallDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    height: float | None = None
    angle: Annotated[
        float | None,
        Field(description="The rotation angle of the curtain wall in radians."),
    ] = None


class CurtainWallSegmentDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begCoordinate: Coordinate3D
    endCoordinate: Coordinate3D
    extrusionVector: Coordinate3D
    gridOrigin: Coordinate3D
    gridAngle: Annotated[float, Field(description="The angle of the grid in radians.")]
    arcOrigin: Coordinate3D | None = None
    isNegativeArc: Annotated[
        bool | None, Field(description="Indicates if the arc is negative.")
    ] = None


class PanelConnectionHole(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    d: Annotated[float, Field(description="Depth of the panel connection hole.")]
    w: Annotated[float, Field(description="Width of the panel connection hole.")]


class FrameContour(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    a1: Annotated[float, Field(description="Width1 of the frame contour.")]
    a2: Annotated[float, Field(description="Width2 of the frame contour.")]
    b1: Annotated[float, Field(description="Length1 of the frame contour.")]
    b2: Annotated[float, Field(description="Length2 of the frame contour.")]


class Type(Enum):
    Deleted = "Deleted"
    Division = "Division"
    Corner = "Corner"
    Boundary = "Boundary"
    Custom = "Custom"


class CurtainWallFrameDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begCoordinate: Coordinate3D
    endCoordinate: Coordinate3D
    orientationVector: Coordinate3D
    panelConnectionHole: Annotated[
        PanelConnectionHole,
        Field(description="The parameters of the panel connection hole."),
    ]
    frameContour: Annotated[
        FrameContour, Field(description="The parameters of the frame contour.")
    ]
    segmentIndex: Annotated[
        float,
        Field(
            description="The index of the curtain wall segment to which this frame belongs."
        ),
    ]
    className: str
    type: Type


class MeshSkirtType(Enum):
    SurfaceOnlyWithoutSkirt = "SurfaceOnlyWithoutSkirt"
    WithSkirt = "WithSkirt"
    SolidBodyWithSkirt = "SolidBodyWithSkirt"


class Subline(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    coordinates: Annotated[
        List[Coordinate3D],
        Field(description="The 3D coordinates of the leveling subline of the mesh."),
    ]


class MeshDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    level: Annotated[float, Field(description="The Z reference level of coordinates.")]
    skirtType: MeshSkirtType
    skirtLevel: Annotated[float, Field(description="The height of the skirt.")]
    polygonCoordinates: Annotated[
        List[Coordinate3D],
        Field(
            description="The 3D coordinates of the outline polygon of the mesh.",
            min_length=3,
        ),
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the mesh.")
    ] = None
    holes: Annotated[
        List[Hole3D] | None,
        Field(
            description="A list of 3D holes in an element defined by closed polylines"
        ),
    ] = None
    sublines: Annotated[
        List[Subline] | None,
        Field(
            description="The leveling sublines inside the polygon of the mesh.",
            min_length=1,
        ),
    ] = None


class NotYetSupportedElementTypeDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    error: str


class RevisionIssueId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class DocumentRevisionId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class RevisionCustomSchemeDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    customSchemeKey: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]
    customSchemeValue: str


class DocumentRevisionReference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionId: DocumentRevisionId


class RevisionIssue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionIssueId: RevisionIssueId
    id: str
    description: str
    issueTime: str
    issuedByUser: str
    overrideRevisionIDOfAllIncludedLayouts: bool
    createNewRevisionInAllIncludedLayouts: bool
    markersVisibleSinceIndex: int | None = None
    isIssued: bool
    documentRevisions: Annotated[
        List[DocumentRevisionReference] | None,
        Field(description="All document revisions belong to the current issue."),
    ] = None
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class RevisionChange(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str
    description: str
    lastModifiedTime: str
    modifiedByUser: str
    isIssued: bool
    firstRevisionIssueId: Annotated[
        RevisionIssueId | None,
        Field(
            description="The identifier of the first issue in which the given change is issued."
        ),
    ] = None
    isArchived: bool
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class LayoutInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str
    databaseId: DatabaseId
    name: str
    masterLayoutName: str
    width: float
    height: float
    subsetId: str
    subsetName: str
    ownerUser: str
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class Status(Enum):
    Actual = "Actual"
    Issued = "Issued"


class Change(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str


class DocumentRevision(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionId: DocumentRevisionId
    id: str
    finalId: str
    ownerUser: str
    status: Status
    changes: Annotated[
        List[Change] | None,
        Field(description="All changes belong to the given document revision."),
    ] = None
    layoutInfo: LayoutInfo


class RevisionChangesArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChanges: List[RevisionChange] | None = None


class StoryParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    index: Annotated[int, Field(description="The story index.")]
    floorId: Annotated[int, Field(description="Unique ID of the story.")]
    dispOnSections: Annotated[
        bool,
        Field(
            description="Story level lines should appear on sections and elevations."
        ),
    ]
    level: Annotated[float, Field(description="The story level.")]
    name: Annotated[str, Field(description="The name of the story.")]


class StorySettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    dispOnSections: Annotated[
        bool,
        Field(
            description="Story level lines should appear on sections and elevations."
        ),
    ]
    level: Annotated[float, Field(description="The story level.")]
    name: Annotated[str, Field(description="The name of the story.")]


class AutomaticZoneGeometry(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    referencePosition: Annotated[
        Coordinate2D, Field(description="Reference point to automatically find zone.")
    ]


class ManualZoneGeometry(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: Annotated[
        List[Coordinate2D],
        Field(description="The 2D coordinates of the edge of the zone.", min_length=3),
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the zone.")
    ] = None
    holes: Annotated[
        List[Hole2D] | None,
        Field(
            description="A list of 2D holes in an element defined by closed polylines"
        ),
    ] = None


class WallSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begCoordinate: Coordinate2D | None = None
    endCoordinate: Coordinate2D | None = None
    height: Annotated[float | None, Field(description="height relative to bottom")] = (
        None
    )
    bottomOffset: Annotated[
        float | None,
        Field(description="base level of the wall relative to the floor level"),
    ] = None
    offset: Annotated[
        float | None, Field(description="wall's base line's offset from ref. line")
    ] = None
    begThickness: Annotated[
        float | None,
        Field(description="Thickness at the beginning in case of trapezoid wall"),
    ] = None
    endThickness: Annotated[
        float | None,
        Field(description="Thickness at the end in case of trapezoid wall"),
    ] = None


class PropertyGroup(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    description: str | None = None


class PropertyGroupArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroup: PropertyGroup


class EnumValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValueId: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId | None,
        Field(description="The identifier of a property enumeration value."),
    ] = None
    displayValue: Annotated[
        str, Field(description="Displayed value of the enumeration.")
    ]
    nonLocalizedValue: Annotated[
        str | None,
        Field(description="Nonlocalized value of the enumeration if there is one."),
    ] = None


class PossibleEnumValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValue: Annotated[
        EnumValue, Field(description="The description of an enumeration value.")
    ]


class Group(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupId: PropertyGroupId | None = None
    name: str | None = None


class GetAddOnVersionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: Annotated[
        str, Field(description='Version number in the form of "1.1.1".', min_length=1)
    ]


class GetArchicadLocationResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    archicadLocation: Annotated[
        str,
        Field(
            description="The location of the Archicad executable in the filesystem.",
            min_length=1,
        ),
    ]


class GetCurrentWindowTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    currentWindowType: WindowType


class GetProjectInfoResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    isUntitled: Annotated[
        bool, Field(description="True, if the project is not saved yet.")
    ]
    isTeamwork: Annotated[
        bool,
        Field(description="True, if the project is a Teamwork (BIMcloud) project."),
    ]
    projectLocation: Annotated[
        str | None,
        Field(
            description="The location of the project in the filesystem or a BIMcloud project reference.",
            min_length=1,
        ),
    ] = None
    projectPath: Annotated[
        str | None,
        Field(
            description="The path of the project. A filesystem path or a BIMcloud server relative path.",
            min_length=1,
        ),
    ] = None
    projectName: Annotated[
        str | None, Field(description="The name of the project.", min_length=1)
    ] = None


class FieldModel(BaseModel):
    projectInfoId: Annotated[
        str | None, Field(description="The id of the project info field.")
    ] = None
    projectInfoName: Annotated[
        str | None,
        Field(description="The name of the project info field visible on UI."),
    ] = None
    projectInfoValue: Annotated[
        str | None, Field(description="The value of the project info field.")
    ] = None


class GetProjectInfoFieldsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fields: Annotated[
        List[FieldModel], Field(description="A list of project info fields.")
    ]


class SetProjectInfoFieldParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectInfoId: Annotated[
        str, Field(description="The id of the project info field.", min_length=1)
    ]
    projectInfoValue: Annotated[
        str, Field(description="The new value of the project info field.", min_length=1)
    ]


class GetStoriesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    firstStory: Annotated[int, Field(description="First story index.")]
    lastStory: Annotated[int, Field(description="Last story index.")]
    actStory: Annotated[
        int, Field(description="Actual (currently visible in 2D) story index.")
    ]
    skipNullFloor: Annotated[
        bool,
        Field(
            description="Floor indices above ground-floor level may start with 1 instead of 0."
        ),
    ]
    stories: Annotated[
        List[StoryParameters],
        Field(
            description="A list of project stories, each with their complete parameters."
        ),
    ]


class SetStoriesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    stories: Annotated[
        List[StorySettings],
        Field(
            description="A list of story settings, used as input for creating or modifying multiple stories."
        ),
    ]


class OpenProjectParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectFilePath: Annotated[
        str, Field(description="The target project file to open.")
    ]


class ProjectLocation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    longitude: Annotated[float, Field(description="longitude in degrees")]
    latitude: Annotated[float, Field(description="latitude in degrees")]
    altitude: Annotated[float, Field(description="altitude in meters")]
    north: Annotated[float, Field(description="north direction in radians")]


class Position(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    eastings: Annotated[
        float,
        Field(
            description="Location along the easting of the coordinate system of the target map coordinate reference system."
        ),
    ]
    northings: Annotated[
        float,
        Field(
            description="Location along the northing of the coordinate system of the target map coordinate reference system."
        ),
    ]
    elevation: Annotated[
        float,
        Field(
            description="Orthogonal height relative to the vertical datum specified."
        ),
    ]


class GeoReferencingParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    crsName: Annotated[
        str,
        Field(
            description="Name by which the coordinate reference system is identified."
        ),
    ]
    description: Annotated[
        str,
        Field(description="Informal description of this coordinate reference system."),
    ]
    geodeticDatum: Annotated[
        str, Field(description="Name by which this datum is identified.")
    ]
    verticalDatum: Annotated[
        str, Field(description="Name by which the vertical datum is identified.")
    ]
    mapProjection: Annotated[
        str, Field(description="Name by which the map projection is identified.")
    ]
    mapZone: Annotated[
        str,
        Field(
            description="Name by which the map zone, relating to the MapProjection, is identified."
        ),
    ]


class SurveyPoint(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    position: Position
    geoReferencingParameters: GeoReferencingParameters


class GetGeoLocationResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectLocation: ProjectLocation
    surveyPoint: SurveyPoint


class ChangeSelectionOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResultsOfAddToSelection: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]
    executionResultsOfRemoveFromSelection: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class Details(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    floorIndex: float | None = None
    layerIndex: float | None = None
    drawIndex: float | None = None
    typeSpecificDetails: Annotated[
        WallSettings | None,
        Field(
            description="Defines the modifiable type-specific settings for an element. Used as input for SET requests."
        ),
    ] = None


class SetDetailsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class Get3DBoundingBoxesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBoxes3D: Annotated[
        List[BoundingBox3DArrayItem | ErrorItem],
        Field(description="A list of 3D bounding boxes."),
    ]


class Settings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    volumeTolerance: Annotated[
        float,
        Field(
            description="Intersection body volume greater then this value will be considered as a collision. Default value is 0.001."
        ),
    ]
    performSurfaceCheck: Annotated[
        bool,
        Field(
            description="Enables surface collision check. If disabled the surfaceTolerance value will be ignored. By default it's false."
        ),
    ]
    surfaceTolerance: Annotated[
        float,
        Field(
            description="Intersection body surface area greater then this value will be considered as a collision. Default value is 0.001."
        ),
    ]


class HighlightedColor(RootModel[List[int]]):
    root: Annotated[
        List[int],
        Field(
            description="Color of the highlighted element as an [r, g, b, a] array. Each component must be in the 0-255 range.",
            max_length=4,
            min_length=4,
        ),
    ]


class MoveVector(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: Annotated[float, Field(description="X value of the vector.")]
    y: Annotated[float, Field(description="Y value of the vector.")]
    z: Annotated[float, Field(description="Z value of the vector.")]


class MoveElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class SetGDLParametersOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementClassifications: Annotated[
        List[ElementClassificationItemArray | ErrorItem],
        Field(
            description="The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects."
        ),
    ]


class SetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class Coordinates(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: Annotated[float, Field(description="X value of the coordinate.")]
    y: Annotated[float, Field(description="Y value of the coordinate.")]
    z: Annotated[float, Field(description="Z value of the coordinate.")]


class ColumnsDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    coordinates: Annotated[Coordinates, Field(description="3D coordinate.")]


class CreateColumnsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    columnsData: Annotated[
        List[ColumnsDatum], Field(description="Array of data to create Columns.")
    ]


class SlabsDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    level: Annotated[
        float,
        Field(description="The Z coordinate value of the reference line of the slab."),
    ]
    polygonCoordinates: Annotated[
        List[Coordinate2D],
        Field(description="The 2D coordinates of the edge of the slab.", min_length=3),
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the slab.")
    ] = None
    holes: Annotated[
        List[Hole2D] | None,
        Field(
            description="A list of 2D holes in an element defined by closed polylines"
        ),
    ] = None


class CreateSlabsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    slabsData: Annotated[
        List[SlabsDatum], Field(description="Array of data to create Slabs.")
    ]


class PolylinesDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    floorInd: Annotated[
        float | None,
        Field(
            description="The identifier of the floor. Optinal parameter, by default the current floor is used."
        ),
    ] = None
    coordinates: Annotated[
        List[Coordinate2D],
        Field(description="The 2D coordinates of the polyline.", min_length=2),
    ]
    arcs: Annotated[
        List[PolyArc] | None, Field(description="The arcs of the polyline.")
    ] = None


class CreatePolylinesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polylinesData: Annotated[
        List[PolylinesDatum], Field(description="Array of data to create Polylines.")
    ]


class ObjectsDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    libraryPartName: Annotated[
        str, Field(description="The name of the library part to use.")
    ]
    coordinates: Coordinate3D
    dimensions: Dimensions3D | None = None


class CreateObjectsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    objectsData: Annotated[
        List[ObjectsDatum], Field(description="Array of data to create Objects.")
    ]


class MeshesDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    floorIndex: int | None = None
    level: Annotated[
        float | None, Field(description="The Z reference level of coordinates.")
    ] = None
    skirtType: MeshSkirtType | None = None
    skirtLevel: Annotated[
        float | None, Field(description="The height of the skirt.")
    ] = None
    polygonCoordinates: Annotated[
        List[Coordinate3D],
        Field(
            description="The 3D coordinates of the outline polygon of the mesh.",
            min_length=3,
        ),
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the mesh.")
    ] = None
    holes: Annotated[
        List[Hole3D] | None,
        Field(
            description="A list of 3D holes in an element defined by closed polylines"
        ),
    ] = None
    sublines: Annotated[
        List[Subline] | None,
        Field(
            description="The leveling sublines inside the polygon of the mesh.",
            min_length=1,
        ),
    ] = None


class CreateMeshesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    meshesData: Annotated[
        List[MeshesDatum], Field(description="Array of data to create Meshes.")
    ]


class GetFavoritesByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementType: ElementType


class GetFavoritesByTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    favorites: Annotated[List[str], Field(description="A list of favorite names")]


class ApplyFavoritesToElementDefaultsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    favorites: Annotated[List[str], Field(description="A list of favorite names")]


class ApplyFavoritesToElementDefaultsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CreateFavoritesFromElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetAllPropertiesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[PropertyDetails], Field(description="A list of property identifiers.")
    ]


class GetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForElements: Annotated[
        List[PropertyValuesArrayItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."
        ),
    ]


class SetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetPropertyValuesOfAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForAttributes: Annotated[
        List[PropertyValuesArrayItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given attributes. The order of the inner lists are that of the given properties."
        ),
    ]


class SetPropertyValuesOfAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CreatePropertyGroupsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroups: Annotated[
        List[PropertyGroupArrayItem],
        Field(description="The parameters of the new property groups."),
    ]


class CreatePropertyGroupsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="The identifiers of the created property groups."),
    ]


class DeletePropertyGroupsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="The identifiers of property groups to delete."),
    ]


class DeletePropertyGroupsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CreatePropertyDefinitionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: Annotated[
        List[PropertyIdArrayItem | ErrorItem],
        Field(description="A list of property identifiers."),
    ]


class DeletePropertyDefinitionsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: Annotated[
        List[PropertyIdArrayItem],
        Field(description="The identifiers of properties to delete."),
    ]


class DeletePropertyDefinitionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetAttributesByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeType: AttributeType


class LayerDataArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Name.")]
    isHidden: Annotated[bool | None, Field(description="Hide/Show.")] = None
    isLocked: Annotated[bool | None, Field(description="Lock/Unlock.")] = None
    isWireframe: Annotated[
        bool | None, Field(description="Force the model to wireframe.")
    ] = None


class CreateLayersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layerDataArray: Annotated[
        List[LayerDataArrayItem],
        Field(description="Array of data to create new Layers."),
    ]
    overwriteExisting: Annotated[
        bool | None,
        Field(
            description="Overwrite the Layer if exists with the same name. The default is false."
        ),
    ] = None


class BuildingMaterialDataArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Name.")]
    id: Annotated[str | None, Field(description="Identifier.")] = None
    manufacturer: Annotated[str | None, Field(description="Manufacturer.")] = None
    description: Annotated[str | None, Field(description="Decription.")] = None
    connPriority: Annotated[int | None, Field(description="Intersection priority.")] = (
        None
    )
    cutFillIndex: Annotated[int | None, Field(description="Index of the Cut Fill.")] = (
        None
    )
    cutFillPen: Annotated[int | None, Field(description="Cut Fill Foreground Pen.")] = (
        None
    )
    cutFillBackgroundPen: Annotated[
        int | None, Field(description="Cut Fill Background Pen.")
    ] = None
    cutSurfaceIndex: Annotated[
        int | None, Field(description="Index of the Cut Surface.")
    ] = None
    thermalConductivity: Annotated[
        float | None, Field(description="Thermal Conductivity.")
    ] = None
    density: Annotated[float | None, Field(description="Density.")] = None
    heatCapacity: Annotated[float | None, Field(description="Heat Capacity.")] = None
    embodiedEnergy: Annotated[float | None, Field(description="Embodied Energy.")] = (
        None
    )
    embodiedCarbon: Annotated[float | None, Field(description="Embodied Carbon.")] = (
        None
    )


class CreateBuildingMaterialsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buildingMaterialDataArray: Annotated[
        List[BuildingMaterialDataArrayItem],
        Field(description="Array of data to create new Building Materials."),
    ]
    overwriteExisting: Annotated[
        bool | None,
        Field(
            description="Overwrite the Building Material if exists with the same name. The default is false."
        ),
    ] = None


class Properties(BaseModel):
    thermalConductivity: Annotated[
        float | None, Field(description="Thermal Conductivity.")
    ] = None
    density: Annotated[float | None, Field(description="Density.")] = None
    heatCapacity: Annotated[float | None, Field(description="Heat Capacity.")] = None
    embodiedEnergy: Annotated[float | None, Field(description="Embodied Energy.")] = (
        None
    )
    embodiedCarbon: Annotated[float | None, Field(description="Embodied Carbon.")] = (
        None
    )


class Property(BaseModel):
    properties: Annotated[
        Properties | None, Field(description="Physical properties.")
    ] = None


class GetBuildingMaterialPhysicalPropertiesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[Property], Field(description="Physical properties list.")
    ]


class Library(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Library name.")]
    path: Annotated[str, Field(description="A filesystem path to library location.")]
    type: Annotated[str, Field(description="Library type.")]
    available: Annotated[bool | None, Field(description="Is library not missing.")] = (
        None
    )
    readOnly: Annotated[bool | None, Field(description="Is library not writable.")] = (
        None
    )
    twServerUrl: Annotated[
        str | None,
        Field(description="URL address of the TeamWork server hosting the library."),
    ] = None
    urlWebLibrary: Annotated[
        str | None, Field(description="URL of the downloaded Internet library.")
    ] = None


class GetLibrariesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    libraries: Annotated[
        List[Library], Field(description="A list of project libraries.")
    ]


class User(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    userId: float
    userName: str


class PublishPublisherSetParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    publisherSetName: Annotated[
        str, Field(description="The name of the publisher set.", min_length=1)
    ]
    outputPath: Annotated[
        str | None,
        Field(
            description="Full local or LAN path for publishing. Optional, by default the path set in the settings of the publiser set will be used.",
            min_length=1,
        ),
    ] = None


class ModelViewOption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str


class GetModelViewOptionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modelViewOptions: List[ModelViewOption]


class GetViewSettingsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    viewSettings: List[ViewSettings | ErrorItem]


class NavigatorItemIdsWithViewSetting(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    viewSettings: ViewSettings


class SetViewSettingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIdsWithViewSettings: List[NavigatorItemIdsWithViewSetting]


class SetViewSettingsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetView2DTransformationsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    transformations: List[ViewTransformations | ErrorItem]


class CreateIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="The name of the issue.")]
    parentIssueId: IssueId | None = None
    tagText: Annotated[
        str | None, Field(description="Tag text of the issue, optional.")
    ] = None


class CreateIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class DeleteIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    acceptAllElements: Annotated[
        bool | None,
        Field(
            description="Accept all creation/deletion/modification of the deleted issue. By default false."
        ),
    ] = None


class AddCommentToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    author: Annotated[
        str | None, Field(description="The author of the new comment.")
    ] = None
    status: IssueCommentStatus | None = None
    text: Annotated[str, Field(description="Comment text to add.")]


class GetCommentsFromIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class Comment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="Comment identifier",
        ),
    ]
    author: Annotated[str, Field(description="Comment author")]
    text: Annotated[str, Field(description="Comment text")]
    status: IssueCommentStatus
    creaTime: Annotated[int, Field(description="Comment creation time")]


class GetCommentsFromIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    comments: Annotated[
        List[Comment], Field(description="A list of existing comments.")
    ]


class GetElementsAttachedToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    type: IssueElementType


class ExportIssuesToBCFParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issues: Annotated[
        List[IssueIdArrayItem] | None,
        Field(description="Leave it empty to export all issues."),
    ] = None
    exportPath: Annotated[
        str, Field(description="The os path to the bcf file, including it's name.")
    ]
    useExternalId: Annotated[
        bool,
        Field(
            description="Use external IFC ID or Archicad IFC ID as referenced in BCF topics."
        ),
    ]
    alignBySurveyPoint: Annotated[
        bool,
        Field(
            description="Align BCF views by Archicad Survey Point or Archicad Project Origin."
        ),
    ]


class ImportIssuesFromBCFParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    importPath: Annotated[
        str, Field(description="The os path to the bcf file, including it's name.")
    ]
    alignBySurveyPoint: Annotated[
        bool,
        Field(
            description="Align BCF views by Archicad Survey Point or Archicad Project Origin."
        ),
    ]


class GetRevisionIssuesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionIssues: List[RevisionIssue]


class GetRevisionChangesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChanges: List[RevisionChange]


class GetDocumentRevisionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    documentRevisions: List[DocumentRevision]


class GetCurrentRevisionChangesOfLayoutsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    currentRevisionChangesOfLayouts: RevisionChangesArrayItem | ErrorItem


class GetRevisionChangesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChangesOfElements: RevisionChangesArrayItem | ErrorItem


class GenerateDocumentationParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    destinationFolder: Annotated[
        str,
        Field(
            description="Destination folder for the generated documentation files.",
            min_length=1,
        ),
    ]


class ElementId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class AttributeId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
        ),
    ]


class GDLParameterList(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    parameters: Annotated[
        List[GDLParameterDetails], Field(description="The list of GDL parameters.")
    ]


class ElementPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: PropertyValue


class AttributePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    propertyId: PropertyId
    propertyValue: PropertyValue


class BasicDefaultValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    basicDefaultValue: Annotated[
        NotAvailablePropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue,
        Field(
            description="A normal, userUndefined, notAvailable or notEvaluated property value."
        ),
    ]


class ElementClassification(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    classificationId: ClassificationId


class NavigatorItemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId


class DatabaseIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    databaseId: DatabaseId


class LinkData(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    referredView: Annotated[
        ElementId | None,
        Field(
            description="Guid of the referred view. Only if the marker refers to a view."
        ),
    ] = None
    referredDrawing: Annotated[
        ElementId | None,
        Field(
            description="Guid of the referred drawing. Only if the marker refers to a drawing."
        ),
    ] = None
    referredPMViewPoint: Annotated[
        ElementId | None,
        Field(
            description="Guid of the referred view point. Only if the marker refers to a view point."
        ),
    ] = None


class DetailWorksheetDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    basePoint: Annotated[
        Coordinate2D, Field(description="Coordinate of the base point")
    ]
    angle: Annotated[
        float, Field(description="The rotation angle (radian) of the marker symbol")
    ]
    markerId: Annotated[ElementId, Field(description="Guid of the marker symbol")]
    detailName: Annotated[str, Field(description="Name of the detail/worksheet")]
    detailIdStr: Annotated[
        str, Field(description="Reference ID of the detail/worksheet")
    ]
    isHorizontalMarker: Annotated[
        bool, Field(description="Marker symbol is always horizontal?")
    ]
    isWindowOpened: Annotated[
        bool, Field(description="Side (detail/worksheet) window is opened?")
    ]
    clipPolygon: Annotated[
        List[Coordinate2D],
        Field(description="The clip polygon of the detail/worksheet"),
    ]
    linkData: Annotated[LinkData, Field(description="The marker link data")]


class LibPartBasedElementDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    libPart: LibPartDetails
    ownerElementId: ElementId | None = None
    ownerElementType: ElementType | None = None


class ZoneDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Name of the zone.")]
    numberStr: Annotated[str, Field(description="Zone number.")]
    categoryAttributeId: Annotated[
        AttributeId, Field(description="The identifier of the zone category attribute.")
    ]
    stampPosition: Annotated[
        Coordinate2D, Field(description="Position of the origin of the zone stamp.")
    ]
    isManual: Annotated[
        bool, Field(description="Is the coordinates of the zone manually placed?")
    ]
    polygonCoordinates: Annotated[
        List[Coordinate2D],
        Field(description="The 2D coordinates of the edge of the zone.", min_length=3),
    ]
    polygonArcs: Annotated[
        List[PolyArc] | None, Field(description="Polygon outline arcs of the zone.")
    ] = None
    holes: Annotated[
        List[Hole2D] | None,
        Field(
            description="A list of 2D holes in an element defined by closed polylines"
        ),
    ] = None
    zCoordinate: float


class PropertyDefinition(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    description: str
    type: PropertyDataType
    isEditable: bool
    defaultValue: BasicDefaultValue | ExpressionDefaultValue | None = None
    possibleEnumValues: Annotated[
        List[PossibleEnumValue] | None,
        Field(
            description="The possible enum values of the property when the property type is enumeration."
        ),
    ] = None
    availability: Annotated[
        List[ClassificationItemIdArrayItem],
        Field(
            description="The identifiers of classification items the new property is available for."
        ),
    ]
    group: Annotated[
        Group,
        Field(
            description="The property group defined by name or id. If both fields exists the id will be used."
        ),
    ]


class PropertyDefinitionArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinition: PropertyDefinition


class ElementsWithDetail(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    details: Annotated[Details, Field(description="Details of an element.")]


class SetDetailsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementsWithDetails: Annotated[
        List[ElementsWithDetail], Field(description="The elements with parameters.")
    ]


class Collision(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId1: ElementId
    elementId2: ElementId
    hasBodyCollision: bool
    hasClearenceCollision: bool


class GetCollisionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    collisions: List[Collision]


class ElementsWithMoveVector(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    moveVector: Annotated[MoveVector, Field(description="Move vector of a 3D point.")]
    copy_: Annotated[
        bool | None,
        Field(
            alias="copy",
            description="Optional parameter. If true, then a copy of the element will be moved. By default it's false.",
        ),
    ] = None


class MoveElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementsWithMoveVectors: Annotated[
        List[ElementsWithMoveVector],
        Field(description="The elements with move vector pairs."),
    ]


class GetGDLParametersOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    gdlParametersOfElements: Annotated[
        List[GDLParameterList], Field(description="The GDL parameters of elements.")
    ]


class ElementsWithGDLParameter(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    gdlParameters: Annotated[
        List[GDLParameterDetails], Field(description="The list of GDL parameters.")
    ]


class SetGDLParametersOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementsWithGDLParameters: Annotated[
        List[ElementsWithGDLParameter],
        Field(description="The elements with GDL parameters dictionary pairs."),
    ]


class SetClassificationsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementClassifications: Annotated[
        List[ElementClassification],
        Field(description="A list of element classification identifiers."),
    ]


class ZonesDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    floorIndex: float | None = None
    name: Annotated[str, Field(description="Name of the zone.")]
    numberStr: Annotated[str, Field(description="Zone number.")]
    categoryAttributeId: Annotated[
        AttributeId | None,
        Field(description="The identifier of the zone category attribute."),
    ] = None
    stampPosition: Annotated[
        Coordinate2D | None,
        Field(description="Position of the origin of the zone stamp."),
    ] = None
    geometry: AutomaticZoneGeometry | ManualZoneGeometry


class CreateZonesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    zonesData: Annotated[
        List[ZonesDatum], Field(description="Array of data to create Zones.")
    ]


class FavoritesFromElement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    favorite: str


class CreateFavoritesFromElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    favoritesFromElements: List[FavoritesFromElement]


class SetPropertyValuesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementPropertyValues: Annotated[
        List[ElementPropertyValue],
        Field(description="A list of element property values."),
    ]


class SetPropertyValuesOfAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributePropertyValues: Annotated[
        List[AttributePropertyValue],
        Field(description="A list of attribute property values."),
    ]


class CreatePropertyDefinitionsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinitions: Annotated[
        List[PropertyDefinitionArrayItem],
        Field(description="The parameters of the new properties."),
    ]


class Attribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    index: Annotated[float, Field(description="Index of the attribute.")]
    name: Annotated[str, Field(description="Name of the attribute.")]


class GetAttributesByTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[List[Attribute], Field(description="Details of attributes.")]


class Conflict(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    user: User


class ReserveElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResult: Annotated[
        SuccessfulExecutionResult | FailedExecutionResult,
        Field(description="The result of the execution."),
    ]
    conflicts: List[Conflict] | None = None


class Issue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    name: Annotated[str, Field(description="Issue name")]
    parentIssueId: IssueId
    creaTime: Annotated[int, Field(description="Issue creation time")]
    modiTime: Annotated[int, Field(description="Issue modification time")]
    tagText: Annotated[str, Field(description="Issue tag text - labels")]
    tagTextElementId: ElementId
    isTagTextElemVisible: Annotated[
        bool, Field(description="The visibility of the attached tag text element")
    ]


class GetIssuesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issues: Annotated[List[Issue], Field(description="A list of existing issues.")]


class ElementIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId


class AttributeIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId


class CurtainWallPanelDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: Annotated[
        List[Coordinate3D],
        Field(description="The 3D coordinates of the panel polygon.", min_length=3),
    ]
    isHidden: Annotated[
        bool,
        Field(
            description="Indicates if the panel is hidden (deleted panels remain in the database)."
        ),
    ]
    segmentIndex: Annotated[
        float,
        Field(
            description="The index of the curtain wall segment to which this panel belongs."
        ),
    ]
    className: str
    frames: Annotated[
        List[ElementIdArrayItem],
        Field(description="The surrounding frames.", min_length=3),
    ]


class GetElementsByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementType: ElementType
    filters: Annotated[List[ElementFilter] | None, Field(min_length=1)] = None
    databases: Annotated[
        List[DatabaseIdArrayItem] | None,
        Field(description="A list of Archicad databases."),
    ] = None


class GetAllElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    filters: Annotated[List[ElementFilter] | None, Field(min_length=1)] = None
    databases: Annotated[
        List[DatabaseIdArrayItem] | None,
        Field(description="A list of Archicad databases."),
    ] = None


class DetailsOfElement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: ElementType
    id: str
    floorIndex: float
    layerIndex: float
    drawIndex: float
    details: Annotated[
        WallDetails
        | BeamDetails
        | SlabDetails
        | ColumnDetails
        | DetailWorksheetDetails
        | LibPartBasedElementDetails
        | PolylineDetails
        | ZoneDetails
        | CurtainWallDetails
        | CurtainWallSegmentDetails
        | CurtainWallPanelDetails
        | CurtainWallFrameDetails
        | MeshDetails
        | NotYetSupportedElementTypeDetails,
        Field(
            description="Represents the complete type-specific details of an element. Used as output from GET requests"
        ),
    ]


class GetDetailsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    detailsOfElements: List[DetailsOfElement]


class Skin(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Annotated[str, Field(description="Skin type (Core, Finish, or Other)")]
    buildingMaterialId: AttributeIdArrayItem
    framePen: Annotated[int, Field(description="Skin frame pen index.")]
    thickness: Annotated[float, Field(description="Skin thickness (in meters).")]


class Separator(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    lineTypeId: AttributeIdArrayItem
    linePen: Annotated[int, Field(description="Separator line pen index.")]


class CompositeDataArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Name.")]
    useWith: Annotated[
        List[str] | None,
        Field(description="Array of types the composite can used with."),
    ] = None
    skins: Annotated[List[Skin], Field(description="Array of skin data.")]
    separators: Annotated[
        List[Separator],
        Field(
            description="Array of skin separator data. The number of items must be the number of skins plus one."
        ),
    ]


class CreateCompositesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    compositeDataArray: Annotated[
        List[CompositeDataArrayItem],
        Field(description="Array of data to create Composites."),
    ]
    overwriteExisting: Annotated[
        bool | None,
        Field(
            description="Overwrite the Composite if exists with the same name. The default is false."
        ),
    ] = None


class GetDatabaseIdFromNavigatorItemIdParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdArrayItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetDatabaseIdFromNavigatorItemIdResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    databases: Annotated[
        List[DatabaseIdArrayItem], Field(description="A list of Archicad databases.")
    ]


class GetViewSettingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdArrayItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetView2DTransformationsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    databases: Annotated[
        List[DatabaseIdArrayItem] | None,
        Field(description="A list of Archicad databases."),
    ] = None


class GetCurrentRevisionChangesOfLayoutsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layoutDatabaseIds: Annotated[
        List[DatabaseIdArrayItem], Field(description="A list of Archicad databases.")
    ]


class GetSelectedElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetElementsByTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    executionResultForDatabases: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult] | None,
        Field(description="A list of execution results."),
    ] = None


class GetAllElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    executionResultForDatabases: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult] | None,
        Field(description="A list of execution results."),
    ] = None


class ChangeSelectionOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    addElementsToSelection: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    removeElementsFromSelection: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None


class FilterElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    filters: Annotated[List[ElementFilter] | None, Field(min_length=1)] = None


class FilterElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetDetailsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class Get3DBoundingBoxesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetSubelementsOfHierarchicalElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class Subelement(BaseModel):
    cWallSegments: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    cWallFrames: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    cWallPanels: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    cWallJunctions: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    cWallAccessories: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    stairRisers: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    stairTreads: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    stairStructures: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingNodes: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingSegments: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingPosts: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingRailEnds: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingRailConnections: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingHandrailEnds: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingHandrailConnections: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingToprailEnds: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingToprailConnections: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingRails: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingToprails: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingHandrails: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingPatterns: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingInnerPosts: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingPanels: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingBalusterSets: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    railingBalusters: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    beamSegments: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    columnSegments: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None


class GetSubelementsOfHierarchicalElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    subelements: List[Subelement]


class GetConnectedElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    connectedElementType: ElementType


class ConnectedElement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetConnectedElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    connectedElements: List[ConnectedElement]


class GetCollisionsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    settings: Settings | None = None


class HighlightElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    highlightedColors: Annotated[
        List[HighlightedColor],
        Field(description="A list of colors to highlight elements."),
    ]
    wireframe3D: Annotated[
        bool | None,
        Field(
            description="Optional parameter. Switch non highlighted elements in the 3D window to wireframe."
        ),
    ] = None
    nonHighlightedColor: Annotated[
        List[int] | None,
        Field(
            description="Optional parameter. Color of the non highlighted elements as an [r, g, b, a] array. Each component must be in the 0-255 range.",
            max_length=4,
            min_length=4,
        ),
    ] = None


class DeleteElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetGDLParametersOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetClassificationsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class CreateColumnsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateSlabsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateZonesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreatePolylinesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateObjectsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateMeshesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetPropertyValuesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    properties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class GetPropertyValuesOfAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]
    properties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class CreateLayersResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class CreateBuildingMaterialsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class CreateCompositesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class GetBuildingMaterialPhysicalPropertiesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class ReserveElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class ReleaseElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class UpdateDrawingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class AttachElementsToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    type: IssueElementType


class DetachElementsFromIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetElementsAttachedToIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetRevisionChangesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class Hotlink(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    location: Annotated[str, Field(description="The path of the hotlink file.")]
    children: Annotated[
        List[Hotlink] | None,
        Field(description="The children of the hotlink node if it has any."),
    ] = None


class GetHotlinksResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    hotlinks: Annotated[List[Hotlink], Field(description="A list of hotlink nodes.")]
