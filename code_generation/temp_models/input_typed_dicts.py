# generated by datamodel-codegen:
#   filename:  tapir_master_schema.json
#   timestamp: 2025-07-14T08:25:32+00:00

from __future__ import annotations

from typing import Any, List, Literal, TypedDict

from typing_extensions import NotRequired

TapirMasterModels = Any


AttributeType = Literal[
    "Layer",
    "Line",
    "Fill",
    "Composite",
    "Surface",
    "LayerCombination",
    "ZoneCategory",
    "Profile",
    "PenTable",
    "MEPSystem",
    "OperationProfile",
    "BuildingMaterial",
]


Guid = str


class GDLParameterDetails(TypedDict):
    name: NotRequired[str]
    index: str
    type: str
    dimension1: NotRequired[float]
    dimension2: NotRequired[float]
    value: Any


class PolyArc(TypedDict):
    begIndex: int
    endIndex: int
    arcAngle: float


class Field2DCoordinate(TypedDict):
    x: float
    y: float


class Field3DCoordinate(TypedDict):
    x: float
    y: float
    z: float


class Field3DDimensions(TypedDict):
    x: float
    y: float
    z: float


class Error(TypedDict):
    code: int
    message: str


class ErrorItem(TypedDict):
    error: Error


class SuccessfulExecutionResult(TypedDict):
    success: Literal[True]


class FailedExecutionResult(TypedDict):
    success: Literal[False]
    error: Error


ExecutionResult = SuccessfulExecutionResult | FailedExecutionResult


ExecutionResults = List[ExecutionResult]


ElementType = Literal[
    "Wall",
    "Column",
    "Beam",
    "Window",
    "Door",
    "Object",
    "Lamp",
    "Slab",
    "Roof",
    "Mesh",
    "Dimension",
    "RadialDimension",
    "LevelDimension",
    "AngleDimension",
    "Text",
    "Label",
    "Zone",
    "Hatch",
    "Line",
    "PolyLine",
    "Arc",
    "Circle",
    "Spline",
    "Hotspot",
    "CutPlane",
    "Camera",
    "CamSet",
    "Group",
    "SectElem",
    "Drawing",
    "Picture",
    "Detail",
    "Elevation",
    "InteriorElevation",
    "Worksheet",
    "Hotlink",
    "CurtainWall",
    "CurtainWallSegment",
    "CurtainWallFrame",
    "CurtainWallPanel",
    "CurtainWallJunction",
    "CurtainWallAccessory",
    "Shell",
    "Skylight",
    "Morph",
    "ChangeMarker",
    "Stair",
    "Riser",
    "Tread",
    "StairStructure",
    "Railing",
    "RailingToprail",
    "RailingHandrail",
    "RailingRail",
    "RailingPost",
    "RailingInnerPost",
    "RailingBaluster",
    "RailingPanel",
    "RailingSegment",
    "RailingNode",
    "RailingBalusterSet",
    "RailingPattern",
    "RailingToprailEnd",
    "RailingHandrailEnd",
    "RailingRailEnd",
    "RailingToprailConnection",
    "RailingHandrailConnection",
    "RailingRailConnection",
    "RailingEndFinish",
    "BeamSegment",
    "ColumnSegment",
    "Opening",
    "Unknown",
]


ElementFilter = Literal[
    "IsEditable",
    "IsVisibleByLayer",
    "IsVisibleByRenovation",
    "IsVisibleByStructureDisplay",
    "IsVisibleIn3D",
    "OnActualFloor",
    "OnActualLayout",
    "InMyWorkspace",
    "IsIndependent",
    "InCroppedView",
    "HasAccessRight",
    "IsOverriddenByRenovation",
]


WindowType = Literal[
    "FloorPlan",
    "Section",
    "Details",
    "3DModel",
    "Layout",
    "Drawing",
    "CustomText",
    "CustomDraw",
    "MasterLayout",
    "Elevation",
    "InteriorElevation",
    "Worksheet",
    "Report",
    "3DDocument",
    "External3D",
    "Movie3D",
    "MovieRendering",
    "Rendering",
    "ModelCompare",
    "Interactive Schedule",
    "Unknown",
]


class IssueId(TypedDict):
    guid: Guid


class IssueIdArrayItem(TypedDict):
    issueId: IssueId


Issues = List[IssueIdArrayItem]


IssueElementType = Literal["Creation", "Highlight", "Deletion", "Modification"]


IssueCommentStatus = Literal["Error", "Warning", "Info", "Unknown"]


class PropertyId(TypedDict):
    guid: Guid


class PropertyGroupId(TypedDict):
    guid: Guid


class PropertyIdArrayItem(TypedDict):
    propertyId: PropertyId


PropertyIds = List[PropertyIdArrayItem]


class PropertyDetails(TypedDict):
    propertyId: PropertyId
    propertyType: Literal["StaticBuiltIn", "DynamicBuiltIn", "Custom"]
    propertyGroupName: str
    propertyName: str
    propertyCollectionType: Literal[
        "Undefined",
        "Single",
        "List",
        "SingleChoiceEnumeration",
        "MultipleChoiceEnumeration",
    ]
    propertyValueType: Literal[
        "Undefined", "Integer", "Real", "String", "Boolean", "Guid"
    ]
    propertyMeasureType: Literal[
        "Undefined", "Default", "Length", "Area", "Volume", "Angle"
    ]
    propertyIsEditable: bool


class PropertyValue(TypedDict):
    value: str


class PropertyValueOrErrorItem1(TypedDict):
    propertyValue: PropertyValue


PropertyValueOrErrorItem = PropertyValueOrErrorItem1 | ErrorItem


PropertyValues = List[PropertyValueOrErrorItem]


class PropertyValuesOrError1(TypedDict):
    propertyValues: PropertyValues


PropertyValuesOrError = PropertyValuesOrError1 | ErrorItem


PropertyValuesOrErrorArray = List[PropertyValuesOrError]


class PropertyIdOrError1(TypedDict):
    propertyId: PropertyId


PropertyIdOrError = PropertyIdOrError1 | ErrorItem


PropertyIdOrErrorArray = List[PropertyIdOrError]


PropertyType = Literal[
    "number",
    "integer",
    "string",
    "boolean",
    "length",
    "area",
    "volume",
    "angle",
    "numberList",
    "integerList",
    "stringList",
    "booleanList",
    "lengthList",
    "areaList",
    "volumeList",
    "angleList",
    "singleEnum",
    "multiEnum",
]


class DisplayValueEnumId(TypedDict):
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(TypedDict):
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


EnumValueId = DisplayValueEnumId | NonLocalizedValueEnumId


class EnumValueId1(TypedDict):
    enumValueId: EnumValueId


EnumValueIds = List[EnumValueId1]


class UserUndefinedPropertyValue(TypedDict):
    type: PropertyType
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(TypedDict):
    type: PropertyType
    status: Literal["notAvailable"]


class NormalNumberPropertyValue(TypedDict):
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(TypedDict):
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(TypedDict):
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(TypedDict):
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(TypedDict):
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(TypedDict):
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(TypedDict):
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(TypedDict):
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(TypedDict):
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(TypedDict):
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(TypedDict):
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(TypedDict):
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(TypedDict):
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(TypedDict):
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(TypedDict):
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(TypedDict):
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class NormalSingleEnumPropertyValue(TypedDict):
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: EnumValueId


class NormalMultiEnumPropertyValue(TypedDict):
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: EnumValueIds


class ExpressionDefaultValue(TypedDict):
    expressions: List[str]


class ClassificationSystemId(TypedDict):
    guid: Guid


class ClassificationSystemIdArrayItem(TypedDict):
    classificationSystemId: ClassificationSystemId


ClassificationSystemIds = List[ClassificationSystemIdArrayItem]


class ClassificationItemId(TypedDict):
    guid: Guid


class ClassificationItemIdArrayItem(TypedDict):
    classificationItemId: ClassificationItemId


class ClassificationId(TypedDict):
    classificationSystemId: ClassificationSystemId
    classificationItemId: NotRequired[ClassificationItemId]


class ClassificationIdOrError1(TypedDict):
    classificationId: ClassificationId


ClassificationIdOrError = ClassificationIdOrError1 | ErrorItem


ClassificationIdsOrErrors = List[ClassificationIdOrError]


class ElementClassificationOrError1(TypedDict):
    classificationIds: ClassificationIdsOrErrors


ElementClassificationOrError = ElementClassificationOrError1 | ErrorItem


ElementClassificationsOrErrors = List[ElementClassificationOrError]


class BoundingBox3D(TypedDict):
    xMin: float
    yMin: float
    zMin: float
    xMax: float
    yMax: float
    zMax: float


class BoundingBox3DOrError1(TypedDict):
    boundingBox3D: BoundingBox3D


BoundingBox3DOrError = BoundingBox3DOrError1 | ErrorItem


BoundingBoxes3D = List[BoundingBox3DOrError]


class LibPartUnId(TypedDict):
    guid: Guid


class LibPartDetails(TypedDict):
    name: str
    parentUnID: LibPartUnId
    ownUnID: LibPartUnId


class NavigatorItemId(TypedDict):
    guid: Guid


class DatabaseId(TypedDict):
    guid: Guid


class ViewSettings(TypedDict):
    modelViewOptions: NotRequired[str]
    layerCombination: NotRequired[str]
    dimensionStyle: NotRequired[str]
    penSetName: NotRequired[str]
    graphicOverrideCombination: NotRequired[str]


ViewSettingsOrError = ViewSettings | ErrorItem


class Zoom(TypedDict):
    xMin: float
    yMin: float
    xMax: float
    yMax: float


class ViewTransformations(TypedDict):
    zoom: Zoom
    rotation: float


ViewTransformationsOrError = ViewTransformations | ErrorItem


class WallDetails(TypedDict):
    geometryType: Literal["Straight", "Trapezoid", "Polygonal"]
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float
    offset: float
    arcAngle: NotRequired[float]
    begThickness: NotRequired[float]
    endThickness: NotRequired[float]
    polygonOutline: NotRequired[List[Field2DCoordinate]]
    polygonArcs: NotRequired[List[PolyArc]]


class BeamDetails(TypedDict):
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    level: float
    offset: float
    slantAngle: float
    arcAngle: float
    verticalCurveHeight: float


class Hole(TypedDict):
    polygonOutline: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class SlabDetails(TypedDict):
    thickness: float
    level: float
    offsetFromTop: float
    zCoordinate: float
    polygonOutline: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: List[Hole]


class ColumnDetails(TypedDict):
    origin: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float


class PolylineDetails(TypedDict):
    coordinates: List[Field2DCoordinate]
    arcs: NotRequired[List[PolyArc]]
    zCoordinate: float


class Hole1(TypedDict):
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class CurtainWallDetails(TypedDict):
    height: NotRequired[float]
    angle: NotRequired[float]


class CurtainWallSegmentDetails(TypedDict):
    begCoordinate: Field3DCoordinate
    endCoordinate: Field3DCoordinate
    extrusionVector: Field3DCoordinate
    gridOrigin: Field3DCoordinate
    gridAngle: float
    arcOrigin: NotRequired[Field3DCoordinate]
    isNegativeArc: NotRequired[bool]


class PanelConnectionHole(TypedDict):
    d: float
    w: float


class FrameContour(TypedDict):
    a1: float
    a2: float
    b1: float
    b2: float


class CurtainWallFrameDetails(TypedDict):
    begCoordinate: Field3DCoordinate
    endCoordinate: Field3DCoordinate
    orientationVector: Field3DCoordinate
    panelConnectionHole: PanelConnectionHole
    frameContour: FrameContour
    segmentIndex: float
    className: str
    type: Literal["Deleted", "Division", "Corner", "Boundary", "Custom"]


class NotYetSupportedElementTypeDetails(TypedDict):
    error: str


class RevisionIssueId(TypedDict):
    guid: Guid


class DocumentRevisionId(TypedDict):
    guid: Guid


class RevisionCustomSchemeDatum(TypedDict):
    customSchemeKey: Guid
    customSchemeValue: str


RevisionCustomSchemeData = List[RevisionCustomSchemeDatum]


class DocumentRevision(TypedDict):
    revisionId: DocumentRevisionId


class RevisionIssue(TypedDict):
    revisionIssueId: RevisionIssueId
    id: str
    description: str
    issueTime: str
    issuedByUser: str
    overrideRevisionIDOfAllIncludedLayouts: bool
    createNewRevisionInAllIncludedLayouts: bool
    markersVisibleSinceIndex: NotRequired[int]
    isIssued: bool
    documentRevisions: NotRequired[List[DocumentRevision]]
    customSchemeData: NotRequired[RevisionCustomSchemeData]


class RevisionChange(TypedDict):
    id: str
    description: str
    lastModifiedTime: str
    modifiedByUser: str
    isIssued: bool
    firstRevisionIssueId: NotRequired[RevisionIssueId]
    isArchived: bool
    customSchemeData: NotRequired[RevisionCustomSchemeData]


class LayoutInfo(TypedDict):
    id: str
    databaseId: DatabaseId
    name: str
    masterLayoutName: str
    width: float
    height: float
    subsetId: str
    subsetName: str
    ownerUser: str
    customSchemeData: NotRequired[RevisionCustomSchemeData]


class Change(TypedDict):
    id: str


class DocumentRevision1(TypedDict):
    revisionId: DocumentRevisionId
    id: str
    finalId: str
    ownerUser: str
    status: Literal["Actual", "Issued"]
    changes: NotRequired[List[Change]]
    layoutInfo: LayoutInfo


class RevisionChangesOfEntities1(TypedDict):
    revisionChanges: List[RevisionChange]


RevisionChangesOfEntities = RevisionChangesOfEntities1 | ErrorItem


class GetAddOnVersionResult(TypedDict):
    version: str


class GetArchicadLocationResult(TypedDict):
    archicadLocation: str


class GetCurrentWindowTypeResult(TypedDict):
    currentWindowType: WindowType


class GetProjectInfoResult(TypedDict):
    isUntitled: bool
    isTeamwork: bool
    projectLocation: NotRequired[str]
    projectPath: NotRequired[str]
    projectName: NotRequired[str]


class Field(TypedDict):
    projectInfoId: NotRequired[str]
    projectInfoName: NotRequired[str]
    projectInfoValue: NotRequired[str]


class GetProjectInfoFieldsResult(TypedDict):
    fields: List[Field]


class SetProjectInfoFieldParameters(TypedDict):
    projectInfoId: str
    projectInfoValue: str


class Story(TypedDict):
    index: int
    floorId: int
    dispOnSections: bool
    level: float
    name: str


class GetStoriesResult(TypedDict):
    firstStory: int
    lastStory: int
    actStory: int
    skipNullFloor: bool
    stories: List[Story]


class Story1(TypedDict):
    dispOnSections: bool
    level: float
    name: str


class SetStoriesParameters(TypedDict):
    stories: List[Story1]


class OpenProjectParameters(TypedDict):
    projectFilePath: str


class ProjectLocation(TypedDict):
    longitude: float
    latitude: float
    altitude: float
    north: float


class Position(TypedDict):
    eastings: float
    northings: float
    elevation: float


class GeoReferencingParameters(TypedDict):
    crsName: str
    description: str
    geodeticDatum: str
    verticalDatum: str
    mapProjection: str
    mapZone: str


class SurveyPoint(TypedDict):
    position: Position
    geoReferencingParameters: GeoReferencingParameters


class GetGeoLocationResult(TypedDict):
    projectLocation: ProjectLocation
    surveyPoint: SurveyPoint


class ChangeSelectionOfElementsResult(TypedDict):
    executionResultsOfAddToSelection: ExecutionResults
    executionResultsOfRemoveFromSelection: ExecutionResults


class TypeSpecificDetails1(TypedDict):
    begCoordinate: NotRequired[Field2DCoordinate]
    endCoordinate: NotRequired[Field2DCoordinate]
    height: NotRequired[float]
    bottomOffset: NotRequired[float]
    offset: NotRequired[float]
    begThickness: NotRequired[float]
    endThickness: NotRequired[float]


class Details(TypedDict):
    floorIndex: NotRequired[float]
    layerIndex: NotRequired[float]
    drawIndex: NotRequired[float]
    typeSpecificDetails: NotRequired[TypeSpecificDetails1]


class SetDetailsOfElementsResult(TypedDict):
    executionResults: ExecutionResults


class Get3DBoundingBoxesResult(TypedDict):
    boundingBoxes3D: BoundingBoxes3D


class MoveVector(TypedDict):
    x: float
    y: float
    z: float


class MoveElementsResult(TypedDict):
    executionResults: ExecutionResults


class SetGDLParametersOfElementsResult(TypedDict):
    executionResults: ExecutionResults


class GetClassificationsOfElementsResult(TypedDict):
    elementClassifications: ElementClassificationsOrErrors


class SetClassificationsOfElementsResult(TypedDict):
    executionResults: ExecutionResults


class Coordinates(TypedDict):
    x: float
    y: float
    z: float


class ColumnsDatum(TypedDict):
    coordinates: Coordinates


class CreateColumnsParameters(TypedDict):
    columnsData: List[ColumnsDatum]


class SlabsDatum(TypedDict):
    level: float
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole1]]


class CreateSlabsParameters(TypedDict):
    slabsData: List[SlabsDatum]


class Geometry(TypedDict):
    referencePosition: Field2DCoordinate


class Geometry1(TypedDict):
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole1]]


class PolylinesDatum(TypedDict):
    floorInd: NotRequired[float]
    coordinates: List[Field2DCoordinate]
    arcs: NotRequired[List[PolyArc]]


class CreatePolylinesParameters(TypedDict):
    polylinesData: List[PolylinesDatum]


class ObjectsDatum(TypedDict):
    libraryPartName: str
    coordinates: Field3DCoordinate
    dimensions: Field3DDimensions


class CreateObjectsParameters(TypedDict):
    objectsData: List[ObjectsDatum]


class Hole4(TypedDict):
    polygonCoordinates: List[Field3DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class Subline(TypedDict):
    coordinates: List[Field3DCoordinate]


class MeshesDatum(TypedDict):
    floorIndex: NotRequired[int]
    level: NotRequired[float]
    skirtType: NotRequired[
        Literal["SurfaceOnlyWithoutSkirt", "WithSkirt", "SolidBodyWithSkirt"]
    ]
    skirtLevel: NotRequired[float]
    polygonCoordinates: List[Field3DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole4]]
    sublines: NotRequired[List[Subline]]


class CreateMeshesParameters(TypedDict):
    meshesData: List[MeshesDatum]


class ApplyFavoritesToElementDefaultsParameters(TypedDict):
    favorites: List[str]


class ApplyFavoritesToElementDefaultsResult(TypedDict):
    executionResults: ExecutionResults


class CreateFavoritesFromElementsResult(TypedDict):
    executionResults: ExecutionResults


class GetAllPropertiesResult(TypedDict):
    properties: List[PropertyDetails]


class GetPropertyValuesOfElementsResult(TypedDict):
    propertyValuesForElements: PropertyValuesOrErrorArray


class SetPropertyValuesOfElementsResult(TypedDict):
    executionResults: ExecutionResults


class GetPropertyValuesOfAttributesResult(TypedDict):
    propertyValuesForAttributes: PropertyValuesOrErrorArray


class SetPropertyValuesOfAttributesResult(TypedDict):
    executionResults: ExecutionResults


class PropertyGroup1(TypedDict):
    name: str
    description: NotRequired[str]


class PropertyGroup(TypedDict):
    propertyGroup: PropertyGroup1


class CreatePropertyGroupsParameters(TypedDict):
    propertyGroups: List[PropertyGroup]


class PropertyGroupId1(TypedDict):
    propertyGroupId: PropertyGroupId


class CreatePropertyGroupsResult(TypedDict):
    propertyGroupIds: List[PropertyGroupId1]


class DeletePropertyGroupsParameters(TypedDict):
    propertyGroupIds: List[PropertyGroupId1]


class DeletePropertyGroupsResult(TypedDict):
    executionResults: ExecutionResults


class EnumValue(TypedDict):
    enumValueId: NotRequired[EnumValueId]
    displayValue: str
    nonLocalizedValue: NotRequired[str]


class PossibleEnumValue(TypedDict):
    enumValue: EnumValue


class Group(TypedDict):
    propertyGroupId: NotRequired[PropertyGroupId]
    name: NotRequired[str]


class CreatePropertyDefinitionsResult(TypedDict):
    propertyIds: PropertyIdOrErrorArray


class PropertyId1(TypedDict):
    propertyId: PropertyId


class DeletePropertyDefinitionsParameters(TypedDict):
    propertyIds: List[PropertyId1]


class DeletePropertyDefinitionsResult(TypedDict):
    executionResults: ExecutionResults


class GetAttributesByTypeParameters(TypedDict):
    attributeType: AttributeType


class LayerDataArrayItem(TypedDict):
    name: str
    isHidden: NotRequired[bool]
    isLocked: NotRequired[bool]
    isWireframe: NotRequired[bool]


class CreateLayersParameters(TypedDict):
    layerDataArray: List[LayerDataArrayItem]
    overwriteExisting: NotRequired[bool]


class BuildingMaterialDataArrayItem(TypedDict):
    name: str
    id: NotRequired[str]
    manufacturer: NotRequired[str]
    description: NotRequired[str]
    connPriority: NotRequired[int]
    cutFillIndex: NotRequired[int]
    cutFillPen: NotRequired[int]
    cutFillBackgroundPen: NotRequired[int]
    cutSurfaceIndex: NotRequired[int]
    thermalConductivity: NotRequired[float]
    density: NotRequired[float]
    heatCapacity: NotRequired[float]
    embodiedEnergy: NotRequired[float]
    embodiedCarbon: NotRequired[float]


class CreateBuildingMaterialsParameters(TypedDict):
    buildingMaterialDataArray: List[BuildingMaterialDataArrayItem]
    overwriteExisting: NotRequired[bool]


class Properties(TypedDict):
    thermalConductivity: NotRequired[float]
    density: NotRequired[float]
    heatCapacity: NotRequired[float]
    embodiedEnergy: NotRequired[float]
    embodiedCarbon: NotRequired[float]


class Property(TypedDict):
    properties: NotRequired[Properties]


class GetBuildingMaterialPhysicalPropertiesResult(TypedDict):
    properties: List[Property]


class Library(TypedDict):
    name: str
    path: str
    type: str
    available: NotRequired[bool]
    readOnly: NotRequired[bool]
    twServerUrl: NotRequired[str]
    urlWebLibrary: NotRequired[str]


class GetLibrariesResult(TypedDict):
    libraries: List[Library]


class User(TypedDict):
    userId: float
    userName: str


class PublishPublisherSetParameters(TypedDict):
    publisherSetName: str
    outputPath: NotRequired[str]


class ModelViewOption(TypedDict):
    name: str


class GetModelViewOptionsResult(TypedDict):
    modelViewOptions: List[ModelViewOption]


class GetViewSettingsResult(TypedDict):
    viewSettings: List[ViewSettingsOrError]


class NavigatorItemIdsWithViewSetting(TypedDict):
    navigatorItemId: NavigatorItemId
    viewSettings: ViewSettings


class SetViewSettingsParameters(TypedDict):
    navigatorItemIdsWithViewSettings: List[NavigatorItemIdsWithViewSetting]


class SetViewSettingsResult(TypedDict):
    executionResults: ExecutionResults


class GetView2DTransformationsResult(TypedDict):
    transformations: List[ViewTransformationsOrError]


class CreateIssueParameters(TypedDict):
    name: str
    parentIssueId: NotRequired[IssueId]
    tagText: NotRequired[str]


class CreateIssueResult(TypedDict):
    issueId: IssueId


class DeleteIssueParameters(TypedDict):
    issueId: IssueId
    acceptAllElements: NotRequired[bool]


class AddCommentToIssueParameters(TypedDict):
    issueId: IssueId
    author: NotRequired[str]
    status: NotRequired[IssueCommentStatus]
    text: str


class GetCommentsFromIssueParameters(TypedDict):
    issueId: IssueId


class Comment(TypedDict):
    guid: Guid
    author: str
    text: str
    status: IssueCommentStatus
    creaTime: int


class GetCommentsFromIssueResult(TypedDict):
    comments: List[Comment]


class GetElementsAttachedToIssueParameters(TypedDict):
    issueId: IssueId
    type: IssueElementType


class ExportIssuesToBCFParameters(TypedDict):
    issues: NotRequired[Issues]
    exportPath: str
    useExternalId: bool
    alignBySurveyPoint: bool


class ImportIssuesFromBCFParameters(TypedDict):
    importPath: str
    alignBySurveyPoint: bool


class GetRevisionIssuesResult(TypedDict):
    revisionIssues: List[RevisionIssue]


class GetRevisionChangesResult(TypedDict):
    revisionChanges: List[RevisionChange]


class GetDocumentRevisionsResult(TypedDict):
    documentRevisions: List[DocumentRevision1]


class GetCurrentRevisionChangesOfLayoutsResult(TypedDict):
    currentRevisionChangesOfLayouts: RevisionChangesOfEntities


class GetRevisionChangesOfElementsResult(TypedDict):
    revisionChangesOfElements: RevisionChangesOfEntities


class GenerateDocumentationParameters(TypedDict):
    destinationFolder: str


AttributePropertyValues = Any


class ElementId(TypedDict):
    guid: Guid


class AttributeId(TypedDict):
    guid: Guid


class GDLParameterList(TypedDict):
    parameters: List[GDLParameterDetails]


class ElementPropertyValue(TypedDict):
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: PropertyValue


ElementPropertyValues = List[ElementPropertyValue]


NormalOrUserUndefinedPropertyValue = (
    NormalNumberPropertyValue
    | NormalIntegerPropertyValue
    | NormalStringPropertyValue
    | NormalBooleanPropertyValue
    | NormalLengthPropertyValue
    | NormalAreaPropertyValue
    | NormalVolumePropertyValue
    | NormalAnglePropertyValue
    | NormalNumberListPropertyValue
    | NormalIntegerListPropertyValue
    | NormalStringListPropertyValue
    | NormalBooleanListPropertyValue
    | NormalLengthListPropertyValue
    | NormalAreaListPropertyValue
    | NormalVolumeListPropertyValue
    | NormalAngleListPropertyValue
    | NormalSingleEnumPropertyValue
    | NormalMultiEnumPropertyValue
    | UserUndefinedPropertyValue
)


PropertyValueDetails = NormalOrUserUndefinedPropertyValue | NotAvailablePropertyValue


class BasicDefaultValue(TypedDict):
    basicDefaultValue: PropertyValueDetails


PropertyDefaultValue = BasicDefaultValue | ExpressionDefaultValue


class ElementClassification(TypedDict):
    elementId: ElementId
    classificationId: ClassificationId


ElementClassifications = List[ElementClassification]


class NavigatorItemIdArrayItem(TypedDict):
    navigatorItemId: NavigatorItemId


class DatabaseIdArrayItem(TypedDict):
    databaseId: DatabaseId


class LinkData(TypedDict):
    referredView: NotRequired[ElementId]
    referredDrawing: NotRequired[ElementId]
    referredPMViewPoint: NotRequired[ElementId]


class DetailWorksheetDetails(TypedDict):
    basePoint: Field2DCoordinate
    angle: float
    markerId: ElementId
    detailName: str
    detailIdStr: str
    isHorizontalMarker: bool
    isWindowOpened: bool
    clipPolygon: List[Field2DCoordinate]
    linkData: LinkData


class LibPartBasedElementDetails(TypedDict):
    libPart: LibPartDetails
    ownerElementId: NotRequired[ElementId]


class ZoneDetails(TypedDict):
    name: str
    numberStr: str
    categoryAttributeId: AttributeId
    stampPosition: Field2DCoordinate
    isManual: bool
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole1]]
    zCoordinate: float


class ElementsWithDetail(TypedDict):
    elementId: ElementId
    details: Details


class SetDetailsOfElementsParameters(TypedDict):
    elementsWithDetails: List[ElementsWithDetail]


class ElementsWithMoveVector(TypedDict):
    elementId: ElementId
    moveVector: MoveVector
    copy_: NotRequired[bool]


class MoveElementsParameters(TypedDict):
    elementsWithMoveVectors: List[ElementsWithMoveVector]


class GetGDLParametersOfElementsResult(TypedDict):
    gdlParametersOfElements: List[GDLParameterList]


class ElementsWithGDLParameter(TypedDict):
    elementId: ElementId
    gdlParameters: GDLParameterList


class SetGDLParametersOfElementsParameters(TypedDict):
    elementsWithGDLParameters: List[ElementsWithGDLParameter]


class SetClassificationsOfElementsParameters(TypedDict):
    elementClassifications: ElementClassifications


class ZonesDatum(TypedDict):
    floorIndex: NotRequired[float]
    name: str
    numberStr: str
    categoryAttributeId: NotRequired[AttributeId]
    stampPosition: NotRequired[Field2DCoordinate]
    geometry: Geometry | Geometry1


class CreateZonesParameters(TypedDict):
    zonesData: List[ZonesDatum]


class FavoritesFromElement(TypedDict):
    elementId: ElementId
    favorite: str


class CreateFavoritesFromElementsParameters(TypedDict):
    favoritesFromElements: List[FavoritesFromElement]


class SetPropertyValuesOfElementsParameters(TypedDict):
    elementPropertyValues: ElementPropertyValues


class SetPropertyValuesOfAttributesParameters(TypedDict):
    attributePropertyValues: AttributePropertyValues


class PropertyDefinition1(TypedDict):
    name: str
    description: str
    type: PropertyType
    isEditable: bool
    defaultValue: NotRequired[PropertyDefaultValue]
    possibleEnumValues: NotRequired[List[PossibleEnumValue]]
    availability: List[ClassificationItemIdArrayItem]
    group: Group


class PropertyDefinition(TypedDict):
    propertyDefinition: PropertyDefinition1


class CreatePropertyDefinitionsParameters(TypedDict):
    propertyDefinitions: List[PropertyDefinition]


class Attribute(TypedDict):
    attributeId: AttributeId
    index: float
    name: str


class GetAttributesByTypeResult(TypedDict):
    attributes: List[Attribute]


class Conflict(TypedDict):
    elementId: ElementId
    user: User


class ReserveElementsResult(TypedDict):
    executionResult: ExecutionResult
    conflicts: NotRequired[List[Conflict]]


class Issue(TypedDict):
    issueId: IssueId
    name: str
    parentIssueId: IssueId
    creaTime: int
    modiTime: int
    tagText: str
    tagTextElementId: ElementId
    isTagTextElemVisible: bool


class GetIssuesResult(TypedDict):
    issues: List[Issue]


class ElementIdArrayItem(TypedDict):
    elementId: ElementId


class AttributeIdArrayItem(TypedDict):
    attributeId: AttributeId


NavigatorItemIds = List[NavigatorItemIdArrayItem]


Databases = List[DatabaseIdArrayItem]


class CurtainWallPanelDetails(TypedDict):
    polygonCoordinates: List[Field3DCoordinate]
    isHidden: bool
    segmentIndex: float
    className: str
    frames: List[ElementIdArrayItem]


TypeSpecificDetails = (
    WallDetails
    | BeamDetails
    | SlabDetails
    | ColumnDetails
    | DetailWorksheetDetails
    | LibPartBasedElementDetails
    | PolylineDetails
    | ZoneDetails
    | CurtainWallDetails
    | CurtainWallSegmentDetails
    | CurtainWallPanelDetails
    | CurtainWallFrameDetails
    | NotYetSupportedElementTypeDetails
)


class GetElementsByTypeParameters(TypedDict):
    elementType: ElementType
    filters: NotRequired[List[ElementFilter]]
    databases: NotRequired[Databases]


class GetAllElementsParameters(TypedDict):
    filters: NotRequired[List[ElementFilter]]
    databases: NotRequired[Databases]


class DetailsOfElement(TypedDict):
    type: ElementType
    id: str
    floorIndex: float
    layerIndex: float
    drawIndex: float
    details: TypeSpecificDetails


class GetDetailsOfElementsResult(TypedDict):
    detailsOfElements: List[DetailsOfElement]


class Skin(TypedDict):
    type: str
    buildingMaterialId: AttributeIdArrayItem
    framePen: int
    thickness: float


class Separator(TypedDict):
    lineTypeId: AttributeIdArrayItem
    linePen: int


class CompositeDataArrayItem(TypedDict):
    name: str
    useWith: NotRequired[List[str]]
    skins: List[Skin]
    separators: List[Separator]


class CreateCompositesParameters(TypedDict):
    compositeDataArray: List[CompositeDataArrayItem]
    overwriteExisting: NotRequired[bool]


class GetDatabaseIdFromNavigatorItemIdParameters(TypedDict):
    navigatorItemIds: NavigatorItemIds


class GetDatabaseIdFromNavigatorItemIdResult(TypedDict):
    databases: Databases


class GetViewSettingsParameters(TypedDict):
    navigatorItemIds: NavigatorItemIds


class GetView2DTransformationsParameters(TypedDict):
    databases: NotRequired[Databases]


class GetCurrentRevisionChangesOfLayoutsParameters(TypedDict):
    layoutDatabaseIds: Databases


Elements = List[ElementIdArrayItem]


AttributeIds = List[AttributeIdArrayItem]


class GetSelectedElementsResult(TypedDict):
    elements: Elements


class GetElementsByTypeResult(TypedDict):
    elements: Elements
    executionResultForDatabases: NotRequired[ExecutionResults]


class GetAllElementsResult(TypedDict):
    elements: Elements
    executionResultForDatabases: NotRequired[ExecutionResults]


class ChangeSelectionOfElementsParameters(TypedDict):
    addElementsToSelection: NotRequired[Elements]
    removeElementsFromSelection: NotRequired[Elements]


class FilterElementsParameters(TypedDict):
    elements: Elements
    filters: NotRequired[List[ElementFilter]]


class FilterElementsResult(TypedDict):
    elements: Elements


class GetDetailsOfElementsParameters(TypedDict):
    elements: Elements


class Get3DBoundingBoxesParameters(TypedDict):
    elements: Elements


class GetSubelementsOfHierarchicalElementsParameters(TypedDict):
    elements: Elements


class Subelement(TypedDict):
    cWallSegments: NotRequired[Elements]
    cWallFrames: NotRequired[Elements]
    cWallPanels: NotRequired[Elements]
    cWallJunctions: NotRequired[Elements]
    cWallAccessories: NotRequired[Elements]
    stairRisers: NotRequired[Elements]
    stairTreads: NotRequired[Elements]
    stairStructures: NotRequired[Elements]
    railingNodes: NotRequired[Elements]
    railingSegments: NotRequired[Elements]
    railingPosts: NotRequired[Elements]
    railingRailEnds: NotRequired[Elements]
    railingRailConnections: NotRequired[Elements]
    railingHandrailEnds: NotRequired[Elements]
    railingHandrailConnections: NotRequired[Elements]
    railingToprailEnds: NotRequired[Elements]
    railingToprailConnections: NotRequired[Elements]
    railingRails: NotRequired[Elements]
    railingToprails: NotRequired[Elements]
    railingHandrails: NotRequired[Elements]
    railingPatterns: NotRequired[Elements]
    railingInnerPosts: NotRequired[Elements]
    railingPanels: NotRequired[Elements]
    railingBalusterSets: NotRequired[Elements]
    railingBalusters: NotRequired[Elements]
    beamSegments: NotRequired[Elements]
    columnSegments: NotRequired[Elements]


class GetSubelementsOfHierarchicalElementsResult(TypedDict):
    subelements: List[Subelement]


class GetConnectedElementsParameters(TypedDict):
    elements: Elements
    connectedElementType: ElementType


class ConnectedElement(TypedDict):
    elements: Elements


class GetConnectedElementsResult(TypedDict):
    connectedElements: List[ConnectedElement]


class HighlightElementsParameters(TypedDict):
    elements: Elements
    highlightedColors: List[List[int]]
    wireframe3D: NotRequired[bool]
    nonHighlightedColor: NotRequired[List[int]]


class GetGDLParametersOfElementsParameters(TypedDict):
    elements: Elements


class GetClassificationsOfElementsParameters(TypedDict):
    elements: Elements
    classificationSystemIds: ClassificationSystemIds


class CreateColumnsResult(TypedDict):
    elements: Elements


class CreateSlabsResult(TypedDict):
    elements: Elements


class CreateZonesResult(TypedDict):
    elements: Elements


class CreatePolylinesResult(TypedDict):
    elements: Elements


class CreateObjectsResult(TypedDict):
    elements: Elements


class CreateMeshesResult(TypedDict):
    elements: Elements


class GetPropertyValuesOfElementsParameters(TypedDict):
    elements: Elements
    properties: PropertyIds


class GetPropertyValuesOfAttributesParameters(TypedDict):
    attributeIds: AttributeIds
    properties: PropertyIds


class CreateLayersResult(TypedDict):
    attributeIds: AttributeIds


class CreateBuildingMaterialsResult(TypedDict):
    attributeIds: AttributeIds


class CreateCompositesResult(TypedDict):
    attributeIds: AttributeIds


class GetBuildingMaterialPhysicalPropertiesParameters(TypedDict):
    attributeIds: AttributeIds


class ReserveElementsParameters(TypedDict):
    elements: Elements


class ReleaseElementsParameters(TypedDict):
    elements: Elements


class UpdateDrawingsParameters(TypedDict):
    elements: Elements


class AttachElementsToIssueParameters(TypedDict):
    issueId: IssueId
    elements: Elements
    type: IssueElementType


class DetachElementsFromIssueParameters(TypedDict):
    issueId: IssueId
    elements: Elements


class GetElementsAttachedToIssueResult(TypedDict):
    elements: Elements


class GetRevisionChangesOfElementsParameters(TypedDict):
    elements: Elements


Hotlinks = List[Hotlink]


class Hotlink(TypedDict):
    location: str
    children: NotRequired[Hotlinks]


class GetHotlinksResult(TypedDict):
    hotlinks: Hotlinks
