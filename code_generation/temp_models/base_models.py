from __future__ import annotations
from typing import Any, List, Literal, Union, TypeAlias
from uuid import UUID
from enum import Enum

from pydantic import BaseModel, ConfigDict, Field, RootModel

### This file is automatically generated and surgically cleaned. Do not edit directly. ###


class AttributeType(Enum):
    Layer = "Layer"
    Line = "Line"
    Fill = "Fill"
    Composite = "Composite"
    Surface = "Surface"
    LayerCombination = "LayerCombination"
    ZoneCategory = "ZoneCategory"
    Profile = "Profile"
    PenTable = "PenTable"
    MEPSystem = "MEPSystem"
    OperationProfile = "OperationProfile"
    BuildingMaterial = "BuildingMaterial"


class GDLParameterDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str | None = Field(None, description="The name of the parameter.")
    index: str = Field(..., description="The index of the parameter.")
    type: str = Field(..., description="The type of the parameter.")
    dimension1: float | None = Field(
        None, description="The 1st dimension of array (in case of array value)."
    )
    dimension2: float | None = Field(
        None, description="The 2nd dimension of array (in case of array value)."
    )
    value: Any = Field(..., description="The value of the parameter.")


class PolyArc(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begIndex: int = Field(..., description="Node index of one end point of the arc.")
    endIndex: int = Field(
        ..., description="Node index of the other end point of the arc."
    )
    arcAngle: float = Field(
        ...,
        description="Angle of the arc; it is positive, if the arc is on the right-hand side of the straight segment.",
    )


class Coordinate2D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X value of the coordinate.")
    y: float = Field(..., description="Y value of the coordinate.")


class Coordinate3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X value of the coordinate.")
    y: float = Field(..., description="Y value of the coordinate.")
    z: float = Field(..., description="Z value of the coordinate.")


class Dimensions3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X dimension.")
    y: float = Field(..., description="Y dimension.")
    z: float = Field(..., description="Z dimension.")


class Error(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: int = Field(..., description="The code of the error.")
    message: str = Field(..., description="The error message.")


class ErrorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    error: Error


class SuccessfulExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[True]


class FailedExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[False]
    error: Error = Field(..., description="The details of an execution failure.")


class ElementType(Enum):
    Wall = "Wall"
    Column = "Column"
    Beam = "Beam"
    Window = "Window"
    Door = "Door"
    Object = "Object"
    Lamp = "Lamp"
    Slab = "Slab"
    Roof = "Roof"
    Mesh = "Mesh"
    Dimension = "Dimension"
    RadialDimension = "RadialDimension"
    LevelDimension = "LevelDimension"
    AngleDimension = "AngleDimension"
    Text = "Text"
    Label = "Label"
    Zone = "Zone"
    Hatch = "Hatch"
    Line = "Line"
    PolyLine = "PolyLine"
    Arc = "Arc"
    Circle = "Circle"
    Spline = "Spline"
    Hotspot = "Hotspot"
    CutPlane = "CutPlane"
    Camera = "Camera"
    CamSet = "CamSet"
    Group = "Group"
    SectElem = "SectElem"
    Drawing = "Drawing"
    Picture = "Picture"
    Detail = "Detail"
    Elevation = "Elevation"
    InteriorElevation = "InteriorElevation"
    Worksheet = "Worksheet"
    Hotlink = "Hotlink"
    CurtainWall = "CurtainWall"
    CurtainWallSegment = "CurtainWallSegment"
    CurtainWallFrame = "CurtainWallFrame"
    CurtainWallPanel = "CurtainWallPanel"
    CurtainWallJunction = "CurtainWallJunction"
    CurtainWallAccessory = "CurtainWallAccessory"
    Shell = "Shell"
    Skylight = "Skylight"
    Morph = "Morph"
    ChangeMarker = "ChangeMarker"
    Stair = "Stair"
    Riser = "Riser"
    Tread = "Tread"
    StairStructure = "StairStructure"
    Railing = "Railing"
    RailingToprail = "RailingToprail"
    RailingHandrail = "RailingHandrail"
    RailingRail = "RailingRail"
    RailingPost = "RailingPost"
    RailingInnerPost = "RailingInnerPost"
    RailingBaluster = "RailingBaluster"
    RailingPanel = "RailingPanel"
    RailingSegment = "RailingSegment"
    RailingNode = "RailingNode"
    RailingBalusterSet = "RailingBalusterSet"
    RailingPattern = "RailingPattern"
    RailingToprailEnd = "RailingToprailEnd"
    RailingHandrailEnd = "RailingHandrailEnd"
    RailingRailEnd = "RailingRailEnd"
    RailingToprailConnection = "RailingToprailConnection"
    RailingHandrailConnection = "RailingHandrailConnection"
    RailingRailConnection = "RailingRailConnection"
    RailingEndFinish = "RailingEndFinish"
    BeamSegment = "BeamSegment"
    ColumnSegment = "ColumnSegment"
    Opening = "Opening"
    Unknown = "Unknown"


class ElementFilter(Enum):
    IsEditable = "IsEditable"
    IsVisibleByLayer = "IsVisibleByLayer"
    IsVisibleByRenovation = "IsVisibleByRenovation"
    IsVisibleByStructureDisplay = "IsVisibleByStructureDisplay"
    IsVisibleIn3D = "IsVisibleIn3D"
    OnActualFloor = "OnActualFloor"
    OnActualLayout = "OnActualLayout"
    InMyWorkspace = "InMyWorkspace"
    IsIndependent = "IsIndependent"
    InCroppedView = "InCroppedView"
    HasAccessRight = "HasAccessRight"
    IsOverriddenByRenovation = "IsOverriddenByRenovation"


class WindowType(Enum):
    FloorPlan = "FloorPlan"
    Section = "Section"
    Details = "Details"
    field_3DModel = "3DModel"
    Layout = "Layout"
    Drawing = "Drawing"
    CustomText = "CustomText"
    CustomDraw = "CustomDraw"
    MasterLayout = "MasterLayout"
    Elevation = "Elevation"
    InteriorElevation = "InteriorElevation"
    Worksheet = "Worksheet"
    Report = "Report"
    field_3DDocument = "3DDocument"
    External3D = "External3D"
    Movie3D = "Movie3D"
    MovieRendering = "MovieRendering"
    Rendering = "Rendering"
    ModelCompare = "ModelCompare"
    Interactive_Schedule = "Interactive Schedule"
    Unknown = "Unknown"


class IssueId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class IssueIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class IssueElementType(Enum):
    Creation = "Creation"
    Highlight = "Highlight"
    Deletion = "Deletion"
    Modification = "Modification"


class IssueCommentStatus(Enum):
    Error = "Error"
    Warning = "Warning"
    Info = "Info"
    Unknown = "Unknown"


class PropertyGroupId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class PropertyGroupIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupId: PropertyGroupId


class PropertyId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class PropertyIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId


class PropertyType(Enum):
    StaticBuiltIn = "StaticBuiltIn"
    DynamicBuiltIn = "DynamicBuiltIn"
    Custom = "Custom"


class PropertyCollectionType(Enum):
    Undefined = "Undefined"
    Single = "Single"
    List = "List"
    SingleChoiceEnumeration = "SingleChoiceEnumeration"
    MultipleChoiceEnumeration = "MultipleChoiceEnumeration"


class PropertyValueType(Enum):
    Undefined = "Undefined"
    Integer = "Integer"
    Real = "Real"
    String = "String"
    Boolean = "Boolean"
    Guid = "Guid"


class PropertyMeasureType(Enum):
    Undefined = "Undefined"
    Default = "Default"
    Length = "Length"
    Area = "Area"
    Volume = "Volume"
    Angle = "Angle"


class PropertyDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId
    propertyType: PropertyType
    propertyGroupName: str
    propertyName: str
    propertyCollectionType: PropertyCollectionType
    propertyValueType: PropertyValueType
    propertyMeasureType: PropertyMeasureType
    propertyIsEditable: bool


class PropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    value: str


class PropertyValueArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValue: PropertyValue


class PropertyValuesArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValues: List[PropertyValueArrayItem | ErrorItem] = Field(
        ..., description="A list of property values."
    )


class PropertyDataType(Enum):
    number = "number"
    integer = "integer"
    string = "string"
    boolean = "boolean"
    length = "length"
    area = "area"
    volume = "volume"
    angle = "angle"
    numberList = "numberList"
    integerList = "integerList"
    stringList = "stringList"
    booleanList = "booleanList"
    lengthList = "lengthList"
    areaList = "areaList"
    volumeList = "volumeList"
    angleList = "angleList"
    singleEnum = "singleEnum"
    multiEnum = "multiEnum"


class DisplayValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class EnumValueIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValueId: DisplayValueEnumId | NonLocalizedValueEnumId = Field(
        ..., description="The identifier of a property enumeration value."
    )


class UserUndefinedPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: PropertyDataType
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: PropertyDataType
    status: Literal["notAvailable"]


class NormalNumberPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class NormalSingleEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: DisplayValueEnumId | NonLocalizedValueEnumId = Field(
        ..., description="The identifier of a property enumeration value."
    )


class NormalMultiEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: List[EnumValueIdArrayItem] = Field(
        ..., description="A list of enumeration identifiers."
    )


class ExpressionDefaultValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    expressions: List[str]


class ClassificationSystemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class ClassificationSystemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId


class ClassificationItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class ClassificationItemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId


class ClassificationId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId
    classificationItemId: ClassificationItemId | None = Field(
        None,
        description="The element's classification in the given system. If no value is specified here, the element is Unclassified in this system.",
    )


class ClassificationIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationId: ClassificationId


class ElementClassificationItemArray(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationIds: List[ClassificationIdArrayItem | ErrorItem] = Field(
        ..., description="A list of element classification identifiers or errors."
    )


class BoundingBox3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: float = Field(..., description="The minimum X value of the bounding box.")
    yMin: float = Field(..., description="The minimum Y value of the bounding box.")
    zMin: float = Field(..., description="The minimum Z value of the bounding box.")
    xMax: float = Field(..., description="The maximum X value of the bounding box.")
    yMax: float = Field(..., description="The maximum Y value of the bounding box.")
    zMax: float = Field(..., description="The maximum Z value of the bounding box.")


class BoundingBox3DArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBox3D: BoundingBox3D


class LibPartUnId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class LibPartDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    parentUnID: LibPartUnId
    ownUnID: LibPartUnId


class NavigatorItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class DatabaseId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class ViewSettings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modelViewOptions: str | None = Field(
        None,
        description="The name of the model view options. If empty, the view has custom model view options.",
    )
    layerCombination: str | None = Field(
        None,
        description="The name of the layer combination. If empty, the view has custom layer combination.",
    )
    dimensionStyle: str | None = Field(
        None,
        description="The name of the dimension style. If empty, the view has custom dimension style.",
    )
    penSetName: str | None = Field(
        None,
        description="The name of the pen set. If empty, the view has custom pen set.",
    )
    graphicOverrideCombination: str | None = Field(
        None,
        description="The name of the graphic override combination. If empty, the view has custom graphic override combination.",
    )


class Zoom(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: float = Field(..., description="The minimum X value of the zoom box.")
    yMin: float = Field(..., description="The minimum Y value of the zoom box.")
    xMax: float = Field(..., description="The maximum X value of the zoom box.")
    yMax: float = Field(..., description="The maximum Y value of the zoom box.")


class ViewTransformations(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    zoom: Zoom = Field(
        ..., description="The actual zoom parameters, rectangular region of the model."
    )
    rotation: float = Field(..., description="The orientation in radian.")


class Hole2D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: List[Coordinate2D] = Field(
        ..., description="The 2D coordinates of the edge of the hole.", min_length=3
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the hole."
    )


class Hole3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: List[Coordinate3D] = Field(
        ..., description="The 3D coordinates of the polygon of the hole.", min_length=3
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the hole."
    )


class GeometryType(Enum):
    Straight = "Straight"
    Trapezoid = "Trapezoid"
    Polygonal = "Polygonal"


class WallDetails(BaseModel):
    geometryType: GeometryType
    begCoordinate: Coordinate2D
    endCoordinate: Coordinate2D
    zCoordinate: float
    height: float = Field(..., description="height relative to bottom")
    bottomOffset: float = Field(
        ..., description="base level of the wall relative to the floor level"
    )
    offset: float = Field(..., description="wall's base line's offset from ref. line")
    arcAngle: float | None = Field(
        None, description="The arc angle of the curved wall in radians."
    )
    begThickness: float | None = Field(
        None, description="Thickness at the beginning in case of trapezoid wall"
    )
    endThickness: float | None = Field(
        None, description="Thickness at the end in case of trapezoid wall"
    )
    polygonOutline: List[Coordinate2D] | None = Field(
        None, description="Polygon outline in case of polygonal wall"
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon arcs in case of polygonal wall"
    )


class BeamDetails(BaseModel):
    begCoordinate: Coordinate2D
    endCoordinate: Coordinate2D
    zCoordinate: float
    level: float = Field(
        ..., description="base height of the beam relative to the floor level"
    )
    offset: float = Field(..., description="beam ref.line offset from the center")
    slantAngle: float = Field(
        ..., description="The slant angle of the beam in radians."
    )
    arcAngle: float = Field(
        ..., description="The arc angle of the (horizontally) curved beam in radians."
    )
    verticalCurveHeight: float = Field(
        ..., description="The height of the vertical curve of the beam."
    )


class SlabDetails(BaseModel):
    thickness: float = Field(..., description="Thickness of the slab.")
    level: float = Field(
        ...,
        description="Distance of the reference level of the slab from the floor level.",
    )
    offsetFromTop: float = Field(
        ...,
        description="Vertical distance between the reference level and the top of the slab.",
    )
    zCoordinate: float
    polygonOutline: List[Coordinate2D] = Field(
        ..., description="Polygon outline of the slab."
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the slab."
    )
    holes: List[Hole2D] = Field(
        ..., description="A list of 2D holes in an element defined by closed polylines"
    )


class ColumnDetails(BaseModel):
    origin: Coordinate2D
    zCoordinate: float
    height: float = Field(..., description="height relative to bottom")
    bottomOffset: float = Field(
        ..., description="base level of the column relative to the floor level"
    )


class ObjectDetails(BaseModel):
    origin: Coordinate3D
    dimensions: Coordinate3D
    angle: float


class PolylineDetails(BaseModel):
    coordinates: List[Coordinate2D]
    arcs: List[PolyArc] | None = Field(None, description="The arcs of the polyline.")
    zCoordinate: float


class CurtainWallDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    height: float | None = None
    angle: float | None = Field(
        None, description="The rotation angle of the curtain wall in radians."
    )


class CurtainWallSegmentDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begCoordinate: Coordinate3D
    endCoordinate: Coordinate3D
    extrusionVector: Coordinate3D
    gridOrigin: Coordinate3D
    gridAngle: float = Field(..., description="The angle of the grid in radians.")
    arcOrigin: Coordinate3D | None = None
    isNegativeArc: bool | None = Field(
        None, description="Indicates if the arc is negative."
    )


class PanelConnectionHole(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    d: float = Field(..., description="Depth of the panel connection hole.")
    w: float = Field(..., description="Width of the panel connection hole.")


class FrameContour(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    a1: float = Field(..., description="Width1 of the frame contour.")
    a2: float = Field(..., description="Width2 of the frame contour.")
    b1: float = Field(..., description="Length1 of the frame contour.")
    b2: float = Field(..., description="Length2 of the frame contour.")


class Type(Enum):
    Deleted = "Deleted"
    Division = "Division"
    Corner = "Corner"
    Boundary = "Boundary"
    Custom = "Custom"


class CurtainWallFrameDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    begCoordinate: Coordinate3D
    endCoordinate: Coordinate3D
    orientationVector: Coordinate3D
    panelConnectionHole: PanelConnectionHole = Field(
        ..., description="The parameters of the panel connection hole."
    )
    frameContour: FrameContour = Field(
        ..., description="The parameters of the frame contour."
    )
    segmentIndex: float = Field(
        ...,
        description="The index of the curtain wall segment to which this frame belongs.",
    )
    className: str
    type: Type


class MeshSkirtType(Enum):
    SurfaceOnlyWithoutSkirt = "SurfaceOnlyWithoutSkirt"
    WithSkirt = "WithSkirt"
    SolidBodyWithSkirt = "SolidBodyWithSkirt"


class Subline(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    coordinates: List[Coordinate3D] = Field(
        ..., description="The 3D coordinates of the leveling subline of the mesh."
    )


class MeshDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    level: float = Field(..., description="The Z reference level of coordinates.")
    skirtType: MeshSkirtType
    skirtLevel: float = Field(..., description="The height of the skirt.")
    polygonCoordinates: List[Coordinate3D] = Field(
        ...,
        description="The 3D coordinates of the outline polygon of the mesh.",
        min_length=3,
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the mesh."
    )
    holes: List[Hole3D] | None = Field(
        None, description="A list of 3D holes in an element defined by closed polylines"
    )
    sublines: List[Subline] | None = Field(
        None,
        description="The leveling sublines inside the polygon of the mesh.",
        min_length=1,
    )


class NotYetSupportedElementTypeDetails(BaseModel):
    error: str


class RevisionIssueId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class DocumentRevisionId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class RevisionCustomSchemeDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    customSchemeKey: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )
    customSchemeValue: str


class DocumentRevisionReference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionId: DocumentRevisionId


class RevisionIssue(BaseModel):
    revisionIssueId: RevisionIssueId
    id: str
    description: str
    issueTime: str
    issuedByUser: str
    overrideRevisionIDOfAllIncludedLayouts: bool
    createNewRevisionInAllIncludedLayouts: bool
    markersVisibleSinceIndex: int | None = None
    isIssued: bool
    documentRevisions: List[DocumentRevisionReference] | None = Field(
        None, description="All document revisions belong to the current issue."
    )
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class RevisionChange(BaseModel):
    id: str
    description: str
    lastModifiedTime: str
    modifiedByUser: str
    isIssued: bool
    firstRevisionIssueId: RevisionIssueId | None = Field(
        None,
        description="The identifier of the first issue in which the given change is issued.",
    )
    isArchived: bool
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class LayoutInfo(BaseModel):
    id: str
    databaseId: DatabaseId
    name: str
    masterLayoutName: str
    width: float
    height: float
    subsetId: str
    subsetName: str
    ownerUser: str
    customSchemeData: List[RevisionCustomSchemeDatum] | None = None


class Status(Enum):
    Actual = "Actual"
    Issued = "Issued"


class Change(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str


class DocumentRevision(BaseModel):
    revisionId: DocumentRevisionId
    id: str
    finalId: str
    ownerUser: str
    status: Status
    changes: List[Change] | None = Field(
        None, description="All changes belong to the given document revision."
    )
    layoutInfo: LayoutInfo


class RevisionChangesArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChanges: List[RevisionChange] | None = None


class StoryParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    index: int = Field(..., description="The story index.")
    floorId: int = Field(..., description="Unique ID of the story.")
    dispOnSections: bool = Field(
        ..., description="Story level lines should appear on sections and elevations."
    )
    level: float = Field(..., description="The story level.")
    name: str = Field(..., description="The name of the story.")


class StorySettings(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    dispOnSections: bool = Field(
        ..., description="Story level lines should appear on sections and elevations."
    )
    level: float = Field(..., description="The story level.")
    name: str = Field(..., description="The name of the story.")


class AutomaticZoneGeometry(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    referencePosition: Coordinate2D = Field(
        ..., description="Reference point to automatically find zone."
    )


class ManualZoneGeometry(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polygonCoordinates: List[Coordinate2D] = Field(
        ..., description="The 2D coordinates of the edge of the zone.", min_length=3
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the zone."
    )
    holes: List[Hole2D] | None = Field(
        None, description="A list of 2D holes in an element defined by closed polylines"
    )


class WallSettings(BaseModel):
    begCoordinate: Coordinate2D | None = None
    endCoordinate: Coordinate2D | None = None
    height: float | None = Field(None, description="height relative to bottom")
    bottomOffset: float | None = Field(
        None, description="base level of the wall relative to the floor level"
    )
    offset: float | None = Field(
        None, description="wall's base line's offset from ref. line"
    )
    begThickness: float | None = Field(
        None, description="Thickness at the beginning in case of trapezoid wall"
    )
    endThickness: float | None = Field(
        None, description="Thickness at the end in case of trapezoid wall"
    )


class PropertyGroup(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    description: str | None = None


class PropertyGroupArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroup: PropertyGroup


class PropertyDefinitionArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinition: Any


class GetAddOnVersionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: str = Field(
        ..., description='Version number in the form of "1.1.1".'
    )


class GetArchicadLocationResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    archicadLocation: str = Field(
        ..., description="The location of the Archicad executable in the filesystem."
    )


class GetCurrentWindowTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    currentWindowType: WindowType


class GetProjectInfoResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    isUntitled: bool = Field(..., description="True, if the project is not saved yet.")
    isTeamwork: bool = Field(
        ..., description="True, if the project is a Teamwork (BIMcloud) project."
    )
    projectLocation: str | None = Field(
        None,
        description="The location of the project in the filesystem or a BIMcloud project reference.",
    )
    projectPath: str | None = Field(
        None,
        description="The path of the project. A filesystem path or a BIMcloud server relative path.",
    )
    projectName: str | None = Field(
        None, description="The name of the project."
    )


class FieldModel(BaseModel):
    projectInfoId: str | None = Field(
        None, description="The id of the project info field."
    )
    projectInfoName: str | None = Field(
        None, description="The name of the project info field visible on UI."
    )
    projectInfoValue: str | None = Field(
        None, description="The value of the project info field."
    )


class GetProjectInfoFieldsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fields: List[FieldModel] = Field(..., description="A list of project info fields.")


class SetProjectInfoFieldParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectInfoId: str = Field(
        ..., description="The id of the project info field."
    )
    projectInfoValue: str = Field(
        ..., description="The new value of the project info field."
    )


class GetStoriesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    firstStory: int = Field(..., description="First story index.")
    lastStory: int = Field(..., description="Last story index.")
    actStory: int = Field(
        ..., description="Actual (currently visible in 2D) story index."
    )
    skipNullFloor: bool = Field(
        ...,
        description="Floor indices above ground-floor level may start with 1 instead of 0.",
    )
    stories: List[StoryParameters] = Field(
        ...,
        description="A list of project stories, each with their complete parameters.",
    )


class SetStoriesParameters(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    stories: List[StorySettings] = Field(
        ...,
        description="A list of story settings, used as input for creating or modifying multiple stories.",
    )


class OpenProjectParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectFilePath: str = Field(..., description="The target project file to open.")


class ProjectLocation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    longitude: float = Field(..., description="longitude in degrees")
    latitude: float = Field(..., description="latitude in degrees")
    altitude: float = Field(..., description="altitude in meters")
    north: float = Field(..., description="north direction in radians")


class Position(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    eastings: float = Field(
        ...,
        description="Location along the easting of the coordinate system of the target map coordinate reference system.",
    )
    northings: float = Field(
        ...,
        description="Location along the northing of the coordinate system of the target map coordinate reference system.",
    )
    elevation: float = Field(
        ..., description="Orthogonal height relative to the vertical datum specified."
    )


class GeoReferencingParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    crsName: str = Field(
        ..., description="Name by which the coordinate reference system is identified."
    )
    description: str = Field(
        ..., description="Informal description of this coordinate reference system."
    )
    geodeticDatum: str = Field(
        ..., description="Name by which this datum is identified."
    )
    verticalDatum: str = Field(
        ..., description="Name by which the vertical datum is identified."
    )
    mapProjection: str = Field(
        ..., description="Name by which the map projection is identified."
    )
    mapZone: str = Field(
        ...,
        description="Name by which the map zone, relating to the MapProjection, is identified.",
    )


class SurveyPoint(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    position: Position
    geoReferencingParameters: GeoReferencingParameters


class GetGeoLocationResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectLocation: ProjectLocation
    surveyPoint: SurveyPoint


class ChangeSelectionOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResultsOfAddToSelection: List[
        SuccessfulExecutionResult | FailedExecutionResult
    ] = Field(..., description="A list of execution results.")
    executionResultsOfRemoveFromSelection: List[
        SuccessfulExecutionResult | FailedExecutionResult
    ] = Field(..., description="A list of execution results.")


class Details(BaseModel):
    floorIndex: float | None = None
    layerIndex: float | None = None
    drawIndex: float | None = None
    typeSpecificDetails: WallSettings | None = Field(
        None,
        description="Defines the modifiable type-specific settings for an element. Used as input for SET requests.",
    )


class SetDetailsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class Get3DBoundingBoxesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBoxes3D: List[BoundingBox3DArrayItem | ErrorItem] = Field(
        ..., description="A list of 3D bounding boxes."
    )


class MoveVector(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X value of the vector.")
    y: float = Field(..., description="Y value of the vector.")
    z: float = Field(..., description="Z value of the vector.")


class MoveElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class SetGDLParametersOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class GetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementClassifications: List[ElementClassificationItemArray | ErrorItem] = Field(
        ...,
        description="The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects.",
    )


class SetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class Coordinates(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: float = Field(..., description="X value of the coordinate.")
    y: float = Field(..., description="Y value of the coordinate.")
    z: float = Field(..., description="Z value of the coordinate.")


class ColumnsDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    coordinates: Coordinates = Field(..., description="3D coordinate.")


class CreateColumnsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    columnsData: List[ColumnsDatum] = Field(
        ..., description="Array of data to create Columns."
    )


class SlabsDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    level: float = Field(
        ..., description="The Z coordinate value of the reference line of the slab."
    )
    polygonCoordinates: List[Coordinate2D] = Field(
        ..., description="The 2D coordinates of the edge of the slab.", min_length=3
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the slab."
    )
    holes: List[Hole2D] | None = Field(
        None, description="A list of 2D holes in an element defined by closed polylines"
    )


class CreateSlabsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    slabsData: List[SlabsDatum] = Field(
        ..., description="Array of data to create Slabs."
    )


class PolylinesDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    floorInd: float | None = Field(
        None,
        description="The identifier of the floor. Optinal parameter, by default the current floor is used.",
    )
    coordinates: List[Coordinate2D] = Field(
        ..., description="The 2D coordinates of the polyline.", min_length=2
    )
    arcs: List[PolyArc] | None = Field(None, description="The arcs of the polyline.")


class CreatePolylinesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polylinesData: List[PolylinesDatum] = Field(
        ..., description="Array of data to create Polylines."
    )


class ObjectsDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    libraryPartName: str = Field(
        ..., description="The name of the library part to use."
    )
    coordinates: Coordinate3D
    dimensions: Dimensions3D | None = None


class CreateObjectsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    objectsData: List[ObjectsDatum] = Field(
        ..., description="Array of data to create Objects."
    )


class MeshesDatum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    floorIndex: int | None = None
    level: float | None = Field(
        None, description="The Z reference level of coordinates."
    )
    skirtType: MeshSkirtType | None = None
    skirtLevel: float | None = Field(None, description="The height of the skirt.")
    polygonCoordinates: List[Coordinate3D] = Field(
        ...,
        description="The 3D coordinates of the outline polygon of the mesh.",
        min_length=3,
    )
    polygonArcs: List[PolyArc] | None = Field(
        None, description="Polygon outline arcs of the mesh."
    )
    holes: List[Hole3D] | None = Field(
        None, description="A list of 3D holes in an element defined by closed polylines"
    )
    sublines: List[Subline] | None = Field(
        None,
        description="The leveling sublines inside the polygon of the mesh.",
        min_length=1,
    )


class CreateMeshesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    meshesData: List[MeshesDatum] = Field(
        ..., description="Array of data to create Meshes."
    )


class ApplyFavoritesToElementDefaultsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    favorites: List[str] = Field(..., description="The favorites to apply.")


class ApplyFavoritesToElementDefaultsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class CreateFavoritesFromElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class GetAllPropertiesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: List[PropertyDetails] = Field(
        ..., description="A list of property identifiers."
    )


class GetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForElements: List[PropertyValuesArrayItem | ErrorItem] = Field(
        ...,
        description="List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties.",
    )


class SetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class GetPropertyValuesOfAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForAttributes: List[PropertyValuesArrayItem | ErrorItem] = Field(
        ...,
        description="List of property value lists. The order of the outer list is that of the given attributes. The order of the inner lists are that of the given properties.",
    )


class SetPropertyValuesOfAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class CreatePropertyGroupsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroups: List[PropertyGroupArrayItem] = Field(
        ..., description="The parameters of the new property groups."
    )


class CreatePropertyGroupsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: List[PropertyGroupIdArrayItem] = Field(
        ..., description="The identifiers of the created property groups."
    )


class DeletePropertyGroupsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: List[PropertyGroupIdArrayItem] = Field(
        ..., description="The identifiers of property groups to delete."
    )


class DeletePropertyGroupsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class CreatePropertyDefinitionsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinitions: List[PropertyDefinitionArrayItem] = Field(
        ..., description="The parameters of the new properties."
    )


class CreatePropertyDefinitionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: List[PropertyIdArrayItem | ErrorItem] = Field(
        ..., description="A list of property identifiers."
    )


class DeletePropertyDefinitionsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: List[PropertyIdArrayItem] = Field(
        ..., description="The identifiers of properties to delete."
    )


class DeletePropertyDefinitionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class GetAttributesByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeType: AttributeType


class LayerDataArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="Name.")
    isHidden: bool | None = Field(None, description="Hide/Show.")
    isLocked: bool | None = Field(None, description="Lock/Unlock.")
    isWireframe: bool | None = Field(None, description="Force the model to wireframe.")


class CreateLayersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layerDataArray: List[LayerDataArrayItem] = Field(
        ..., description="Array of data to create new Layers."
    )
    overwriteExisting: bool | None = Field(
        None,
        description="Overwrite the Layer if exists with the same name. The default is false.",
    )


class BuildingMaterialDataArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="Name.")
    id: str | None = Field(None, description="Identifier.")
    manufacturer: str | None = Field(None, description="Manufacturer.")
    description: str | None = Field(None, description="Decription.")
    connPriority: int | None = Field(None, description="Intersection priority.")
    cutFillIndex: int | None = Field(None, description="Index of the Cut Fill.")
    cutFillPen: int | None = Field(None, description="Cut Fill Foreground Pen.")
    cutFillBackgroundPen: int | None = Field(
        None, description="Cut Fill Background Pen."
    )
    cutSurfaceIndex: int | None = Field(None, description="Index of the Cut Surface.")
    thermalConductivity: float | None = Field(None, description="Thermal Conductivity.")
    density: float | None = Field(None, description="Density.")
    heatCapacity: float | None = Field(None, description="Heat Capacity.")
    embodiedEnergy: float | None = Field(None, description="Embodied Energy.")
    embodiedCarbon: float | None = Field(None, description="Embodied Carbon.")


class CreateBuildingMaterialsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buildingMaterialDataArray: List[BuildingMaterialDataArrayItem] = Field(
        ..., description="Array of data to create new Building Materials."
    )
    overwriteExisting: bool | None = Field(
        None,
        description="Overwrite the Building Material if exists with the same name. The default is false.",
    )


class Properties(BaseModel):
    thermalConductivity: float | None = Field(None, description="Thermal Conductivity.")
    density: float | None = Field(None, description="Density.")
    heatCapacity: float | None = Field(None, description="Heat Capacity.")
    embodiedEnergy: float | None = Field(None, description="Embodied Energy.")
    embodiedCarbon: float | None = Field(None, description="Embodied Carbon.")


class Property(BaseModel):
    properties: Properties | None = Field(None, description="Physical properties.")


class GetBuildingMaterialPhysicalPropertiesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: List[Property] = Field(..., description="Physical properties list.")


class Library(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="Library name.")
    path: str = Field(..., description="A filesystem path to library location.")
    type: str = Field(..., description="Library type.")
    available: bool | None = Field(None, description="Is library not missing.")
    readOnly: bool | None = Field(None, description="Is library not writable.")
    twServerUrl: str | None = Field(
        None, description="URL address of the TeamWork server hosting the library."
    )
    urlWebLibrary: str | None = Field(
        None, description="URL of the downloaded Internet library."
    )


class GetLibrariesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    libraries: List[Library] = Field(..., description="A list of project libraries.")


class User(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    userId: float
    userName: str


class PublishPublisherSetParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    publisherSetName: str = Field(
        ..., description="The name of the publisher set."
    )
    outputPath: str | None = Field(
        None,
        description="Full local or LAN path for publishing. Optional, by default the path set in the settings of the publiser set will be used.",
    )


class ModelViewOption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str


class GetModelViewOptionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modelViewOptions: List[ModelViewOption]


class GetViewSettingsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    viewSettings: List[ViewSettings | ErrorItem]


class NavigatorItemIdsWithViewSetting(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    viewSettings: ViewSettings


class SetViewSettingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIdsWithViewSettings: List[NavigatorItemIdsWithViewSetting]


class SetViewSettingsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult] = Field(
        ..., description="A list of execution results."
    )


class GetView2DTransformationsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    transformations: List[ViewTransformations | ErrorItem]


class CreateIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="The name of the issue.")
    parentIssueId: IssueId | None = None
    tagText: str | None = Field(None, description="Tag text of the issue, optional.")


class CreateIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class DeleteIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    acceptAllElements: bool | None = Field(
        None,
        description="Accept all creation/deletion/modification of the deleted issue. By default false.",
    )


class AddCommentToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    author: str | None = Field(None, description="The author of the new comment.")
    status: IssueCommentStatus | None = None
    text: str = Field(..., description="Comment text to add.")


class GetCommentsFromIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class Comment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(..., description="Comment identifier")
    author: str = Field(..., description="Comment author")
    text: str = Field(..., description="Comment text")
    status: IssueCommentStatus
    creaTime: int = Field(..., description="Comment creation time")


class GetCommentsFromIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    comments: List[Comment] = Field(..., description="A list of existing comments.")


class GetElementsAttachedToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    type: IssueElementType


class ExportIssuesToBCFParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issues: List[IssueIdArrayItem] | None = Field(
        None, description="Leave it empty to export all issues."
    )
    exportPath: str = Field(
        ..., description="The os path to the bcf file, including it's name."
    )
    useExternalId: bool = Field(
        ...,
        description="Use external IFC ID or Archicad IFC ID as referenced in BCF topics.",
    )
    alignBySurveyPoint: bool = Field(
        ...,
        description="Align BCF views by Archicad Survey Point or Archicad Project Origin.",
    )


class ImportIssuesFromBCFParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    importPath: str = Field(
        ..., description="The os path to the bcf file, including it's name."
    )
    alignBySurveyPoint: bool = Field(
        ...,
        description="Align BCF views by Archicad Survey Point or Archicad Project Origin.",
    )


class GetRevisionIssuesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionIssues: List[RevisionIssue]


class GetRevisionChangesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChanges: List[RevisionChange]


class GetDocumentRevisionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    documentRevisions: List[DocumentRevision]


class GetCurrentRevisionChangesOfLayoutsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    currentRevisionChangesOfLayouts: RevisionChangesArrayItem | ErrorItem


class GetRevisionChangesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChangesOfElements: RevisionChangesArrayItem | ErrorItem


class GenerateDocumentationParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    destinationFolder: str = Field(
        ..., description="Destination folder for the generated documentation files."
    )


class ElementId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class AttributeId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: UUID = Field(
        ...,
        description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
    )


class GDLParameterList(BaseModel):
    parameters: List[GDLParameterDetails] = Field(
        ..., description="The list of GDL parameters."
    )


class ElementPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: PropertyValue


class AttributePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    propertyId: PropertyId
    propertyValue: PropertyValue


class BasicDefaultValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    basicDefaultValue: (
        NotAvailablePropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue
    ) = Field(
        ...,
        description="A normal, userUndefined, notAvailable or notEvaluated property value.",
    )


PropertyDefaultValue: TypeAlias = BasicDefaultValue | ExpressionDefaultValue
