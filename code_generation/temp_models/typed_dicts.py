from __future__ import annotations

from typing import Any, List, Literal, TypedDict, Union

from typing_extensions import NotRequired

### This file is automatically generated and surgically cleaned. Do not edit directly. ###


class GDLParameterDetails(TypedDict):
    name: NotRequired[str]
    index: str
    type: str
    dimension1: NotRequired[float]
    dimension2: NotRequired[float]
    value: Any


class PolyArc(TypedDict):
    begIndex: int
    endIndex: int
    arcAngle: float


class Field2DCoordinate(TypedDict):
    x: float
    y: float


class Field3DCoordinate(TypedDict):
    x: float
    y: float
    z: float


class Field3DDimensions(TypedDict):
    x: float
    y: float
    z: float


class Error(TypedDict):
    code: int
    message: str


class ErrorItem(TypedDict):
    error: Error


class SuccessfulExecutionResult(TypedDict):
    success: Literal[True]


class FailedExecutionResult(TypedDict):
    success: Literal[False]
    error: Error


class IssueId(TypedDict):
    guid: str


class IssueIdArrayItem(TypedDict):
    issueId: IssueId


class PropertyId(TypedDict):
    guid: str


class PropertyGroupId(TypedDict):
    guid: str


class PropertyIdArrayItem(TypedDict):
    propertyId: PropertyId


class PropertyDetails(TypedDict):
    propertyId: PropertyId
    propertyType: Literal["StaticBuiltIn", "DynamicBuiltIn", "Custom"]
    propertyGroupName: str
    propertyName: str
    propertyCollectionType: Literal[
        "Undefined",
        "Single",
        "List",
        "SingleChoiceEnumeration",
        "MultipleChoiceEnumeration",
    ]
    propertyValueType: Literal[
        "Undefined", "Integer", "Real", "String", "Boolean", "Guid"
    ]
    propertyMeasureType: Literal[
        "Undefined", "Default", "Length", "Area", "Volume", "Angle"
    ]
    propertyIsEditable: bool


class PropertyValue(TypedDict):
    value: str


class PropertyValueOrErrorItem(TypedDict):
    propertyValue: PropertyValue


class PropertyValuesOrError(TypedDict):
    propertyValues: List[PropertyValueOrErrorItem | ErrorItem]


class PropertyIdOrError(TypedDict):
    propertyId: PropertyId


class DisplayValueEnumId(TypedDict):
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(TypedDict):
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class EnumValueId(TypedDict):
    enumValueId: DisplayValueEnumId | NonLocalizedValueEnumId


class UserUndefinedPropertyValue(TypedDict):
    type: Literal[
        "number",
        "integer",
        "string",
        "boolean",
        "length",
        "area",
        "volume",
        "angle",
        "numberList",
        "integerList",
        "stringList",
        "booleanList",
        "lengthList",
        "areaList",
        "volumeList",
        "angleList",
        "singleEnum",
        "multiEnum",
    ]
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(TypedDict):
    type: Literal[
        "number",
        "integer",
        "string",
        "boolean",
        "length",
        "area",
        "volume",
        "angle",
        "numberList",
        "integerList",
        "stringList",
        "booleanList",
        "lengthList",
        "areaList",
        "volumeList",
        "angleList",
        "singleEnum",
        "multiEnum",
    ]
    status: Literal["notAvailable"]


class NormalNumberPropertyValue(TypedDict):
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(TypedDict):
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(TypedDict):
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(TypedDict):
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(TypedDict):
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(TypedDict):
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(TypedDict):
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(TypedDict):
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(TypedDict):
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(TypedDict):
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(TypedDict):
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(TypedDict):
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(TypedDict):
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(TypedDict):
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(TypedDict):
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(TypedDict):
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class NormalSingleEnumPropertyValue(TypedDict):
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: DisplayValueEnumId | NonLocalizedValueEnumId


class NormalMultiEnumPropertyValue(TypedDict):
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: List[EnumValueId]


class ExpressionDefaultValue(TypedDict):
    expressions: List[str]


class ClassificationSystemId(TypedDict):
    guid: str


class ClassificationSystemIdArrayItem(TypedDict):
    classificationSystemId: ClassificationSystemId


class ClassificationItemId(TypedDict):
    guid: str


class ClassificationItemIdArrayItem(TypedDict):
    classificationItemId: ClassificationItemId


class ClassificationId(TypedDict):
    classificationSystemId: ClassificationSystemId
    classificationItemId: NotRequired[ClassificationItemId]


class ClassificationIdOrError(TypedDict):
    classificationId: ClassificationId


class ElementClassificationOrError(TypedDict):
    classificationIds: List[ClassificationIdOrError | ErrorItem]


class BoundingBox3D(TypedDict):
    xMin: float
    yMin: float
    zMin: float
    xMax: float
    yMax: float
    zMax: float


class BoundingBox3DOrError(TypedDict):
    boundingBox3D: BoundingBox3D


class LibPartUnId(TypedDict):
    guid: str


class LibPartDetails(TypedDict):
    name: str
    parentUnID: LibPartUnId
    ownUnID: LibPartUnId


class NavigatorItemId(TypedDict):
    guid: str


class DatabaseId(TypedDict):
    guid: str


class ViewSettings(TypedDict):
    modelViewOptions: NotRequired[str]
    layerCombination: NotRequired[str]
    dimensionStyle: NotRequired[str]
    penSetName: NotRequired[str]
    graphicOverrideCombination: NotRequired[str]


class Zoom(TypedDict):
    xMin: float
    yMin: float
    xMax: float
    yMax: float


class ViewTransformations(TypedDict):
    zoom: Zoom
    rotation: float


class WallDetails(TypedDict):
    geometryType: Literal["Straight", "Trapezoid", "Polygonal"]
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float
    offset: float
    arcAngle: NotRequired[float]
    begThickness: NotRequired[float]
    endThickness: NotRequired[float]
    polygonOutline: NotRequired[List[Field2DCoordinate]]
    polygonArcs: NotRequired[List[PolyArc]]


class BeamDetails(TypedDict):
    begCoordinate: Field2DCoordinate
    endCoordinate: Field2DCoordinate
    zCoordinate: float
    level: float
    offset: float
    slantAngle: float
    arcAngle: float
    verticalCurveHeight: float


class SlabDetails(TypedDict):
    thickness: float
    level: float
    offsetFromTop: float
    zCoordinate: float
    polygonOutline: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: List[Hole]


class ColumnDetails(TypedDict):
    origin: Field2DCoordinate
    zCoordinate: float
    height: float
    bottomOffset: float


class PolylineDetails(TypedDict):
    coordinates: List[Field2DCoordinate]
    arcs: NotRequired[List[PolyArc]]
    zCoordinate: float


class Hole(TypedDict):
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class NotYetSupportedElementTypeDetails(TypedDict):
    error: str


class RevisionIssueId(TypedDict):
    guid: str


class DocumentRevisionId(TypedDict):
    guid: str


class RevisionCustomSchemeDatum(TypedDict):
    customSchemeKey: str
    customSchemeValue: str


class RevisionIssue(TypedDict):
    revisionIssueId: RevisionIssueId
    id: str
    description: str
    issueTime: str
    issuedByUser: str
    overrideRevisionIDOfAllIncludedLayouts: bool
    createNewRevisionInAllIncludedLayouts: bool
    markersVisibleSinceIndex: NotRequired[int]
    isIssued: bool
    documentRevisions: NotRequired[List[DocumentRevision]]
    customSchemeData: NotRequired[List[RevisionCustomSchemeDatum]]


class RevisionChange(TypedDict):
    id: str
    description: str
    lastModifiedTime: str
    modifiedByUser: str
    isIssued: bool
    firstRevisionIssueId: NotRequired[RevisionIssueId]
    isArchived: bool
    customSchemeData: NotRequired[List[RevisionCustomSchemeDatum]]


class LayoutInfo(TypedDict):
    id: str
    databaseId: DatabaseId
    name: str
    masterLayoutName: str
    width: float
    height: float
    subsetId: str
    subsetName: str
    ownerUser: str
    customSchemeData: NotRequired[List[RevisionCustomSchemeDatum]]


class Change(TypedDict):
    id: str


class DocumentRevision(TypedDict):
    revisionId: DocumentRevisionId
    id: str
    finalId: str
    ownerUser: str
    status: Literal["Actual", "Issued"]
    changes: NotRequired[List[Change]]
    layoutInfo: LayoutInfo


class RevisionChangesOfEntities(TypedDict):
    revisionChanges: List[RevisionChange]


class GetAddOnVersionResult(TypedDict):
    version: str


class GetArchicadLocationResult(TypedDict):
    archicadLocation: str


class GetCurrentWindowTypeResult(TypedDict):
    currentWindowType: Literal[
        "FloorPlan",
        "Section",
        "Details",
        "3DModel",
        "Layout",
        "Drawing",
        "CustomText",
        "CustomDraw",
        "MasterLayout",
        "Elevation",
        "InteriorElevation",
        "Worksheet",
        "Report",
        "3DDocument",
        "External3D",
        "Movie3D",
        "MovieRendering",
        "Rendering",
        "ModelCompare",
        "Interactive Schedule",
        "Unknown",
    ]


class GetProjectInfoResult(TypedDict):
    isUntitled: bool
    isTeamwork: bool
    projectLocation: NotRequired[str]
    projectPath: NotRequired[str]
    projectName: NotRequired[str]


class Field(TypedDict):
    projectInfoId: NotRequired[str]
    projectInfoName: NotRequired[str]
    projectInfoValue: NotRequired[str]


class GetProjectInfoFieldsResult(TypedDict):
    fields: List[Field]


class SetProjectInfoFieldParameters(TypedDict):
    projectInfoId: str
    projectInfoValue: str


class Story(TypedDict):
    index: int
    floorId: int
    dispOnSections: bool
    level: float
    name: str


class GetStoriesResult(TypedDict):
    firstStory: int
    lastStory: int
    actStory: int
    skipNullFloor: bool
    stories: List[Story]


class Story(TypedDict):
    dispOnSections: bool
    level: float
    name: str


class SetStoriesParameters(TypedDict):
    stories: List[Story]


class OpenProjectParameters(TypedDict):
    projectFilePath: str


class ProjectLocation(TypedDict):
    longitude: float
    latitude: float
    altitude: float
    north: float


class Position(TypedDict):
    eastings: float
    northings: float
    elevation: float


class GeoReferencingParameters(TypedDict):
    crsName: str
    description: str
    geodeticDatum: str
    verticalDatum: str
    mapProjection: str
    mapZone: str


class SurveyPoint(TypedDict):
    position: Position
    geoReferencingParameters: GeoReferencingParameters


class GetGeoLocationResult(TypedDict):
    projectLocation: ProjectLocation
    surveyPoint: SurveyPoint


class ChangeSelectionOfElementsResult(TypedDict):
    executionResultsOfAddToSelection: List[
        SuccessfulExecutionResult | FailedExecutionResult
    ]
    executionResultsOfRemoveFromSelection: List[
        SuccessfulExecutionResult | FailedExecutionResult
    ]


class TypeSpecificDetails(TypedDict):
    begCoordinate: NotRequired[Field2DCoordinate]
    endCoordinate: NotRequired[Field2DCoordinate]
    height: NotRequired[float]
    bottomOffset: NotRequired[float]
    offset: NotRequired[float]
    begThickness: NotRequired[float]
    endThickness: NotRequired[float]


class Details(TypedDict):
    floorIndex: NotRequired[float]
    layerIndex: NotRequired[float]
    drawIndex: NotRequired[float]
    typeSpecificDetails: NotRequired[TypeSpecificDetails]


class SetDetailsOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class Get3DBoundingBoxesResult(TypedDict):
    boundingBoxes3D: List[BoundingBox3DOrError | ErrorItem]


class MoveVector(TypedDict):
    x: float
    y: float
    z: float


class MoveElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class SetGDLParametersOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class GetClassificationsOfElementsResult(TypedDict):
    elementClassifications: List[ElementClassificationOrError | ErrorItem]


class SetClassificationsOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class Coordinates(TypedDict):
    x: float
    y: float
    z: float


class ColumnsDatum(TypedDict):
    coordinates: Coordinates


class CreateColumnsParameters(TypedDict):
    columnsData: List[ColumnsDatum]


class SlabsDatum(TypedDict):
    level: float
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole]]


class CreateSlabsParameters(TypedDict):
    slabsData: List[SlabsDatum]


class Geometry(TypedDict):
    referencePosition: Field2DCoordinate


class Geometry(TypedDict):
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole]]


class PolylinesDatum(TypedDict):
    floorInd: NotRequired[float]
    coordinates: List[Field2DCoordinate]
    arcs: NotRequired[List[PolyArc]]


class CreatePolylinesParameters(TypedDict):
    polylinesData: List[PolylinesDatum]


class ObjectsDatum(TypedDict):
    libraryPartName: str
    coordinates: Field3DCoordinate
    dimensions: Field3DDimensions


class CreateObjectsParameters(TypedDict):
    objectsData: List[ObjectsDatum]


class Hole4(TypedDict):
    polygonCoordinates: List[Field3DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]


class Subline(TypedDict):
    coordinates: List[Field3DCoordinate]


class MeshesDatum(TypedDict):
    floorIndex: NotRequired[int]
    level: NotRequired[float]
    skirtType: NotRequired[
        Literal["SurfaceOnlyWithoutSkirt", "WithSkirt", "SolidBodyWithSkirt"]
    ]
    skirtLevel: NotRequired[float]
    polygonCoordinates: List[Field3DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole4]]
    sublines: NotRequired[List[Subline]]


class CreateMeshesParameters(TypedDict):
    meshesData: List[MeshesDatum]


class ApplyFavoritesToElementDefaultsParameters(TypedDict):
    favorites: List[str]


class ApplyFavoritesToElementDefaultsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class CreateFavoritesFromElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class GetAllPropertiesResult(TypedDict):
    properties: List[PropertyDetails]


class GetPropertyValuesOfElementsResult(TypedDict):
    propertyValuesForElements: List[PropertyValuesOrError | ErrorItem]


class SetPropertyValuesOfElementsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class GetPropertyValuesOfAttributesResult(TypedDict):
    propertyValuesForAttributes: List[PropertyValuesOrError | ErrorItem]


class SetPropertyValuesOfAttributesResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class PropertyGroup(TypedDict):
    name: str
    description: NotRequired[str]


class PropertyGroup(TypedDict):
    propertyGroup: PropertyGroup


class CreatePropertyGroupsParameters(TypedDict):
    propertyGroups: List[PropertyGroup]


class PropertyGroupId(TypedDict):
    propertyGroupId: PropertyGroupId


class CreatePropertyGroupsResult(TypedDict):
    propertyGroupIds: List[PropertyGroupId]


class DeletePropertyGroupsParameters(TypedDict):
    propertyGroupIds: List[PropertyGroupId]


class DeletePropertyGroupsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class EnumValue(TypedDict):
    enumValueId: NotRequired[DisplayValueEnumId | NonLocalizedValueEnumId]
    displayValue: str
    nonLocalizedValue: NotRequired[str]


class PossibleEnumValue(TypedDict):
    enumValue: EnumValue


class Group(TypedDict):
    propertyGroupId: NotRequired[PropertyGroupId]
    name: NotRequired[str]


class CreatePropertyDefinitionsResult(TypedDict):
    propertyIds: List[PropertyIdOrError | ErrorItem]


class PropertyId(TypedDict):
    propertyId: PropertyId


class DeletePropertyDefinitionsParameters(TypedDict):
    propertyIds: List[PropertyId]


class DeletePropertyDefinitionsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class GetAttributesByTypeParameters(TypedDict):
    attributeType: Literal[
        "Layer",
        "Line",
        "Fill",
        "Composite",
        "Surface",
        "LayerCombination",
        "ZoneCategory",
        "Profile",
        "PenTable",
        "MEPSystem",
        "OperationProfile",
        "BuildingMaterial",
    ]


class LayerDataArrayItem(TypedDict):
    name: str
    isHidden: NotRequired[bool]
    isLocked: NotRequired[bool]
    isWireframe: NotRequired[bool]


class CreateLayersParameters(TypedDict):
    layerDataArray: List[LayerDataArrayItem]
    overwriteExisting: NotRequired[bool]


class BuildingMaterialDataArrayItem(TypedDict):
    name: str
    id: NotRequired[str]
    manufacturer: NotRequired[str]
    description: NotRequired[str]
    connPriority: NotRequired[int]
    cutFillIndex: NotRequired[int]
    cutFillPen: NotRequired[int]
    cutFillBackgroundPen: NotRequired[int]
    cutSurfaceIndex: NotRequired[int]
    thermalConductivity: NotRequired[float]
    density: NotRequired[float]
    heatCapacity: NotRequired[float]
    embodiedEnergy: NotRequired[float]
    embodiedCarbon: NotRequired[float]


class CreateBuildingMaterialsParameters(TypedDict):
    buildingMaterialDataArray: List[BuildingMaterialDataArrayItem]
    overwriteExisting: NotRequired[bool]


class Properties(TypedDict):
    thermalConductivity: NotRequired[float]
    density: NotRequired[float]
    heatCapacity: NotRequired[float]
    embodiedEnergy: NotRequired[float]
    embodiedCarbon: NotRequired[float]


class Property(TypedDict):
    properties: NotRequired[Properties]


class GetBuildingMaterialPhysicalPropertiesResult(TypedDict):
    properties: List[Property]


class Library(TypedDict):
    name: str
    path: str
    type: str
    available: NotRequired[bool]
    readOnly: NotRequired[bool]
    twServerUrl: NotRequired[str]
    urlWebLibrary: NotRequired[str]


class GetLibrariesResult(TypedDict):
    libraries: List[Library]


class User(TypedDict):
    userId: float
    userName: str


class PublishPublisherSetParameters(TypedDict):
    publisherSetName: str
    outputPath: NotRequired[str]


class ModelViewOption(TypedDict):
    name: str


class GetModelViewOptionsResult(TypedDict):
    modelViewOptions: List[ModelViewOption]


class GetViewSettingsResult(TypedDict):
    viewSettings: List[ViewSettings | ErrorItem]


class NavigatorItemIdsWithViewSetting(TypedDict):
    navigatorItemId: NavigatorItemId
    viewSettings: ViewSettings


class SetViewSettingsParameters(TypedDict):
    navigatorItemIdsWithViewSettings: List[NavigatorItemIdsWithViewSetting]


class SetViewSettingsResult(TypedDict):
    executionResults: List[SuccessfulExecutionResult | FailedExecutionResult]


class GetView2DTransformationsResult(TypedDict):
    transformations: List[ViewTransformations | ErrorItem]


class CreateIssueParameters(TypedDict):
    name: str
    parentIssueId: NotRequired[IssueId]
    tagText: NotRequired[str]


class CreateIssueResult(TypedDict):
    issueId: IssueId


class DeleteIssueParameters(TypedDict):
    issueId: IssueId
    acceptAllElements: NotRequired[bool]


class AddCommentToIssueParameters(TypedDict):
    issueId: IssueId
    author: NotRequired[str]
    status: NotRequired[Literal["Error", "Warning", "Info", "Unknown"]]
    text: str


class GetCommentsFromIssueParameters(TypedDict):
    issueId: IssueId


class Comment(TypedDict):
    guid: str
    author: str
    text: str
    status: Literal["Error", "Warning", "Info", "Unknown"]
    creaTime: int


class GetCommentsFromIssueResult(TypedDict):
    comments: List[Comment]


class GetElementsAttachedToIssueParameters(TypedDict):
    issueId: IssueId
    type: Literal["Creation", "Highlight", "Deletion", "Modification"]


class ExportIssuesToBCFParameters(TypedDict):
    issues: NotRequired[List[IssueIdArrayItem]]
    exportPath: str
    useExternalId: bool
    alignBySurveyPoint: bool


class ImportIssuesFromBCFParameters(TypedDict):
    importPath: str
    alignBySurveyPoint: bool


class GetRevisionIssuesResult(TypedDict):
    revisionIssues: List[RevisionIssue]


class GetRevisionChangesResult(TypedDict):
    revisionChanges: List[RevisionChange]


class GetDocumentRevisionsResult(TypedDict):
    documentRevisions: List[DocumentRevision]


class GetCurrentRevisionChangesOfLayoutsResult(TypedDict):
    currentRevisionChangesOfLayouts: RevisionChangesOfEntities | ErrorItem


class GetRevisionChangesOfElementsResult(TypedDict):
    revisionChangesOfElements: RevisionChangesOfEntities | ErrorItem


class GenerateDocumentationParameters(TypedDict):
    destinationFolder: str


class ElementId(TypedDict):
    guid: str


class AttributeId(TypedDict):
    guid: str


class GDLParameterList(TypedDict):
    parameters: List[GDLParameterDetails]


class ElementPropertyValue(TypedDict):
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: PropertyValue


class BasicDefaultValue(TypedDict):
    basicDefaultValue: (
        NotAvailablePropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue
    )


class ElementClassification(TypedDict):
    elementId: ElementId
    classificationId: ClassificationId


class NavigatorItemIdArrayItem(TypedDict):
    navigatorItemId: NavigatorItemId


class DatabaseIdArrayItem(TypedDict):
    databaseId: DatabaseId


class LinkData(TypedDict):
    referredView: NotRequired[ElementId]
    referredDrawing: NotRequired[ElementId]
    referredPMViewPoint: NotRequired[ElementId]


class DetailWorksheetDetails(TypedDict):
    basePoint: Field2DCoordinate
    angle: float
    markerId: ElementId
    detailName: str
    detailIdStr: str
    isHorizontalMarker: bool
    isWindowOpened: bool
    clipPolygon: List[Field2DCoordinate]
    linkData: LinkData


class LibPartBasedElementDetails(TypedDict):
    libPart: LibPartDetails
    ownerElementId: NotRequired[ElementId]


class ZoneDetails(TypedDict):
    name: str
    numberStr: str
    categoryAttributeId: AttributeId
    stampPosition: Field2DCoordinate
    isManual: bool
    polygonCoordinates: List[Field2DCoordinate]
    polygonArcs: NotRequired[List[PolyArc]]
    holes: NotRequired[List[Hole]]
    zCoordinate: float


class DetailsOfElement(TypedDict):
    type: Literal[
        "Wall",
        "Column",
        "Beam",
        "Window",
        "Door",
        "Object",
        "Lamp",
        "Slab",
        "Roof",
        "Mesh",
        "Dimension",
        "RadialDimension",
        "LevelDimension",
        "AngleDimension",
        "Text",
        "Label",
        "Zone",
        "Hatch",
        "Line",
        "PolyLine",
        "Arc",
        "Circle",
        "Spline",
        "Hotspot",
        "CutPlane",
        "Camera",
        "CamSet",
        "Group",
        "SectElem",
        "Drawing",
        "Picture",
        "Detail",
        "Elevation",
        "InteriorElevation",
        "Worksheet",
        "Hotlink",
        "CurtainWall",
        "CurtainWallSegment",
        "CurtainWallFrame",
        "CurtainWallPanel",
        "CurtainWallJunction",
        "CurtainWallAccessory",
        "Shell",
        "Skylight",
        "Morph",
        "ChangeMarker",
        "Stair",
        "Riser",
        "Tread",
        "StairStructure",
        "Railing",
        "RailingToprail",
        "RailingHandrail",
        "RailingRail",
        "RailingPost",
        "RailingInnerPost",
        "RailingBaluster",
        "RailingPanel",
        "RailingSegment",
        "RailingNode",
        "RailingBalusterSet",
        "RailingPattern",
        "RailingToprailEnd",
        "RailingHandrailEnd",
        "RailingRailEnd",
        "RailingToprailConnection",
        "RailingHandrailConnection",
        "RailingRailConnection",
        "RailingEndFinish",
        "BeamSegment",
        "ColumnSegment",
        "Opening",
        "Unknown",
    ]
    id: str
    floorIndex: float
    layerIndex: float
    drawIndex: float
    details: (
        WallDetails
        | BeamDetails
        | SlabDetails
        | ColumnDetails
        | DetailWorksheetDetails
        | LibPartBasedElementDetails
        | PolylineDetails
        | ZoneDetails
        | NotYetSupportedElementTypeDetails
    )


class GetDetailsOfElementsResult(TypedDict):
    detailsOfElements: List[DetailsOfElement]


class ElementsWithDetail(TypedDict):
    elementId: ElementId
    details: Details


class SetDetailsOfElementsParameters(TypedDict):
    elementsWithDetails: List[ElementsWithDetail]


class ElementsWithMoveVector(TypedDict):
    elementId: ElementId
    moveVector: MoveVector
    copy_: NotRequired[bool]


class MoveElementsParameters(TypedDict):
    elementsWithMoveVectors: List[ElementsWithMoveVector]


class GetGDLParametersOfElementsResult(TypedDict):
    gdlParametersOfElements: List[GDLParameterList]


class ElementsWithGDLParameter(TypedDict):
    elementId: ElementId
    gdlParameters: GDLParameterList


class SetGDLParametersOfElementsParameters(TypedDict):
    elementsWithGDLParameters: List[ElementsWithGDLParameter]


class SetClassificationsOfElementsParameters(TypedDict):
    elementClassifications: List[ElementClassification]


class ZonesDatum(TypedDict):
    floorIndex: NotRequired[float]
    name: str
    numberStr: str
    categoryAttributeId: NotRequired[AttributeId]
    stampPosition: NotRequired[Field2DCoordinate]
    geometry: Geometry | Geometry


class CreateZonesParameters(TypedDict):
    zonesData: List[ZonesDatum]


class FavoritesFromElement(TypedDict):
    elementId: ElementId
    favorite: str


class CreateFavoritesFromElementsParameters(TypedDict):
    favoritesFromElements: List[FavoritesFromElement]


class SetPropertyValuesOfElementsParameters(TypedDict):
    elementPropertyValues: List[ElementPropertyValue]


class SetPropertyValuesOfAttributesParameters(TypedDict):
    attributePropertyValues: Any


class PropertyDefinition(TypedDict):
    name: str
    description: str
    type: Literal[
        "number",
        "integer",
        "string",
        "boolean",
        "length",
        "area",
        "volume",
        "angle",
        "numberList",
        "integerList",
        "stringList",
        "booleanList",
        "lengthList",
        "areaList",
        "volumeList",
        "angleList",
        "singleEnum",
        "multiEnum",
    ]
    isEditable: bool
    defaultValue: NotRequired[BasicDefaultValue | ExpressionDefaultValue]
    possibleEnumValues: NotRequired[List[PossibleEnumValue]]
    availability: List[ClassificationItemIdArrayItem]
    group: Group


class PropertyDefinition(TypedDict):
    propertyDefinition: PropertyDefinition


class CreatePropertyDefinitionsParameters(TypedDict):
    propertyDefinitions: List[PropertyDefinition]


class Attribute(TypedDict):
    attributeId: AttributeId
    index: float
    name: str


class GetAttributesByTypeResult(TypedDict):
    attributes: List[Attribute]


class Conflict(TypedDict):
    elementId: ElementId
    user: User


class ReserveElementsResult(TypedDict):
    executionResult: SuccessfulExecutionResult | FailedExecutionResult
    conflicts: NotRequired[List[Conflict]]


class Issue(TypedDict):
    issueId: IssueId
    name: str
    parentIssueId: IssueId
    creaTime: int
    modiTime: int
    tagText: str
    tagTextElementId: ElementId
    isTagTextElemVisible: bool


class GetIssuesResult(TypedDict):
    issues: List[Issue]


class ElementIdArrayItem(TypedDict):
    elementId: ElementId


class AttributeIdArrayItem(TypedDict):
    attributeId: AttributeId


class GetElementsByTypeParameters(TypedDict):
    elementType: Literal[
        "Wall",
        "Column",
        "Beam",
        "Window",
        "Door",
        "Object",
        "Lamp",
        "Slab",
        "Roof",
        "Mesh",
        "Dimension",
        "RadialDimension",
        "LevelDimension",
        "AngleDimension",
        "Text",
        "Label",
        "Zone",
        "Hatch",
        "Line",
        "PolyLine",
        "Arc",
        "Circle",
        "Spline",
        "Hotspot",
        "CutPlane",
        "Camera",
        "CamSet",
        "Group",
        "SectElem",
        "Drawing",
        "Picture",
        "Detail",
        "Elevation",
        "InteriorElevation",
        "Worksheet",
        "Hotlink",
        "CurtainWall",
        "CurtainWallSegment",
        "CurtainWallFrame",
        "CurtainWallPanel",
        "CurtainWallJunction",
        "CurtainWallAccessory",
        "Shell",
        "Skylight",
        "Morph",
        "ChangeMarker",
        "Stair",
        "Riser",
        "Tread",
        "StairStructure",
        "Railing",
        "RailingToprail",
        "RailingHandrail",
        "RailingRail",
        "RailingPost",
        "RailingInnerPost",
        "RailingBaluster",
        "RailingPanel",
        "RailingSegment",
        "RailingNode",
        "RailingBalusterSet",
        "RailingPattern",
        "RailingToprailEnd",
        "RailingHandrailEnd",
        "RailingRailEnd",
        "RailingToprailConnection",
        "RailingHandrailConnection",
        "RailingRailConnection",
        "RailingEndFinish",
        "BeamSegment",
        "ColumnSegment",
        "Opening",
        "Unknown",
    ]
    filters: NotRequired[
        List[
            Literal[
                "IsEditable",
                "IsVisibleByLayer",
                "IsVisibleByRenovation",
                "IsVisibleByStructureDisplay",
                "IsVisibleIn3D",
                "OnActualFloor",
                "OnActualLayout",
                "InMyWorkspace",
                "IsIndependent",
                "InCroppedView",
                "HasAccessRight",
                "IsOverriddenByRenovation",
            ]
        ]
    ]
    databases: NotRequired[List[DatabaseIdArrayItem]]


class GetAllElementsParameters(TypedDict):
    filters: NotRequired[
        List[
            Literal[
                "IsEditable",
                "IsVisibleByLayer",
                "IsVisibleByRenovation",
                "IsVisibleByStructureDisplay",
                "IsVisibleIn3D",
                "OnActualFloor",
                "OnActualLayout",
                "InMyWorkspace",
                "IsIndependent",
                "InCroppedView",
                "HasAccessRight",
                "IsOverriddenByRenovation",
            ]
        ]
    ]
    databases: NotRequired[List[DatabaseIdArrayItem]]


class Skin(TypedDict):
    type: str
    buildingMaterialId: AttributeIdArrayItem
    framePen: int
    thickness: float


class Separator(TypedDict):
    lineTypeId: AttributeIdArrayItem
    linePen: int


class CompositeDataArrayItem(TypedDict):
    name: str
    useWith: NotRequired[List[str]]
    skins: List[Skin]
    separators: List[Separator]


class CreateCompositesParameters(TypedDict):
    compositeDataArray: List[CompositeDataArrayItem]
    overwriteExisting: NotRequired[bool]


class GetDatabaseIdFromNavigatorItemIdParameters(TypedDict):
    navigatorItemIds: List[NavigatorItemIdArrayItem]


class GetDatabaseIdFromNavigatorItemIdResult(TypedDict):
    databases: List[DatabaseIdArrayItem]


class GetViewSettingsParameters(TypedDict):
    navigatorItemIds: List[NavigatorItemIdArrayItem]


class GetView2DTransformationsParameters(TypedDict):
    databases: NotRequired[List[DatabaseIdArrayItem]]


class GetCurrentRevisionChangesOfLayoutsParameters(TypedDict):
    layoutDatabaseIds: List[DatabaseIdArrayItem]


class GetSelectedElementsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class GetElementsByTypeResult(TypedDict):
    elements: List[ElementIdArrayItem]
    executionResultForDatabases: NotRequired[
        List[SuccessfulExecutionResult | FailedExecutionResult]
    ]


class GetAllElementsResult(TypedDict):
    elements: List[ElementIdArrayItem]
    executionResultForDatabases: NotRequired[
        List[SuccessfulExecutionResult | FailedExecutionResult]
    ]


class ChangeSelectionOfElementsParameters(TypedDict):
    addElementsToSelection: NotRequired[List[ElementIdArrayItem]]
    removeElementsFromSelection: NotRequired[List[ElementIdArrayItem]]


class FilterElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    filters: NotRequired[
        List[
            Literal[
                "IsEditable",
                "IsVisibleByLayer",
                "IsVisibleByRenovation",
                "IsVisibleByStructureDisplay",
                "IsVisibleIn3D",
                "OnActualFloor",
                "OnActualLayout",
                "InMyWorkspace",
                "IsIndependent",
                "InCroppedView",
                "HasAccessRight",
                "IsOverriddenByRenovation",
            ]
        ]
    ]


class FilterElementsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class GetDetailsOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class Get3DBoundingBoxesParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class GetSubelementsOfHierarchicalElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class Subelement(TypedDict):
    cWallSegments: NotRequired[List[ElementIdArrayItem]]
    cWallFrames: NotRequired[List[ElementIdArrayItem]]
    cWallPanels: NotRequired[List[ElementIdArrayItem]]
    cWallJunctions: NotRequired[List[ElementIdArrayItem]]
    cWallAccessories: NotRequired[List[ElementIdArrayItem]]
    stairRisers: NotRequired[List[ElementIdArrayItem]]
    stairTreads: NotRequired[List[ElementIdArrayItem]]
    stairStructures: NotRequired[List[ElementIdArrayItem]]
    railingNodes: NotRequired[List[ElementIdArrayItem]]
    railingSegments: NotRequired[List[ElementIdArrayItem]]
    railingPosts: NotRequired[List[ElementIdArrayItem]]
    railingRailEnds: NotRequired[List[ElementIdArrayItem]]
    railingRailConnections: NotRequired[List[ElementIdArrayItem]]
    railingHandrailEnds: NotRequired[List[ElementIdArrayItem]]
    railingHandrailConnections: NotRequired[List[ElementIdArrayItem]]
    railingToprailEnds: NotRequired[List[ElementIdArrayItem]]
    railingToprailConnections: NotRequired[List[ElementIdArrayItem]]
    railingRails: NotRequired[List[ElementIdArrayItem]]
    railingToprails: NotRequired[List[ElementIdArrayItem]]
    railingHandrails: NotRequired[List[ElementIdArrayItem]]
    railingPatterns: NotRequired[List[ElementIdArrayItem]]
    railingInnerPosts: NotRequired[List[ElementIdArrayItem]]
    railingPanels: NotRequired[List[ElementIdArrayItem]]
    railingBalusterSets: NotRequired[List[ElementIdArrayItem]]
    railingBalusters: NotRequired[List[ElementIdArrayItem]]
    beamSegments: NotRequired[List[ElementIdArrayItem]]
    columnSegments: NotRequired[List[ElementIdArrayItem]]


class GetSubelementsOfHierarchicalElementsResult(TypedDict):
    subelements: List[Subelement]


class GetConnectedElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    connectedElementType: Literal[
        "Wall",
        "Column",
        "Beam",
        "Window",
        "Door",
        "Object",
        "Lamp",
        "Slab",
        "Roof",
        "Mesh",
        "Dimension",
        "RadialDimension",
        "LevelDimension",
        "AngleDimension",
        "Text",
        "Label",
        "Zone",
        "Hatch",
        "Line",
        "PolyLine",
        "Arc",
        "Circle",
        "Spline",
        "Hotspot",
        "CutPlane",
        "Camera",
        "CamSet",
        "Group",
        "SectElem",
        "Drawing",
        "Picture",
        "Detail",
        "Elevation",
        "InteriorElevation",
        "Worksheet",
        "Hotlink",
        "CurtainWall",
        "CurtainWallSegment",
        "CurtainWallFrame",
        "CurtainWallPanel",
        "CurtainWallJunction",
        "CurtainWallAccessory",
        "Shell",
        "Skylight",
        "Morph",
        "ChangeMarker",
        "Stair",
        "Riser",
        "Tread",
        "StairStructure",
        "Railing",
        "RailingToprail",
        "RailingHandrail",
        "RailingRail",
        "RailingPost",
        "RailingInnerPost",
        "RailingBaluster",
        "RailingPanel",
        "RailingSegment",
        "RailingNode",
        "RailingBalusterSet",
        "RailingPattern",
        "RailingToprailEnd",
        "RailingHandrailEnd",
        "RailingRailEnd",
        "RailingToprailConnection",
        "RailingHandrailConnection",
        "RailingRailConnection",
        "RailingEndFinish",
        "BeamSegment",
        "ColumnSegment",
        "Opening",
        "Unknown",
    ]


class ConnectedElement(TypedDict):
    elements: List[ElementIdArrayItem]


class GetConnectedElementsResult(TypedDict):
    connectedElements: List[ConnectedElement]


class HighlightElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    highlightedColors: List[List[int]]
    wireframe3D: NotRequired[bool]
    nonHighlightedColor: NotRequired[List[int]]


class GetGDLParametersOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class GetClassificationsOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    classificationSystemIds: List[ClassificationSystemIdArrayItem]


class CreateColumnsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreateSlabsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreateZonesResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreatePolylinesResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreateObjectsResult(TypedDict):
    elements: List[ElementIdArrayItem]


class CreateMeshesResult(TypedDict):
    elements: List[ElementIdArrayItem]


class GetPropertyValuesOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]
    properties: List[PropertyIdArrayItem]


class GetPropertyValuesOfAttributesParameters(TypedDict):
    attributeIds: List[AttributeIdArrayItem]
    properties: List[PropertyIdArrayItem]


class CreateLayersResult(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class CreateBuildingMaterialsResult(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class CreateCompositesResult(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class GetBuildingMaterialPhysicalPropertiesParameters(TypedDict):
    attributeIds: List[AttributeIdArrayItem]


class ReserveElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class ReleaseElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class UpdateDrawingsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class AttachElementsToIssueParameters(TypedDict):
    issueId: IssueId
    elements: List[ElementIdArrayItem]
    type: Literal["Creation", "Highlight", "Deletion", "Modification"]


class DetachElementsFromIssueParameters(TypedDict):
    issueId: IssueId
    elements: List[ElementIdArrayItem]


class GetElementsAttachedToIssueResult(TypedDict):
    elements: List[ElementIdArrayItem]


class GetRevisionChangesOfElementsParameters(TypedDict):
    elements: List[ElementIdArrayItem]


class Hotlink(TypedDict):
    location: str
    children: NotRequired[List[Hotlink]]


class GetHotlinksResult(TypedDict):
    hotlinks: List[Hotlink]
