{
  "tapir": {
    "Issue Management Commands": [
      {
        "name": "AddCommentToIssue",
        "group": "Issue Management Commands",
        "description": "Adds a new comment to the specified issue.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def add_comment_to_issue(\n    self,\n    issue_id: IssueId,\n    text: str,\n    author: str | None = None,\n    status: IssueCommentStatus | None = None\n) -> None:\n    \"\"\"\n    Adds a new comment to the specified issue.\n\n    Args:\n        issue_id (IssueId)\n        text (str): Comment text to add.\n        author (str | None): The author of the new comment.\n        status (IssueCommentStatus | None)\n    \"\"\"\n    params_dict = {\n            'issueId': issue_id,\n            'author': author,\n            'status': status,\n            'text': text,\n        }\n    validated_params = AddCommentToIssueParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"AddCommentToIssue\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "AddCommentToIssueParameters"
        ],
        "type_model_dependencies": [
          "IssueCommentStatus",
          "IssueId"
        ]
      },
      {
        "name": "AttachElementsToIssue",
        "group": "Issue Management Commands",
        "description": "Attaches elements to the specified issue.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def attach_elements_to_issue(\n    self,\n    issue_id: IssueId,\n    elements: list[ElementIdArrayItem],\n    type: IssueElementType\n) -> None:\n    \"\"\"\n    Attaches elements to the specified issue.\n\n    Args:\n        issue_id (IssueId)\n        elements (list[ElementIdArrayItem]): A list of elements.\n        type (IssueElementType)\n    \"\"\"\n    params_dict = {\n            'issueId': issue_id,\n            'elements': elements,\n            'type': type,\n        }\n    validated_params = AttachElementsToIssueParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"AttachElementsToIssue\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "AttachElementsToIssueParameters"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "IssueElementType",
          "IssueId"
        ]
      },
      {
        "name": "CreateIssue",
        "group": "Issue Management Commands",
        "description": "Creates a new issue.",
        "version": "1.0.2",
        "source": "tapir",
        "method_code": "def create_issue(\n    self,\n    name: str,\n    parent_issue_id: IssueId | None = None,\n    tag_text: str | None = None\n) -> CreateIssueResult:\n    \"\"\"\n    Creates a new issue.\n\n    Args:\n        name (str): The name of the issue.\n        parent_issue_id (IssueId | None)\n        tag_text (str | None): Tag text of the issue, optional.\n    \"\"\"\n    params_dict = {\n            'name': name,\n            'parentIssueId': parent_issue_id,\n            'tagText': tag_text,\n        }\n    validated_params = CreateIssueParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateIssue\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateIssueResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateIssueParameters",
          "CreateIssueResult"
        ],
        "type_model_dependencies": [
          "IssueId"
        ]
      },
      {
        "name": "DeleteIssue",
        "group": "Issue Management Commands",
        "description": "Deletes the specified issue.",
        "version": "1.0.2",
        "source": "tapir",
        "method_code": "def delete_issue(\n    self,\n    issue_id: IssueId,\n    accept_all_elements: bool | None = None\n) -> None:\n    \"\"\"\n    Deletes the specified issue.\n\n    Args:\n        issue_id (IssueId)\n        accept_all_elements (bool | None): Accept all creation/deletion/modification of the\n            deleted issue. By default false.\n    \"\"\"\n    params_dict = {\n            'issueId': issue_id,\n            'acceptAllElements': accept_all_elements,\n        }\n    validated_params = DeleteIssueParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"DeleteIssue\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "DeleteIssueParameters"
        ],
        "type_model_dependencies": [
          "IssueId"
        ]
      },
      {
        "name": "DetachElementsFromIssue",
        "group": "Issue Management Commands",
        "description": "Detaches elements from the specified issue.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def detach_elements_from_issue(\n    self,\n    issue_id: IssueId,\n    elements: list[ElementIdArrayItem]\n) -> None:\n    \"\"\"\n    Detaches elements from the specified issue.\n\n    Args:\n        issue_id (IssueId)\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'issueId': issue_id,\n            'elements': elements,\n        }\n    validated_params = DetachElementsFromIssueParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"DetachElementsFromIssue\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "DetachElementsFromIssueParameters"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "IssueId"
        ]
      },
      {
        "name": "ExportIssuesToBCF",
        "group": "Issue Management Commands",
        "description": "Exports specified issues to a BCF file.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def export_issues_to_bcf(\n    self,\n    export_path: str,\n    use_external_id: bool,\n    align_by_survey_point: bool,\n    issues: list[IssueIdArrayItem] | None = None\n) -> None:\n    \"\"\"\n    Exports specified issues to a BCF file.\n\n    Args:\n        export_path (str): The os path to the bcf file, including it's name.\n        use_external_id (bool): Use external IFC ID or Archicad IFC ID as referenced in BCF\n            topics.\n        align_by_survey_point (bool): Align BCF views by Archicad Survey Point or Archicad\n            Project Origin.\n        issues (list[IssueIdArrayItem] | None): Leave it empty to export all issues.\n    \"\"\"\n    params_dict = {\n            'issues': issues,\n            'exportPath': export_path,\n            'useExternalId': use_external_id,\n            'alignBySurveyPoint': align_by_survey_point,\n        }\n    validated_params = ExportIssuesToBCFParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"ExportIssuesToBCF\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "ExportIssuesToBCFParameters"
        ],
        "type_model_dependencies": [
          "IssueIdArrayItem"
        ]
      },
      {
        "name": "GetCommentsFromIssue",
        "group": "Issue Management Commands",
        "description": "Retrieves comments information from the specified issue.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def get_comments_from_issue(\n    self,\n    issue_id: IssueId\n) -> GetCommentsFromIssueResult:\n    \"\"\"\n    Retrieves comments information from the specified issue.\n\n    Args:\n        issue_id (IssueId)\n    \"\"\"\n    params_dict = {\n            'issueId': issue_id,\n        }\n    validated_params = GetCommentsFromIssueParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetCommentsFromIssue\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetCommentsFromIssueResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetCommentsFromIssueParameters",
          "GetCommentsFromIssueResult"
        ],
        "type_model_dependencies": [
          "IssueId"
        ]
      },
      {
        "name": "GetElementsAttachedToIssue",
        "group": "Issue Management Commands",
        "description": "Retrieves attached elements of the specified issue, filtered by attachment type.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def get_elements_attached_to_issue(\n    self,\n    issue_id: IssueId,\n    type: IssueElementType\n) -> GetElementsAttachedToIssueResult:\n    \"\"\"\n    Retrieves attached elements of the specified issue, filtered by attachment type.\n\n    Args:\n        issue_id (IssueId)\n        type (IssueElementType)\n    \"\"\"\n    params_dict = {\n            'issueId': issue_id,\n            'type': type,\n        }\n    validated_params = GetElementsAttachedToIssueParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetElementsAttachedToIssue\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetElementsAttachedToIssueResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetElementsAttachedToIssueParameters",
          "GetElementsAttachedToIssueResult"
        ],
        "type_model_dependencies": [
          "IssueElementType",
          "IssueId"
        ]
      },
      {
        "name": "GetIssues",
        "group": "Issue Management Commands",
        "description": "Retrieves information about existing issues.",
        "version": "1.0.2",
        "source": "tapir",
        "method_code": "def get_issues(\n    self\n) -> GetIssuesResult:\n    \"\"\"\n    Retrieves information about existing issues.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetIssues\")\n    return GetIssuesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetIssuesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "ImportIssuesFromBCF",
        "group": "Issue Management Commands",
        "description": "Imports issues from the specified BCF file.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def import_issues_from_bcf(\n    self,\n    import_path: str,\n    align_by_survey_point: bool\n) -> None:\n    \"\"\"\n    Imports issues from the specified BCF file.\n\n    Args:\n        import_path (str): The os path to the bcf file, including it's name.\n        align_by_survey_point (bool): Align BCF views by Archicad Survey Point or Archicad\n            Project Origin.\n    \"\"\"\n    params_dict = {\n            'importPath': import_path,\n            'alignBySurveyPoint': align_by_survey_point,\n        }\n    validated_params = ImportIssuesFromBCFParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"ImportIssuesFromBCF\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "ImportIssuesFromBCFParameters"
        ],
        "type_model_dependencies": []
      }
    ],
    "Library Commands": [
      {
        "name": "AddFilesToEmbeddedLibrary",
        "group": "Library Commands",
        "description": "Adds the given files into the embedded library.",
        "version": "1.2.2",
        "source": "tapir",
        "method_code": "def add_files_to_embedded_library(\n    self,\n    files: list[File]\n) -> AddFilesToEmbeddedLibraryResult:\n    \"\"\"\n    Adds the given files into the embedded library.\n\n    Args:\n        files (list[File]): A list of files\n    \"\"\"\n    params_dict = {\n            'files': files,\n        }\n    validated_params = AddFilesToEmbeddedLibraryParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"AddFilesToEmbeddedLibrary\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return AddFilesToEmbeddedLibraryResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "AddFilesToEmbeddedLibraryParameters",
          "AddFilesToEmbeddedLibraryResult"
        ],
        "type_model_dependencies": [
          "File"
        ]
      },
      {
        "name": "GetLibraries",
        "group": "Library Commands",
        "description": "Gets the list of loaded libraries.",
        "version": "1.0.1",
        "source": "tapir",
        "method_code": "def get_libraries(\n    self\n) -> GetLibrariesResult:\n    \"\"\"\n    Gets the list of loaded libraries.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetLibraries\")\n    return GetLibrariesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetLibrariesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "ReloadLibraries",
        "group": "Library Commands",
        "description": "Executes the reload libraries command.",
        "version": "1.0.0",
        "source": "tapir",
        "method_code": "def reload_libraries(\n    self\n) -> None:\n    \"\"\"\n    Executes the reload libraries command.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"ReloadLibraries\")\n    return None",
        "command_model_dependencies": [],
        "type_model_dependencies": []
      }
    ],
    "Favorites Commands": [
      {
        "name": "ApplyFavoritesToElementDefaults",
        "group": "Favorites Commands",
        "description": "Apply the given favorites to element defaults.",
        "version": "1.1.2",
        "source": "tapir",
        "method_code": "def apply_favorites_to_element_defaults(\n    self,\n    favorites: list[str]\n) -> ApplyFavoritesToElementDefaultsResult:\n    \"\"\"\n    Apply the given favorites to element defaults.\n\n    Args:\n        favorites (list[str]): A list of favorite names\n    \"\"\"\n    params_dict = {\n            'favorites': favorites,\n        }\n    validated_params = ApplyFavoritesToElementDefaultsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"ApplyFavoritesToElementDefaults\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return ApplyFavoritesToElementDefaultsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "ApplyFavoritesToElementDefaultsParameters",
          "ApplyFavoritesToElementDefaultsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "CreateFavoritesFromElements",
        "group": "Favorites Commands",
        "description": "Create favorites from the given elements.",
        "version": "1.1.2",
        "source": "tapir",
        "method_code": "def create_favorites_from_elements(\n    self,\n    favorites_from_elements: list[FavoritesFromElement]\n) -> CreateFavoritesFromElementsResult:\n    \"\"\"\n    Create favorites from the given elements.\n\n    Args:\n        favorites_from_elements (list[FavoritesFromElement])\n    \"\"\"\n    params_dict = {\n            'favoritesFromElements': favorites_from_elements,\n        }\n    validated_params = CreateFavoritesFromElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateFavoritesFromElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateFavoritesFromElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateFavoritesFromElementsParameters",
          "CreateFavoritesFromElementsResult"
        ],
        "type_model_dependencies": [
          "FavoritesFromElement"
        ]
      },
      {
        "name": "GetFavoritesByType",
        "group": "Favorites Commands",
        "description": "Returns a list of the names of all favorites with the given element type",
        "version": "1.2.2",
        "source": "tapir",
        "method_code": "def get_favorites_by_type(\n    self,\n    element_type: ElementType\n) -> GetFavoritesByTypeResult:\n    \"\"\"\n    Returns a list of the names of all favorites with the given element type\n\n    Args:\n        element_type (ElementType)\n    \"\"\"\n    params_dict = {\n            'elementType': element_type,\n        }\n    validated_params = GetFavoritesByTypeParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetFavoritesByType\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetFavoritesByTypeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetFavoritesByTypeParameters",
          "GetFavoritesByTypeResult"
        ],
        "type_model_dependencies": [
          "ElementType"
        ]
      }
    ],
    "Element Commands": [
      {
        "name": "ChangeSelectionOfElements",
        "group": "Element Commands",
        "description": "Adds/removes a number of elements to/from the current selection.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def change_selection_of_elements(\n    self,\n    add_elements_to_selection: list[ElementIdArrayItem] | None = None,\n    remove_elements_from_selection: list[ElementIdArrayItem] | None = None\n) -> ChangeSelectionOfElementsResult:\n    \"\"\"\n    Adds/removes a number of elements to/from the current selection.\n\n    Args:\n        add_elements_to_selection (list[ElementIdArrayItem] | None): A list of elements.\n        remove_elements_from_selection (list[ElementIdArrayItem] | None): A list of\n            elements.\n    \"\"\"\n    params_dict = {\n            'addElementsToSelection': add_elements_to_selection,\n            'removeElementsFromSelection': remove_elements_from_selection,\n        }\n    validated_params = ChangeSelectionOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"ChangeSelectionOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return ChangeSelectionOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "ChangeSelectionOfElementsParameters",
          "ChangeSelectionOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "CreateColumns",
        "group": "Element Commands",
        "description": "Creates Column elements based on the given parameters.",
        "version": "1.0.3",
        "source": "tapir",
        "method_code": "def create_columns(\n    self,\n    columns_data: list[ColumnsDatum]\n) -> CreateColumnsResult:\n    \"\"\"\n    Creates Column elements based on the given parameters.\n\n    Args:\n        columns_data (list[ColumnsDatum]): Array of data to create Columns.\n    \"\"\"\n    params_dict = {\n            'columnsData': columns_data,\n        }\n    validated_params = CreateColumnsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateColumns\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateColumnsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateColumnsParameters",
          "CreateColumnsResult"
        ],
        "type_model_dependencies": [
          "ColumnsDatum"
        ]
      },
      {
        "name": "CreateMeshes",
        "group": "Element Commands",
        "description": "Creates Mesh elements based on the given parameters.",
        "version": "1.1.9",
        "source": "tapir",
        "method_code": "def create_meshes(\n    self,\n    meshes_data: list[MeshesDatum]\n) -> CreateMeshesResult:\n    \"\"\"\n    Creates Mesh elements based on the given parameters.\n\n    Args:\n        meshes_data (list[MeshesDatum]): Array of data to create Meshes.\n    \"\"\"\n    params_dict = {\n            'meshesData': meshes_data,\n        }\n    validated_params = CreateMeshesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateMeshes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateMeshesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateMeshesParameters",
          "CreateMeshesResult"
        ],
        "type_model_dependencies": [
          "MeshesDatum"
        ]
      },
      {
        "name": "CreateObjects",
        "group": "Element Commands",
        "description": "Creates Object elements based on the given parameters.",
        "version": "1.0.3",
        "source": "tapir",
        "method_code": "def create_objects(\n    self,\n    objects_data: list[ObjectsDatum]\n) -> CreateObjectsResult:\n    \"\"\"\n    Creates Object elements based on the given parameters.\n\n    Args:\n        objects_data (list[ObjectsDatum]): Array of data to create Objects.\n    \"\"\"\n    params_dict = {\n            'objectsData': objects_data,\n        }\n    validated_params = CreateObjectsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateObjects\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateObjectsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateObjectsParameters",
          "CreateObjectsResult"
        ],
        "type_model_dependencies": [
          "ObjectsDatum"
        ]
      },
      {
        "name": "CreatePolylines",
        "group": "Element Commands",
        "description": "Creates Polyline elements based on the given parameters.",
        "version": "1.1.5",
        "source": "tapir",
        "method_code": "def create_polylines(\n    self,\n    polylines_data: list[PolylinesDatum]\n) -> CreatePolylinesResult:\n    \"\"\"\n    Creates Polyline elements based on the given parameters.\n\n    Args:\n        polylines_data (list[PolylinesDatum]): Array of data to create Polylines.\n    \"\"\"\n    params_dict = {\n            'polylinesData': polylines_data,\n        }\n    validated_params = CreatePolylinesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreatePolylines\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreatePolylinesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreatePolylinesParameters",
          "CreatePolylinesResult"
        ],
        "type_model_dependencies": [
          "PolylinesDatum"
        ]
      },
      {
        "name": "CreateSlabs",
        "group": "Element Commands",
        "description": "Creates Slab elements based on the given parameters.",
        "version": "1.0.3",
        "source": "tapir",
        "method_code": "def create_slabs(\n    self,\n    slabs_data: list[SlabsDatum]\n) -> CreateSlabsResult:\n    \"\"\"\n    Creates Slab elements based on the given parameters.\n\n    Args:\n        slabs_data (list[SlabsDatum]): Array of data to create Slabs.\n    \"\"\"\n    params_dict = {\n            'slabsData': slabs_data,\n        }\n    validated_params = CreateSlabsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateSlabs\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateSlabsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateSlabsParameters",
          "CreateSlabsResult"
        ],
        "type_model_dependencies": [
          "SlabsDatum"
        ]
      },
      {
        "name": "CreateZones",
        "group": "Element Commands",
        "description": "Creates Zone elements based on the given parameters.",
        "version": "1.1.8",
        "source": "tapir",
        "method_code": "def create_zones(\n    self,\n    zones_data: list[ZonesDatum]\n) -> CreateZonesResult:\n    \"\"\"\n    Creates Zone elements based on the given parameters.\n\n    Args:\n        zones_data (list[ZonesDatum]): Array of data to create Zones.\n    \"\"\"\n    params_dict = {\n            'zonesData': zones_data,\n        }\n    validated_params = CreateZonesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateZones\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateZonesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateZonesParameters",
          "CreateZonesResult"
        ],
        "type_model_dependencies": [
          "ZonesDatum"
        ]
      },
      {
        "name": "DeleteElements",
        "group": "Element Commands",
        "description": "Deletes elements.",
        "version": "1.2.1",
        "source": "tapir",
        "method_code": "def delete_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> None:\n    \"\"\"\n    Deletes elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = DeleteElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"DeleteElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "DeleteElementsParameters"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "FilterElements",
        "group": "Element Commands",
        "description": "Tests an elements by the given criterias.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def filter_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    filters: list[ElementFilter] | None = None\n) -> FilterElementsResult:\n    \"\"\"\n    Tests an elements by the given criterias.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        filters (list[ElementFilter] | None) (Constraints: min_length=1)\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'filters': filters,\n        }\n    validated_params = FilterElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"FilterElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return FilterElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "FilterElementsParameters",
          "FilterElementsResult"
        ],
        "type_model_dependencies": [
          "ElementFilter",
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "Get3DBoundingBoxes",
        "group": "Element Commands",
        "description": "Get the 3D bounding box of elements. The bounding box is calculated from the global origin in the 3D view. The output is the array of the bounding boxes respective to the input array of elements.",
        "version": "1.1.2",
        "source": "tapir",
        "method_code": "def get_3d_bounding_boxes(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> Get3DBoundingBoxesResult:\n    \"\"\"\n    Get the 3D bounding box of elements. The bounding box is calculated from the global\n    origin in the 3D view. The output is the array of the bounding boxes respective to the\n    input array of elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = Get3DBoundingBoxesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"Get3DBoundingBoxes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return Get3DBoundingBoxesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "Get3DBoundingBoxesParameters",
          "Get3DBoundingBoxesResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "GetAllElements",
        "group": "Element Commands",
        "description": "Returns the identifier of all elements on the plan. Use the optional filter parameter for filtering.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def get_all_elements(\n    self,\n    filters: list[ElementFilter] | None = None,\n    databases: list[DatabaseIdArrayItem] | None = None\n) -> GetAllElementsResult:\n    \"\"\"\n    Returns the identifier of all elements on the plan. Use the optional filter parameter\n    for filtering.\n\n    Args:\n        filters (list[ElementFilter] | None) (Constraints: min_length=1)\n        databases (list[DatabaseIdArrayItem] | None): A list of Archicad databases.\n    \"\"\"\n    params_dict = {\n            'filters': filters,\n            'databases': databases,\n        }\n    validated_params = GetAllElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetAllElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAllElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllElementsParameters",
          "GetAllElementsResult"
        ],
        "type_model_dependencies": [
          "DatabaseIdArrayItem",
          "ElementFilter"
        ]
      },
      {
        "name": "GetClassificationsOfElements",
        "group": "Element Commands",
        "description": "Returns the classification of the given elements in the given classification systems. It works for subelements of hierarchal elements also.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def get_classifications_of_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    classification_system_ids: list[ClassificationSystemIdArrayItem]\n) -> GetClassificationsOfElementsResult:\n    \"\"\"\n    Returns the classification of the given elements in the given classification systems. It\n    works for subelements of hierarchal elements also.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of\n            classification system identifiers.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'classificationSystemIds': classification_system_ids,\n        }\n    validated_params = GetClassificationsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetClassificationsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetClassificationsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetClassificationsOfElementsParameters",
          "GetClassificationsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ClassificationSystemIdArrayItem",
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "GetCollisions",
        "group": "Element Commands",
        "description": "Detect collisions between the given two groups of elements.",
        "version": "1.2.2",
        "source": "tapir",
        "method_code": "def get_collisions(\n    self,\n    elements_group_1: list[ElementIdArrayItem],\n    elements_group_2: list[ElementIdArrayItem],\n    settings: Settings | None = None\n) -> GetCollisionsResult:\n    \"\"\"\n    Detect collisions between the given two groups of elements.\n\n    Args:\n        elements_group_1 (list[ElementIdArrayItem]): A list of elements.\n        elements_group_2 (list[ElementIdArrayItem]): A list of elements.\n        settings (Settings | None)\n    \"\"\"\n    params_dict = {\n            'elementsGroup1': elements_group_1,\n            'elementsGroup2': elements_group_2,\n            'settings': settings,\n        }\n    validated_params = GetCollisionsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetCollisions\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetCollisionsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetCollisionsParameters",
          "GetCollisionsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "Settings"
        ]
      },
      {
        "name": "GetConnectedElements",
        "group": "Element Commands",
        "description": "Gets connected elements of the given elements.",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def get_connected_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    connected_element_type: ElementType\n) -> GetConnectedElementsResult:\n    \"\"\"\n    Gets connected elements of the given elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        connected_element_type (ElementType)\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'connectedElementType': connected_element_type,\n        }\n    validated_params = GetConnectedElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetConnectedElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetConnectedElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetConnectedElementsParameters",
          "GetConnectedElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "ElementType"
        ]
      },
      {
        "name": "GetDetailsOfElements",
        "group": "Element Commands",
        "description": "Gets the details of the given elements (geometry parameters etc).",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def get_details_of_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> GetDetailsOfElementsResult:\n    \"\"\"\n    Gets the details of the given elements (geometry parameters etc).\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = GetDetailsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetDetailsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetDetailsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetDetailsOfElementsParameters",
          "GetDetailsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "GetElementsByType",
        "group": "Element Commands",
        "description": "Returns the identifier of every element of the given type on the plan. It works for any type. Use the optional filter parameter for filtering.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def get_elements_by_type(\n    self,\n    element_type: ElementType,\n    filters: list[ElementFilter] | None = None,\n    databases: list[DatabaseIdArrayItem] | None = None\n) -> GetElementsByTypeResult:\n    \"\"\"\n    Returns the identifier of every element of the given type on the plan. It works for any\n    type. Use the optional filter parameter for filtering.\n\n    Args:\n        element_type (ElementType)\n        filters (list[ElementFilter] | None) (Constraints: min_length=1)\n        databases (list[DatabaseIdArrayItem] | None): A list of Archicad databases.\n    \"\"\"\n    params_dict = {\n            'elementType': element_type,\n            'filters': filters,\n            'databases': databases,\n        }\n    validated_params = GetElementsByTypeParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetElementsByType\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetElementsByTypeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetElementsByTypeParameters",
          "GetElementsByTypeResult"
        ],
        "type_model_dependencies": [
          "DatabaseIdArrayItem",
          "ElementFilter",
          "ElementType"
        ]
      },
      {
        "name": "GetGDLParametersOfElements",
        "group": "Element Commands",
        "description": "Gets all the GDL parameters (name, type, value) of the given elements.",
        "version": "1.0.8",
        "source": "tapir",
        "method_code": "def get_gdl_parameters_of_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> GetGDLParametersOfElementsResult:\n    \"\"\"\n    Gets all the GDL parameters (name, type, value) of the given elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = GetGDLParametersOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetGDLParametersOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetGDLParametersOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetGDLParametersOfElementsParameters",
          "GetGDLParametersOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "GetSelectedElements",
        "group": "Element Commands",
        "description": "Gets the list of the currently selected elements.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def get_selected_elements(\n    self\n) -> GetSelectedElementsResult:\n    \"\"\"\n    Gets the list of the currently selected elements.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetSelectedElements\")\n    return GetSelectedElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetSelectedElementsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetSubelementsOfHierarchicalElements",
        "group": "Element Commands",
        "description": "Gets the subelements of the given hierarchical elements.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def get_subelements_of_hierarchical_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> GetSubelementsOfHierarchicalElementsResult:\n    \"\"\"\n    Gets the subelements of the given hierarchical elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = GetSubelementsOfHierarchicalElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetSubelementsOfHierarchicalElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetSubelementsOfHierarchicalElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetSubelementsOfHierarchicalElementsParameters",
          "GetSubelementsOfHierarchicalElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "GetZoneBoundaries",
        "group": "Element Commands",
        "description": "Gets the boundaries of the given Zone (connected elements, neighbour zones, etc.).",
        "version": "1.2.3",
        "source": "tapir",
        "method_code": "def get_zone_boundaries(\n    self,\n    zone_element_id: ElementId\n) -> GetZoneBoundariesResult:\n    \"\"\"\n    Gets the boundaries of the given Zone (connected elements, neighbour zones, etc.).\n\n    Args:\n        zone_element_id (ElementId)\n    \"\"\"\n    params_dict = {\n            'zoneElementId': zone_element_id,\n        }\n    validated_params = GetZoneBoundariesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetZoneBoundaries\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetZoneBoundariesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetZoneBoundariesParameters",
          "GetZoneBoundariesResult"
        ],
        "type_model_dependencies": [
          "ElementId"
        ]
      },
      {
        "name": "HighlightElements",
        "group": "Element Commands",
        "description": "Highlights the elements given in the elements array. In case of empty elements array removes all previously set highlights.",
        "version": "1.0.3",
        "source": "tapir",
        "method_code": "def highlight_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    highlighted_colors: list[HighlightedColor],\n    wireframe_3d: bool | None = None,\n    non_highlighted_color: list[int] | None = None\n) -> None:\n    \"\"\"\n    Highlights the elements given in the elements array. In case of empty elements array\n    removes all previously set highlights.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        highlighted_colors (list[HighlightedColor]): A list of colors to highlight elements.\n        wireframe_3d (bool | None): Optional parameter. Switch non highlighted elements in\n            the 3D window to wireframe.\n        non_highlighted_color (list[int] | None): Optional parameter. Color of the non\n            highlighted elements as an [r, g, b, a] array. Each component must be in the\n            0-255 range. (Constraints: max_length=4, min_length=4)\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'highlightedColors': highlighted_colors,\n            'wireframe3D': wireframe_3d,\n            'nonHighlightedColor': non_highlighted_color,\n        }\n    validated_params = HighlightElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"HighlightElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "HighlightElementsParameters"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "HighlightedColor"
        ]
      },
      {
        "name": "MoveElements",
        "group": "Element Commands",
        "description": "Moves elements with a given vector.",
        "version": "1.0.2",
        "source": "tapir",
        "method_code": "def move_elements(\n    self,\n    elements_with_move_vectors: list[ElementsWithMoveVector]\n) -> MoveElementsResult:\n    \"\"\"\n    Moves elements with a given vector.\n\n    Args:\n        elements_with_move_vectors (list[ElementsWithMoveVector]): The elements with move\n            vector pairs.\n    \"\"\"\n    params_dict = {\n            'elementsWithMoveVectors': elements_with_move_vectors,\n        }\n    validated_params = MoveElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"MoveElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return MoveElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "MoveElementsParameters",
          "MoveElementsResult"
        ],
        "type_model_dependencies": [
          "ElementsWithMoveVector"
        ]
      },
      {
        "name": "SetClassificationsOfElements",
        "group": "Element Commands",
        "description": "Sets the classifications of elements. In order to set the classification of an element to unclassified, omit the classificationItemId field. It works for subelements of hierarchal elements also.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def set_classifications_of_elements(\n    self,\n    element_classifications: list[ElementClassification]\n) -> SetClassificationsOfElementsResult:\n    \"\"\"\n    Sets the classifications of elements. In order to set the classification of an element\n    to unclassified, omit the classificationItemId field. It works for subelements of\n    hierarchal elements also.\n\n    Args:\n        element_classifications (list[ElementClassification]): A list of element\n            classification identifiers.\n    \"\"\"\n    params_dict = {\n            'elementClassifications': element_classifications,\n        }\n    validated_params = SetClassificationsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetClassificationsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetClassificationsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetClassificationsOfElementsParameters",
          "SetClassificationsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementClassification"
        ]
      },
      {
        "name": "SetDetailsOfElements",
        "group": "Element Commands",
        "description": "Sets the details of the given elements (floor, layer, order etc).",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def set_details_of_elements(\n    self,\n    elements_with_details: list[ElementsWithDetail]\n) -> SetDetailsOfElementsResult:\n    \"\"\"\n    Sets the details of the given elements (floor, layer, order etc).\n\n    Args:\n        elements_with_details (list[ElementsWithDetail]): The elements with parameters.\n    \"\"\"\n    params_dict = {\n            'elementsWithDetails': elements_with_details,\n        }\n    validated_params = SetDetailsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetDetailsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetDetailsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetDetailsOfElementsParameters",
          "SetDetailsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementsWithDetail"
        ]
      },
      {
        "name": "SetGDLParametersOfElements",
        "group": "Element Commands",
        "description": "Sets the given GDL parameters of the given elements.",
        "version": "1.0.8",
        "source": "tapir",
        "method_code": "def set_gdl_parameters_of_elements(\n    self,\n    elements_with_gdl_parameters: list[ElementsWithGDLParameter]\n) -> SetGDLParametersOfElementsResult:\n    \"\"\"\n    Sets the given GDL parameters of the given elements.\n\n    Args:\n        elements_with_gdl_parameters (list[ElementsWithGDLParameter]): The elements with GDL\n            parameters dictionary pairs.\n    \"\"\"\n    params_dict = {\n            'elementsWithGDLParameters': elements_with_gdl_parameters,\n        }\n    validated_params = SetGDLParametersOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetGDLParametersOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetGDLParametersOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetGDLParametersOfElementsParameters",
          "SetGDLParametersOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementsWithGDLParameter"
        ]
      }
    ],
    "Attribute Commands": [
      {
        "name": "CreateBuildingMaterials",
        "group": "Attribute Commands",
        "description": "Creates Building Material attributes based on the given parameters.",
        "version": "1.0.1",
        "source": "tapir",
        "method_code": "def create_building_materials(\n    self,\n    building_material_data_array: list[BuildingMaterialDataArrayItem],\n    overwrite_existing: bool | None = None\n) -> CreateBuildingMaterialsResult:\n    \"\"\"\n    Creates Building Material attributes based on the given parameters.\n\n    Args:\n        building_material_data_array (list[BuildingMaterialDataArrayItem]): Array of data to\n            create new Building Materials.\n        overwrite_existing (bool | None): Overwrite the Building Material if exists with the\n            same name. The default is false.\n    \"\"\"\n    params_dict = {\n            'buildingMaterialDataArray': building_material_data_array,\n            'overwriteExisting': overwrite_existing,\n        }\n    validated_params = CreateBuildingMaterialsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateBuildingMaterials\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateBuildingMaterialsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateBuildingMaterialsParameters",
          "CreateBuildingMaterialsResult"
        ],
        "type_model_dependencies": [
          "BuildingMaterialDataArrayItem"
        ]
      },
      {
        "name": "CreateComposites",
        "group": "Attribute Commands",
        "description": "Creates Composite attributes based on the given parameters.",
        "version": "1.0.2",
        "source": "tapir",
        "method_code": "def create_composites(\n    self,\n    composite_data_array: list[CompositeDataArrayItem],\n    overwrite_existing: bool | None = None\n) -> CreateCompositesResult:\n    \"\"\"\n    Creates Composite attributes based on the given parameters.\n\n    Args:\n        composite_data_array (list[CompositeDataArrayItem]): Array of data to create\n            Composites.\n        overwrite_existing (bool | None): Overwrite the Composite if exists with the same\n            name. The default is false.\n    \"\"\"\n    params_dict = {\n            'compositeDataArray': composite_data_array,\n            'overwriteExisting': overwrite_existing,\n        }\n    validated_params = CreateCompositesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateComposites\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateCompositesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateCompositesParameters",
          "CreateCompositesResult"
        ],
        "type_model_dependencies": [
          "CompositeDataArrayItem"
        ]
      },
      {
        "name": "CreateLayers",
        "group": "Attribute Commands",
        "description": "Creates Layer attributes based on the given parameters.",
        "version": "1.0.3",
        "source": "tapir",
        "method_code": "def create_layers(\n    self,\n    layer_data_array: list[LayerDataArrayItem],\n    overwrite_existing: bool | None = None\n) -> CreateLayersResult:\n    \"\"\"\n    Creates Layer attributes based on the given parameters.\n\n    Args:\n        layer_data_array (list[LayerDataArrayItem]): Array of data to create new Layers.\n        overwrite_existing (bool | None): Overwrite the Layer if exists with the same name.\n            The default is false.\n    \"\"\"\n    params_dict = {\n            'layerDataArray': layer_data_array,\n            'overwriteExisting': overwrite_existing,\n        }\n    validated_params = CreateLayersParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateLayers\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateLayersResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateLayersParameters",
          "CreateLayersResult"
        ],
        "type_model_dependencies": [
          "LayerDataArrayItem"
        ]
      },
      {
        "name": "CreateSurfaces",
        "group": "Attribute Commands",
        "description": "Creates Surface attributes based on the given parameters.",
        "version": "1.2.2",
        "source": "tapir",
        "method_code": "def create_surfaces(\n    self,\n    surface_data_array: list[SurfaceDataArrayItem],\n    overwrite_existing: bool | None = None\n) -> CreateSurfacesResult:\n    \"\"\"\n    Creates Surface attributes based on the given parameters.\n\n    Args:\n        surface_data_array (list[SurfaceDataArrayItem]): Array of data to create new\n            surfaces.\n        overwrite_existing (bool | None): Overwrite the Surface if exists with the same\n            name. The default is false.\n    \"\"\"\n    params_dict = {\n            'surfaceDataArray': surface_data_array,\n            'overwriteExisting': overwrite_existing,\n        }\n    validated_params = CreateSurfacesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreateSurfaces\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateSurfacesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateSurfacesParameters",
          "CreateSurfacesResult"
        ],
        "type_model_dependencies": [
          "SurfaceDataArrayItem"
        ]
      },
      {
        "name": "GetAttributesByType",
        "group": "Attribute Commands",
        "description": "Returns the details of every attribute of the given type.",
        "version": "1.1.3",
        "source": "tapir",
        "method_code": "def get_attributes_by_type(\n    self,\n    attribute_type: AttributeType\n) -> GetAttributesByTypeResult:\n    \"\"\"\n    Returns the details of every attribute of the given type.\n\n    Args:\n        attribute_type (AttributeType)\n    \"\"\"\n    params_dict = {\n            'attributeType': attribute_type,\n        }\n    validated_params = GetAttributesByTypeParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetAttributesByType\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAttributesByTypeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAttributesByTypeParameters",
          "GetAttributesByTypeResult"
        ],
        "type_model_dependencies": [
          "AttributeType"
        ]
      },
      {
        "name": "GetBuildingMaterialPhysicalProperties",
        "group": "Attribute Commands",
        "description": "Retrieves the physical properties of the given Building Materials.",
        "version": "0.1.3",
        "source": "tapir",
        "method_code": "def get_building_material_physical_properties(\n    self,\n    attribute_ids: list[AttributeIdArrayItem]\n) -> GetBuildingMaterialPhysicalPropertiesResult:\n    \"\"\"\n    Retrieves the physical properties of the given Building Materials.\n\n    Args:\n        attribute_ids (list[AttributeIdArrayItem]): A list of attributes.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetBuildingMaterialPhysicalPropertiesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetBuildingMaterialPhysicalProperties\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetBuildingMaterialPhysicalPropertiesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetBuildingMaterialPhysicalPropertiesParameters",
          "GetBuildingMaterialPhysicalPropertiesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdArrayItem"
        ]
      }
    ],
    "Property Commands": [
      {
        "name": "CreatePropertyDefinitions",
        "group": "Property Commands",
        "description": "Creates Custom Property Definitions based on the given parameters.",
        "version": "1.0.9",
        "source": "tapir",
        "method_code": "def create_property_definitions(\n    self,\n    property_definitions: list[PropertyDefinitionArrayItem]\n) -> CreatePropertyDefinitionsResult:\n    \"\"\"\n    Creates Custom Property Definitions based on the given parameters.\n\n    Args:\n        property_definitions (list[PropertyDefinitionArrayItem]): The parameters of the new\n            properties.\n    \"\"\"\n    params_dict = {\n            'propertyDefinitions': property_definitions,\n        }\n    validated_params = CreatePropertyDefinitionsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreatePropertyDefinitions\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreatePropertyDefinitionsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreatePropertyDefinitionsParameters",
          "CreatePropertyDefinitionsResult"
        ],
        "type_model_dependencies": [
          "PropertyDefinitionArrayItem"
        ]
      },
      {
        "name": "CreatePropertyGroups",
        "group": "Property Commands",
        "description": "Creates Property Groups based on the given parameters.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def create_property_groups(\n    self,\n    property_groups: list[PropertyGroupArrayItem]\n) -> CreatePropertyGroupsResult:\n    \"\"\"\n    Creates Property Groups based on the given parameters.\n\n    Args:\n        property_groups (list[PropertyGroupArrayItem]): The parameters of the new property\n            groups.\n    \"\"\"\n    params_dict = {\n            'propertyGroups': property_groups,\n        }\n    validated_params = CreatePropertyGroupsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"CreatePropertyGroups\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreatePropertyGroupsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreatePropertyGroupsParameters",
          "CreatePropertyGroupsResult"
        ],
        "type_model_dependencies": [
          "PropertyGroupArrayItem"
        ]
      },
      {
        "name": "DeletePropertyDefinitions",
        "group": "Property Commands",
        "description": "Deletes the given Custom Property Definitions.",
        "version": "1.0.9",
        "source": "tapir",
        "method_code": "def delete_property_definitions(\n    self,\n    property_ids: list[PropertyIdArrayItem]\n) -> DeletePropertyDefinitionsResult:\n    \"\"\"\n    Deletes the given Custom Property Definitions.\n\n    Args:\n        property_ids (list[PropertyIdArrayItem]): The identifiers of properties to delete.\n    \"\"\"\n    params_dict = {\n            'propertyIds': property_ids,\n        }\n    validated_params = DeletePropertyDefinitionsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"DeletePropertyDefinitions\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return DeletePropertyDefinitionsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "DeletePropertyDefinitionsParameters",
          "DeletePropertyDefinitionsResult"
        ],
        "type_model_dependencies": [
          "PropertyIdArrayItem"
        ]
      },
      {
        "name": "DeletePropertyGroups",
        "group": "Property Commands",
        "description": "Deletes the given Custom Property Groups.",
        "version": "1.0.9",
        "source": "tapir",
        "method_code": "def delete_property_groups(\n    self,\n    property_group_ids: list[PropertyGroupIdArrayItem]\n) -> DeletePropertyGroupsResult:\n    \"\"\"\n    Deletes the given Custom Property Groups.\n\n    Args:\n        property_group_ids (list[PropertyGroupIdArrayItem]): The identifiers of property\n            groups to delete.\n    \"\"\"\n    params_dict = {\n            'propertyGroupIds': property_group_ids,\n        }\n    validated_params = DeletePropertyGroupsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"DeletePropertyGroups\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return DeletePropertyGroupsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "DeletePropertyGroupsParameters",
          "DeletePropertyGroupsResult"
        ],
        "type_model_dependencies": [
          "PropertyGroupIdArrayItem"
        ]
      },
      {
        "name": "GetAllProperties",
        "group": "Property Commands",
        "description": "Returns all user defined and built-in properties.",
        "version": "1.1.3",
        "source": "tapir",
        "method_code": "def get_all_properties(\n    self\n) -> GetAllPropertiesResult:\n    \"\"\"\n    Returns all user defined and built-in properties.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetAllProperties\")\n    return GetAllPropertiesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllPropertiesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetPropertyValuesOfAttributes",
        "group": "Property Commands",
        "description": "Returns the property values of the attributes for the given property.",
        "version": "1.1.8",
        "source": "tapir",
        "method_code": "def get_property_values_of_attributes(\n    self,\n    attribute_ids: list[AttributeIdArrayItem],\n    properties: list[PropertyIdArrayItem]\n) -> GetPropertyValuesOfAttributesResult:\n    \"\"\"\n    Returns the property values of the attributes for the given property.\n\n    Args:\n        attribute_ids (list[AttributeIdArrayItem]): A list of attributes.\n        properties (list[PropertyIdArrayItem]): A list of property identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n            'properties': properties,\n        }\n    validated_params = GetPropertyValuesOfAttributesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetPropertyValuesOfAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPropertyValuesOfAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPropertyValuesOfAttributesParameters",
          "GetPropertyValuesOfAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdArrayItem",
          "PropertyIdArrayItem"
        ]
      },
      {
        "name": "GetPropertyValuesOfElements",
        "group": "Property Commands",
        "description": "Returns the property values of the elements for the given property. It works for subelements of hierarchal elements also.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def get_property_values_of_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    properties: list[PropertyIdArrayItem]\n) -> GetPropertyValuesOfElementsResult:\n    \"\"\"\n    Returns the property values of the elements for the given property. It works for\n    subelements of hierarchal elements also.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        properties (list[PropertyIdArrayItem]): A list of property identifiers.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'properties': properties,\n        }\n    validated_params = GetPropertyValuesOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetPropertyValuesOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPropertyValuesOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPropertyValuesOfElementsParameters",
          "GetPropertyValuesOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "PropertyIdArrayItem"
        ]
      },
      {
        "name": "SetPropertyValuesOfAttributes",
        "group": "Property Commands",
        "description": "Sets the property values of attributes.",
        "version": "1.1.8",
        "source": "tapir",
        "method_code": "def set_property_values_of_attributes(\n    self,\n    attribute_property_values: list[AttributePropertyValue]\n) -> SetPropertyValuesOfAttributesResult:\n    \"\"\"\n    Sets the property values of attributes.\n\n    Args:\n        attribute_property_values (list[AttributePropertyValue]): A list of attribute\n            property values.\n    \"\"\"\n    params_dict = {\n            'attributePropertyValues': attribute_property_values,\n        }\n    validated_params = SetPropertyValuesOfAttributesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetPropertyValuesOfAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetPropertyValuesOfAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetPropertyValuesOfAttributesParameters",
          "SetPropertyValuesOfAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributePropertyValue"
        ]
      },
      {
        "name": "SetPropertyValuesOfElements",
        "group": "Property Commands",
        "description": "Sets the property values of elements. It works for subelements of hierarchal elements also.",
        "version": "1.0.6",
        "source": "tapir",
        "method_code": "def set_property_values_of_elements(\n    self,\n    element_property_values: list[ElementPropertyValue]\n) -> SetPropertyValuesOfElementsResult:\n    \"\"\"\n    Sets the property values of elements. It works for subelements of hierarchal elements\n    also.\n\n    Args:\n        element_property_values (list[ElementPropertyValue]): A list of element property\n            values.\n    \"\"\"\n    params_dict = {\n            'elementPropertyValues': element_property_values,\n        }\n    validated_params = SetPropertyValuesOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetPropertyValuesOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetPropertyValuesOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetPropertyValuesOfElementsParameters",
          "SetPropertyValuesOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementPropertyValue"
        ]
      }
    ],
    "Developer Commands": [
      {
        "name": "GenerateDocumentation",
        "group": "Developer Commands",
        "description": "Generates files for the documentation. Used by Tapir developers only.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def generate_documentation(\n    self,\n    destination_folder: str\n) -> None:\n    \"\"\"\n    Generates files for the documentation. Used by Tapir developers only.\n\n    Args:\n        destination_folder (str): Destination folder for the generated documentation files.\n            (Constraints: min_length=1)\n    \"\"\"\n    params_dict = {\n            'destinationFolder': destination_folder,\n        }\n    validated_params = GenerateDocumentationParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GenerateDocumentation\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "GenerateDocumentationParameters"
        ],
        "type_model_dependencies": []
      }
    ],
    "Application Commands": [
      {
        "name": "GetAddOnVersion",
        "group": "Application Commands",
        "description": "Retrieves the version of the Tapir Additional JSON Commands Add-On.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def get_add_on_version(\n    self\n) -> GetAddOnVersionResult:\n    \"\"\"\n    Retrieves the version of the Tapir Additional JSON Commands Add-On.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetAddOnVersion\")\n    return GetAddOnVersionResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAddOnVersionResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetArchicadLocation",
        "group": "Application Commands",
        "description": "Retrieves the location of the currently running Archicad executable.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def get_archicad_location(\n    self\n) -> GetArchicadLocationResult:\n    \"\"\"\n    Retrieves the location of the currently running Archicad executable.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetArchicadLocation\")\n    return GetArchicadLocationResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetArchicadLocationResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetCurrentWindowType",
        "group": "Application Commands",
        "description": "Returns the type of the current (active) window.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def get_current_window_type(\n    self\n) -> GetCurrentWindowTypeResult:\n    \"\"\"\n    Returns the type of the current (active) window.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetCurrentWindowType\")\n    return GetCurrentWindowTypeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetCurrentWindowTypeResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "QuitArchicad",
        "group": "Application Commands",
        "description": "Performs a quit operation on the currently running Archicad instance.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def quit_archicad(\n    self\n) -> None:\n    \"\"\"\n    Performs a quit operation on the currently running Archicad instance.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"QuitArchicad\")\n    return None",
        "command_model_dependencies": [],
        "type_model_dependencies": []
      }
    ],
    "Revision Management Commands": [
      {
        "name": "GetCurrentRevisionChangesOfLayouts",
        "group": "Revision Management Commands",
        "description": "Retrieves all changes belong to the last revision of the given layouts.",
        "version": "1.1.9",
        "source": "tapir",
        "method_code": "def get_current_revision_changes_of_layouts(\n    self,\n    layout_database_ids: list[DatabaseIdArrayItem]\n) -> GetCurrentRevisionChangesOfLayoutsResult:\n    \"\"\"\n    Retrieves all changes belong to the last revision of the given layouts.\n\n    Args:\n        layout_database_ids (list[DatabaseIdArrayItem]): A list of Archicad databases.\n    \"\"\"\n    params_dict = {\n            'layoutDatabaseIds': layout_database_ids,\n        }\n    validated_params = GetCurrentRevisionChangesOfLayoutsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetCurrentRevisionChangesOfLayouts\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetCurrentRevisionChangesOfLayoutsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetCurrentRevisionChangesOfLayoutsParameters",
          "GetCurrentRevisionChangesOfLayoutsResult"
        ],
        "type_model_dependencies": [
          "DatabaseIdArrayItem"
        ]
      },
      {
        "name": "GetDocumentRevisions",
        "group": "Revision Management Commands",
        "description": "Retrieves all document revisions.",
        "version": "1.1.9",
        "source": "tapir",
        "method_code": "def get_document_revisions(\n    self\n) -> GetDocumentRevisionsResult:\n    \"\"\"\n    Retrieves all document revisions.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetDocumentRevisions\")\n    return GetDocumentRevisionsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetDocumentRevisionsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetRevisionChanges",
        "group": "Revision Management Commands",
        "description": "Retrieves all changes.",
        "version": "1.1.9",
        "source": "tapir",
        "method_code": "def get_revision_changes(\n    self\n) -> GetRevisionChangesResult:\n    \"\"\"\n    Retrieves all changes.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetRevisionChanges\")\n    return GetRevisionChangesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetRevisionChangesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetRevisionChangesOfElements",
        "group": "Revision Management Commands",
        "description": "Retrieves the changes belong to the given elements.",
        "version": "1.1.9",
        "source": "tapir",
        "method_code": "def get_revision_changes_of_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> GetRevisionChangesOfElementsResult:\n    \"\"\"\n    Retrieves the changes belong to the given elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = GetRevisionChangesOfElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetRevisionChangesOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetRevisionChangesOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetRevisionChangesOfElementsParameters",
          "GetRevisionChangesOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "GetRevisionIssues",
        "group": "Revision Management Commands",
        "description": "Retrieves all issues.",
        "version": "1.1.9",
        "source": "tapir",
        "method_code": "def get_revision_issues(\n    self\n) -> GetRevisionIssuesResult:\n    \"\"\"\n    Retrieves all issues.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetRevisionIssues\")\n    return GetRevisionIssuesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetRevisionIssuesResult"
        ],
        "type_model_dependencies": []
      }
    ],
    "Navigator Commands": [
      {
        "name": "GetDatabaseIdFromNavigatorItemId",
        "group": "Navigator Commands",
        "description": "Gets the ID of the database associated with the supplied navigator item id",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def get_database_id_from_navigator_item_id(\n    self,\n    navigator_item_ids: list[NavigatorItemIdArrayItem]\n) -> GetDatabaseIdFromNavigatorItemIdResult:\n    \"\"\"\n    Gets the ID of the database associated with the supplied navigator item id\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdArrayItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetDatabaseIdFromNavigatorItemIdParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetDatabaseIdFromNavigatorItemId\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetDatabaseIdFromNavigatorItemIdResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetDatabaseIdFromNavigatorItemIdParameters",
          "GetDatabaseIdFromNavigatorItemIdResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdArrayItem"
        ]
      },
      {
        "name": "GetModelViewOptions",
        "group": "Navigator Commands",
        "description": "Gets all model view options",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def get_model_view_options(\n    self\n) -> GetModelViewOptionsResult:\n    \"\"\"\n    Gets all model view options\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetModelViewOptions\")\n    return GetModelViewOptionsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetModelViewOptionsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetView2DTransformations",
        "group": "Navigator Commands",
        "description": "Get zoom and rotation of 2D views",
        "version": "1.1.7",
        "source": "tapir",
        "method_code": "def get_view_2d_transformations(\n    self,\n    databases: list[DatabaseIdArrayItem] | None = None\n) -> GetView2DTransformationsResult:\n    \"\"\"\n    Get zoom and rotation of 2D views\n\n    Args:\n        databases (list[DatabaseIdArrayItem] | None): A list of Archicad databases.\n    \"\"\"\n    params_dict = {\n            'databases': databases,\n        }\n    validated_params = GetView2DTransformationsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetView2DTransformations\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetView2DTransformationsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetView2DTransformationsParameters",
          "GetView2DTransformationsResult"
        ],
        "type_model_dependencies": [
          "DatabaseIdArrayItem"
        ]
      },
      {
        "name": "GetViewSettings",
        "group": "Navigator Commands",
        "description": "Gets the view settings of navigator items",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def get_view_settings(\n    self,\n    navigator_item_ids: list[NavigatorItemIdArrayItem]\n) -> GetViewSettingsResult:\n    \"\"\"\n    Gets the view settings of navigator items\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdArrayItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetViewSettingsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"GetViewSettings\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetViewSettingsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetViewSettingsParameters",
          "GetViewSettingsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdArrayItem"
        ]
      },
      {
        "name": "PublishPublisherSet",
        "group": "Navigator Commands",
        "description": "Performs a publish operation on the currently opened project. Only the given publisher set will be published.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def publish_publisher_set(\n    self,\n    publisher_set_name: str,\n    output_path: str | None = None\n) -> None:\n    \"\"\"\n    Performs a publish operation on the currently opened project. Only the given publisher\n    set will be published.\n\n    Args:\n        publisher_set_name (str): The name of the publisher set. (Constraints: min_length=1)\n        output_path (str | None): Full local or LAN path for publishing. Optional, by\n            default the path set in the settings of the publiser set will be used.\n            (Constraints: min_length=1)\n    \"\"\"\n    params_dict = {\n            'publisherSetName': publisher_set_name,\n            'outputPath': output_path,\n        }\n    validated_params = PublishPublisherSetParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"PublishPublisherSet\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "PublishPublisherSetParameters"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "SetViewSettings",
        "group": "Navigator Commands",
        "description": "Sets the view settings of navigator items",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def set_view_settings(\n    self,\n    navigator_item_ids_with_view_settings: list[NavigatorItemIdsWithViewSetting]\n) -> SetViewSettingsResult:\n    \"\"\"\n    Sets the view settings of navigator items\n\n    Args:\n        navigator_item_ids_with_view_settings (list[NavigatorItemIdsWithViewSetting])\n    \"\"\"\n    params_dict = {\n            'navigatorItemIdsWithViewSettings': navigator_item_ids_with_view_settings,\n        }\n    validated_params = SetViewSettingsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetViewSettings\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetViewSettingsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetViewSettingsParameters",
          "SetViewSettingsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdsWithViewSetting"
        ]
      },
      {
        "name": "UpdateDrawings",
        "group": "Navigator Commands",
        "description": "Performs a drawing update on the given elements.",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def update_drawings(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> None:\n    \"\"\"\n    Performs a drawing update on the given elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = UpdateDrawingsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"UpdateDrawings\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "UpdateDrawingsParameters"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      }
    ],
    "Project Commands": [
      {
        "name": "GetGeoLocation",
        "group": "Project Commands",
        "description": "Gets the project location details.",
        "version": "1.1.6",
        "source": "tapir",
        "method_code": "def get_geo_location(\n    self\n) -> GetGeoLocationResult:\n    \"\"\"\n    Gets the project location details.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetGeoLocation\")\n    return GetGeoLocationResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetGeoLocationResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetHotlinks",
        "group": "Project Commands",
        "description": "Gets the file system locations (path) of the hotlink modules. The hotlinks can have tree hierarchy in the project.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def get_hotlinks(\n    self\n) -> GetHotlinksResult:\n    \"\"\"\n    Gets the file system locations (path) of the hotlink modules. The hotlinks can have tree\n    hierarchy in the project.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetHotlinks\")\n    return GetHotlinksResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetHotlinksResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetProjectInfo",
        "group": "Project Commands",
        "description": "Retrieves information about the currently loaded project.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def get_project_info(\n    self\n) -> GetProjectInfoResult:\n    \"\"\"\n    Retrieves information about the currently loaded project.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetProjectInfo\")\n    return GetProjectInfoResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetProjectInfoResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetProjectInfoFields",
        "group": "Project Commands",
        "description": "Retrieves the names and values of all project info fields.",
        "version": "0.1.2",
        "source": "tapir",
        "method_code": "def get_project_info_fields(\n    self\n) -> GetProjectInfoFieldsResult:\n    \"\"\"\n    Retrieves the names and values of all project info fields.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetProjectInfoFields\")\n    return GetProjectInfoFieldsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetProjectInfoFieldsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "GetStories",
        "group": "Project Commands",
        "description": "Retrieves information about the story sructure of the currently loaded project.",
        "version": "1.1.5",
        "source": "tapir",
        "method_code": "def get_stories(\n    self\n) -> GetStoriesResult:\n    \"\"\"\n    Retrieves information about the story sructure of the currently loaded project.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"GetStories\")\n    return GetStoriesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetStoriesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "OpenProject",
        "group": "Project Commands",
        "description": "Opens the given project.",
        "version": "1.0.7",
        "source": "tapir",
        "method_code": "def open_project(\n    self,\n    project_file_path: str\n) -> None:\n    \"\"\"\n    Opens the given project.\n\n    Args:\n        project_file_path (str): The target project file to open.\n    \"\"\"\n    params_dict = {\n            'projectFilePath': project_file_path,\n        }\n    validated_params = OpenProjectParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"OpenProject\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "OpenProjectParameters"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "SetProjectInfoField",
        "group": "Project Commands",
        "description": "Sets the value of a project info field.",
        "version": "0.1.2",
        "source": "tapir",
        "method_code": "def set_project_info_field(\n    self,\n    project_info_id: str,\n    project_info_value: str\n) -> None:\n    \"\"\"\n    Sets the value of a project info field.\n\n    Args:\n        project_info_id (str): The id of the project info field. (Constraints: min_length=1)\n        project_info_value (str): The new value of the project info field. (Constraints:\n            min_length=1)\n    \"\"\"\n    params_dict = {\n            'projectInfoId': project_info_id,\n            'projectInfoValue': project_info_value,\n        }\n    validated_params = SetProjectInfoFieldParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetProjectInfoField\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "SetProjectInfoFieldParameters"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "SetStories",
        "group": "Project Commands",
        "description": "Sets the story sructure of the currently loaded project.",
        "version": "1.1.5",
        "source": "tapir",
        "method_code": "def set_stories(\n    self,\n    stories: list[StorySettings]\n) -> None:\n    \"\"\"\n    Sets the story sructure of the currently loaded project.\n\n    Args:\n        stories (list[StorySettings]): A list of story settings, used as input for creating\n            or modifying multiple stories.\n    \"\"\"\n    params_dict = {\n            'stories': stories,\n        }\n    validated_params = SetStoriesParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"SetStories\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "SetStoriesParameters"
        ],
        "type_model_dependencies": [
          "StorySettings"
        ]
      }
    ],
    "Teamwork Commands": [
      {
        "name": "ReleaseElements",
        "group": "Teamwork Commands",
        "description": "Releases elements in Teamwork mode.",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def release_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> None:\n    \"\"\"\n    Releases elements in Teamwork mode.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = ReleaseElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"ReleaseElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "ReleaseElementsParameters"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "ReserveElements",
        "group": "Teamwork Commands",
        "description": "Reserves elements in Teamwork mode.",
        "version": "1.1.4",
        "source": "tapir",
        "method_code": "def reserve_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> ReserveElementsResult:\n    \"\"\"\n    Reserves elements in Teamwork mode.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = ReserveElementsParameters(**params_dict)\n    response_dict = self._core.post_tapir_command(\n        \"ReserveElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return ReserveElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "ReserveElementsParameters",
          "ReserveElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "TeamworkReceive",
        "group": "Teamwork Commands",
        "description": "Performs a receive operation on the currently opened Teamwork project.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def teamwork_receive(\n    self\n) -> None:\n    \"\"\"\n    Performs a receive operation on the currently opened Teamwork project.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"TeamworkReceive\")\n    return None",
        "command_model_dependencies": [],
        "type_model_dependencies": []
      },
      {
        "name": "TeamworkSend",
        "group": "Teamwork Commands",
        "description": "Performs a send operation on the currently opened Teamwork project.",
        "version": "0.1.0",
        "source": "tapir",
        "method_code": "def teamwork_send(\n    self\n) -> None:\n    \"\"\"\n    Performs a send operation on the currently opened Teamwork project.\n    \"\"\"\n    response_dict = self._core.post_tapir_command(\"TeamworkSend\")\n    return None",
        "command_model_dependencies": [],
        "type_model_dependencies": []
      }
    ]
  },
  "official": {
    "View Map Commands": [
      {
        "name": "API.CloneProjectMapItemToViewMap",
        "description": "Clones a project map item to the view map.",
        "group": "View Map Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def clone_project_map_item_to_view_map(\n    self,\n    project_map_navigator_item_id: NavigatorItemId,\n    parent_navigator_item_id: NavigatorItemId\n) -> CloneProjectMapItemToViewMapResult:\n    \"\"\"\n    Clones a project map item to the view map.\n\n    Args:\n        project_map_navigator_item_id (NavigatorItemId): The ID of the navigator item to be\n            cloned. Only navigator items from the project map can be cloned.\n        parent_navigator_item_id (NavigatorItemId): The ID of the navigator item below which\n            the new view will be inserted. Only navigator items from the view map are\n            allowed.\n    \"\"\"\n    params_dict = {\n            'projectMapNavigatorItemId': project_map_navigator_item_id,\n            'parentNavigatorItemId': parent_navigator_item_id,\n        }\n    validated_params = CloneProjectMapItemToViewMapParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.CloneProjectMapItemToViewMap\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CloneProjectMapItemToViewMapResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CloneProjectMapItemToViewMapParameters",
          "CloneProjectMapItemToViewMapResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemId"
        ]
      },
      {
        "name": "API.CreateViewMapFolder",
        "description": "Creates a view folder item at the given position in the navigator tree.",
        "group": "View Map Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def create_view_map_folder(\n    self,\n    folder_parameters: FolderParameters,\n    parent_navigator_item_id: NavigatorItemId | None = None,\n    previous_navigator_item_id: NavigatorItemId | None = None\n) -> CreateViewMapFolderResult:\n    \"\"\"\n    Creates a view folder item at the given position in the navigator tree.\n\n    Args:\n        folder_parameters (FolderParameters): This is the name of the new folder.\n        parent_navigator_item_id (NavigatorItemId | None): The newly created folder will be\n            placed under this parent item. If this parameter is not given the folder will be\n            created as the first item in the View Map list.\n        previous_navigator_item_id (NavigatorItemId | None): The newly created folder will\n            be placed after this sibling item. If this parameter is not given the folder\n            will be created as the first item under the parent.\n    \"\"\"\n    params_dict = {\n            'folderParameters': folder_parameters,\n            'parentNavigatorItemId': parent_navigator_item_id,\n            'previousNavigatorItemId': previous_navigator_item_id,\n        }\n    validated_params = CreateViewMapFolderParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.CreateViewMapFolder\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateViewMapFolderResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateViewMapFolderParameters",
          "CreateViewMapFolderResult"
        ],
        "type_model_dependencies": [
          "FolderParameters",
          "NavigatorItemId"
        ]
      }
    ],
    "Attribute Commands": [
      {
        "name": "API.CreateAttributeFolders",
        "description": "Creates attribute folders. To create a folder, its full path has to be provided. The command will create all folders along the path, if they do not exist.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def create_attribute_folders(\n    self,\n    attribute_folders: list[AttributeFolderCreationParameters]\n) -> CreateAttributeFoldersResult:\n    \"\"\"\n    Creates attribute folders. To create a folder, its full path has to be provided. The\n    command will create all folders along the path, if they do not exist.\n\n    Args:\n        attribute_folders (list[AttributeFolderCreationParameters])\n    \"\"\"\n    params_dict = {\n            'attributeFolders': attribute_folders,\n        }\n    validated_params = CreateAttributeFoldersParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.CreateAttributeFolders\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateAttributeFoldersResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateAttributeFoldersParameters",
          "CreateAttributeFoldersResult"
        ],
        "type_model_dependencies": [
          "AttributeFolderCreationParameters"
        ]
      },
      {
        "name": "API.DeleteAttributeFolders",
        "description": "Deletes attribute folders and all the deletable attributes and folders it contains. To delete a folder, its identifier has to be provided.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def delete_attribute_folders(\n    self,\n    attribute_folder_ids: list[AttributeFolderIdWrapperItem]\n) -> DeleteAttributeFoldersResult:\n    \"\"\"\n    Deletes attribute folders and all the deletable attributes and folders it contains. To\n    delete a folder, its identifier has to be provided.\n\n    Args:\n        attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute\n            folder identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeFolderIds': attribute_folder_ids,\n        }\n    validated_params = DeleteAttributeFoldersParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.DeleteAttributeFolders\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return DeleteAttributeFoldersResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "DeleteAttributeFoldersParameters",
          "DeleteAttributeFoldersResult"
        ],
        "type_model_dependencies": [
          "AttributeFolderIdWrapperItem"
        ]
      },
      {
        "name": "API.DeleteAttributes",
        "description": "Deletes attributes.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def delete_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> DeleteAttributesResult:\n    \"\"\"\n    Deletes attributes.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = DeleteAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.DeleteAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return DeleteAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "DeleteAttributesParameters",
          "DeleteAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetActivePenTables",
        "description": "Returns the model view and layout book pen table identifiers.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_active_pen_tables(\n    self\n) -> GetActivePenTablesResult:\n    \"\"\"\n    Returns the model view and layout book pen table identifiers.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.GetActivePenTables\")\n    return GetActivePenTablesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetActivePenTablesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.GetAttributeFolderStructure",
        "description": "Returns the detailed folder structure for the attributes of a given type. If the path is not given, the root folder will be returned",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_attribute_folder_structure(\n    self,\n    attribute_type: AttributeType,\n    path: list[str] | None = None\n) -> GetAttributeFolderStructureResult:\n    \"\"\"\n    Returns the detailed folder structure for the attributes of a given type. If the path is\n    not given, the root folder will be returned\n\n    Args:\n        attribute_type (AttributeType)\n        path (list[str] | None): A list of attribute folder names. May be empty.\n    \"\"\"\n    params_dict = {\n            'attributeType': attribute_type,\n            'path': path,\n        }\n    validated_params = GetAttributeFolderStructureParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAttributeFolderStructure\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAttributeFolderStructureResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAttributeFolderStructureParameters",
          "GetAttributeFolderStructureResult"
        ],
        "type_model_dependencies": [
          "AttributeType"
        ]
      },
      {
        "name": "API.GetAttributeFolders",
        "description": "Returns the detailed attribute folders identified by their Ids.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_attribute_folders(\n    self,\n    attribute_folder_ids: list[AttributeFolderIdWrapperItem]\n) -> GetAttributeFoldersResult:\n    \"\"\"\n    Returns the detailed attribute folders identified by their Ids.\n\n    Args:\n        attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute\n            folder identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeFolderIds': attribute_folder_ids,\n        }\n    validated_params = GetAttributeFoldersParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAttributeFolders\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAttributeFoldersResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAttributeFoldersParameters",
          "GetAttributeFoldersResult"
        ],
        "type_model_dependencies": [
          "AttributeFolderIdWrapperItem"
        ]
      },
      {
        "name": "API.GetAttributesByType",
        "description": "Returns the identifier of every attribute of the given type.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_attributes_by_type(\n    self,\n    attribute_type: AttributeType\n) -> GetAttributesByTypeResult:\n    \"\"\"\n    Returns the identifier of every attribute of the given type.\n\n    Args:\n        attribute_type (AttributeType)\n    \"\"\"\n    params_dict = {\n            'attributeType': attribute_type,\n        }\n    validated_params = GetAttributesByTypeParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAttributesByType\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAttributesByTypeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAttributesByTypeParameters",
          "GetAttributesByTypeResult"
        ],
        "type_model_dependencies": [
          "AttributeType"
        ]
      },
      {
        "name": "API.GetAttributesIndices",
        "description": "Returns the requested indices and guids of attributes.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_attributes_indices(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetAttributesIndicesResult:\n    \"\"\"\n    Returns the requested indices and guids of attributes.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetAttributesIndicesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAttributesIndices\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAttributesIndicesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAttributesIndicesParameters",
          "GetAttributesIndicesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetBuildingMaterialAttributes",
        "description": "Returns the detailed building material attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_building_material_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetBuildingMaterialAttributesResult:\n    \"\"\"\n    Returns the detailed building material attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetBuildingMaterialAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetBuildingMaterialAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetBuildingMaterialAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetBuildingMaterialAttributesParameters",
          "GetBuildingMaterialAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetCompositeAttributes",
        "description": "Returns the detailed composite attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_composite_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetCompositeAttributesResult:\n    \"\"\"\n    Returns the detailed composite attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetCompositeAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetCompositeAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetCompositeAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetCompositeAttributesParameters",
          "GetCompositeAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetFillAttributes",
        "description": "Returns the detailed fill attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_fill_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetFillAttributesResult:\n    \"\"\"\n    Returns the detailed fill attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetFillAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetFillAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetFillAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetFillAttributesParameters",
          "GetFillAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetLayerAttributes",
        "description": "Returns the detailed layer attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_layer_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetLayerAttributesResult:\n    \"\"\"\n    Returns the detailed layer attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetLayerAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetLayerAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetLayerAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetLayerAttributesParameters",
          "GetLayerAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetLayerCombinationAttributes",
        "description": "Returns the detailed layer combination attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_layer_combination_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetLayerCombinationAttributesResult:\n    \"\"\"\n    Returns the detailed layer combination attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetLayerCombinationAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetLayerCombinationAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetLayerCombinationAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetLayerCombinationAttributesParameters",
          "GetLayerCombinationAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetLineAttributes",
        "description": "Returns the detailed line attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_line_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetLineAttributesResult:\n    \"\"\"\n    Returns the detailed line attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetLineAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetLineAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetLineAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetLineAttributesParameters",
          "GetLineAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetPenTableAttributes",
        "description": "Returns the detailed pen table attributes (including their pens) identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_pen_table_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetPenTableAttributesResult:\n    \"\"\"\n    Returns the detailed pen table attributes (including their pens) identified by their\n    GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetPenTableAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetPenTableAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPenTableAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPenTableAttributesParameters",
          "GetPenTableAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetProfileAttributePreview",
        "description": "Returns the preview image of each requested profile attribute in a base64 string format.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_profile_attribute_preview(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem],\n    image_width: int,\n    image_height: int,\n    background_color: RGBColor | None = None\n) -> GetProfileAttributePreviewResult:\n    \"\"\"\n    Returns the preview image of each requested profile attribute in a base64 string format.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n        image_width (int): The width of the preview image.\n        image_height (int): The height of the preview image.\n        background_color (RGBColor | None): The background color of the preview image.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n            'imageWidth': image_width,\n            'imageHeight': image_height,\n            'backgroundColor': background_color,\n        }\n    validated_params = GetProfileAttributePreviewParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetProfileAttributePreview\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetProfileAttributePreviewResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetProfileAttributePreviewParameters",
          "GetProfileAttributePreviewResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem",
          "RGBColor"
        ]
      },
      {
        "name": "API.GetProfileAttributes",
        "description": "Returns the detailed profile attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_profile_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetProfileAttributesResult:\n    \"\"\"\n    Returns the detailed profile attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetProfileAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetProfileAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetProfileAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetProfileAttributesParameters",
          "GetProfileAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetSurfaceAttributes",
        "description": "Returns the detailed surface attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_surface_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetSurfaceAttributesResult:\n    \"\"\"\n    Returns the detailed surface attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetSurfaceAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetSurfaceAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetSurfaceAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetSurfaceAttributesParameters",
          "GetSurfaceAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.GetZoneCategoryAttributes",
        "description": "Returns the detailed zone category attributes identified by their GUIDs.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_zone_category_attributes(\n    self,\n    attribute_ids: list[AttributeIdWrapperItem]\n) -> GetZoneCategoryAttributesResult:\n    \"\"\"\n    Returns the detailed zone category attributes identified by their GUIDs.\n\n    Args:\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n    \"\"\"\n    params_dict = {\n            'attributeIds': attribute_ids,\n        }\n    validated_params = GetZoneCategoryAttributesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetZoneCategoryAttributes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetZoneCategoryAttributesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetZoneCategoryAttributesParameters",
          "GetZoneCategoryAttributesResult"
        ],
        "type_model_dependencies": [
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.MoveAttributesAndFolders",
        "description": "Moves attributes and attribute folders.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def move_attributes_and_folders(\n    self,\n    attribute_folder_ids: list[AttributeFolderIdWrapperItem],\n    attribute_ids: list[AttributeIdWrapperItem],\n    target_folder_id: AttributeFolderId\n) -> None:\n    \"\"\"\n    Moves attributes and attribute folders.\n\n    Args:\n        attribute_folder_ids (list[AttributeFolderIdWrapperItem]): A list of attribute\n            folder identifiers.\n        attribute_ids (list[AttributeIdWrapperItem]): A list of attribute identifiers.\n        target_folder_id (AttributeFolderId)\n    \"\"\"\n    params_dict = {\n            'attributeFolderIds': attribute_folder_ids,\n            'attributeIds': attribute_ids,\n            'targetFolderId': target_folder_id,\n        }\n    validated_params = MoveAttributesAndFoldersParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.MoveAttributesAndFolders\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "MoveAttributesAndFoldersParameters"
        ],
        "type_model_dependencies": [
          "AttributeFolderId",
          "AttributeFolderIdWrapperItem",
          "AttributeIdWrapperItem"
        ]
      },
      {
        "name": "API.RenameAttributeFolders",
        "description": "Rename attribute folder.",
        "group": "Attribute Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def rename_attribute_folders(\n    self,\n    attribute_folder_parameters_list: list[AttributeFolderRenameParameters]\n) -> RenameAttributeFoldersResult:\n    \"\"\"\n    Rename attribute folder.\n\n    Args:\n        attribute_folder_parameters_list (list[AttributeFolderRenameParameters])\n    \"\"\"\n    params_dict = {\n            'attributeFolderParametersList': attribute_folder_parameters_list,\n        }\n    validated_params = RenameAttributeFoldersParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.RenameAttributeFolders\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return RenameAttributeFoldersResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "RenameAttributeFoldersParameters",
          "RenameAttributeFoldersResult"
        ],
        "type_model_dependencies": [
          "AttributeFolderRenameParameters"
        ]
      }
    ],
    "Layout Book Commands": [
      {
        "name": "API.CreateLayout",
        "description": "Creates a new layout.",
        "group": "Layout Book Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def create_layout(\n    self,\n    layout_name: str,\n    layout_parameters: LayoutParameters,\n    master_navigator_item_id: NavigatorItemId,\n    parent_navigator_item_id: NavigatorItemId\n) -> CreateLayoutResult:\n    \"\"\"\n    Creates a new layout.\n\n    Args:\n        layout_name (str): The name of the layout. (Constraints: min_length=1)\n        layout_parameters (LayoutParameters)\n        master_navigator_item_id (NavigatorItemId)\n        parent_navigator_item_id (NavigatorItemId)\n    \"\"\"\n    params_dict = {\n            'layoutName': layout_name,\n            'layoutParameters': layout_parameters,\n            'masterNavigatorItemId': master_navigator_item_id,\n            'parentNavigatorItemId': parent_navigator_item_id,\n        }\n    validated_params = CreateLayoutParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.CreateLayout\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateLayoutResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateLayoutParameters",
          "CreateLayoutResult"
        ],
        "type_model_dependencies": [
          "LayoutParameters",
          "NavigatorItemId"
        ]
      },
      {
        "name": "API.CreateLayoutSubset",
        "description": "Creates a new layout subset.",
        "group": "Layout Book Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def create_layout_subset(\n    self,\n    subset_parameters: Subset,\n    parent_navigator_item_id: NavigatorItemId\n) -> CreateLayoutSubsetResult:\n    \"\"\"\n    Creates a new layout subset.\n\n    Args:\n        subset_parameters (Subset)\n        parent_navigator_item_id (NavigatorItemId)\n    \"\"\"\n    params_dict = {\n            'subsetParameters': subset_parameters,\n            'parentNavigatorItemId': parent_navigator_item_id,\n        }\n    validated_params = CreateLayoutSubsetParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.CreateLayoutSubset\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return CreateLayoutSubsetResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "CreateLayoutSubsetParameters",
          "CreateLayoutSubsetResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemId",
          "Subset"
        ]
      },
      {
        "name": "API.GetLayoutSettings",
        "description": "Returns the parameters (settings) of the given layout.",
        "group": "Layout Book Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_layout_settings(\n    self,\n    layout_navigator_item_id: NavigatorItemId\n) -> GetLayoutSettingsResult:\n    \"\"\"\n    Returns the parameters (settings) of the given layout.\n\n    Args:\n        layout_navigator_item_id (NavigatorItemId)\n    \"\"\"\n    params_dict = {\n            'layoutNavigatorItemId': layout_navigator_item_id,\n        }\n    validated_params = GetLayoutSettingsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetLayoutSettings\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetLayoutSettingsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetLayoutSettingsParameters",
          "GetLayoutSettingsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemId"
        ]
      },
      {
        "name": "API.SetLayoutSettings",
        "description": "Sets the parameters (settings) of the given layout.",
        "group": "Layout Book Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def set_layout_settings(\n    self,\n    layout_parameters: LayoutParameters,\n    layout_navigator_item_id: NavigatorItemId\n) -> None:\n    \"\"\"\n    Sets the parameters (settings) of the given layout.\n\n    Args:\n        layout_parameters (LayoutParameters)\n        layout_navigator_item_id (NavigatorItemId)\n    \"\"\"\n    params_dict = {\n            'layoutParameters': layout_parameters,\n            'layoutNavigatorItemId': layout_navigator_item_id,\n        }\n    validated_params = SetLayoutSettingsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.SetLayoutSettings\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "SetLayoutSettingsParameters"
        ],
        "type_model_dependencies": [
          "LayoutParameters",
          "NavigatorItemId"
        ]
      }
    ],
    "Navigator Tree Commands": [
      {
        "name": "API.DeleteNavigatorItems",
        "description": "Deletes items from navigator tree.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def delete_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> DeleteNavigatorItemsResult:\n    \"\"\"\n    Deletes items from navigator tree.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = DeleteNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.DeleteNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return DeleteNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "DeleteNavigatorItemsParameters",
          "DeleteNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetBuiltInContainerNavigatorItems",
        "description": "Returns the details of the built-in container navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_built_in_container_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetBuiltInContainerNavigatorItemsResult:\n    \"\"\"\n    Returns the details of the built-in container navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetBuiltInContainerNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetBuiltInContainerNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetBuiltInContainerNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetBuiltInContainerNavigatorItemsParameters",
          "GetBuiltInContainerNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetDetailNavigatorItems",
        "description": "Returns the details of the detail navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_detail_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetDetailNavigatorItemsResult:\n    \"\"\"\n    Returns the details of the detail navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetDetailNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetDetailNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetDetailNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetDetailNavigatorItemsParameters",
          "GetDetailNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetDocument3DNavigatorItems",
        "description": "Returns the details of the 3D document navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_document_3d_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetDocument3DNavigatorItemsResult:\n    \"\"\"\n    Returns the details of the 3D document navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetDocument3DNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetDocument3DNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetDocument3DNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetDocument3DNavigatorItemsParameters",
          "GetDocument3DNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetElevationNavigatorItems",
        "description": "Returns the detailed elevation navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_elevation_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetElevationNavigatorItemsResult:\n    \"\"\"\n    Returns the detailed elevation navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetElevationNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetElevationNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetElevationNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetElevationNavigatorItemsParameters",
          "GetElevationNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetInteriorElevationNavigatorItems",
        "description": "Returns the details of the interior elevation navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_interior_elevation_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetInteriorElevationNavigatorItemsResult:\n    \"\"\"\n    Returns the details of the interior elevation navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetInteriorElevationNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetInteriorElevationNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetInteriorElevationNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetInteriorElevationNavigatorItemsParameters",
          "GetInteriorElevationNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetNavigatorItemTree",
        "description": "Returns the tree of navigator items.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_navigator_item_tree(\n    self,\n    navigator_tree_id: PublisherSetId | OtherNavigatorTreeId\n) -> GetNavigatorItemTreeResult:\n    \"\"\"\n    Returns the tree of navigator items.\n\n    Args:\n        navigator_tree_id (PublisherSetId | OtherNavigatorTreeId): The identifier of a\n            navigator item tree.\n    \"\"\"\n    params_dict = {\n            'navigatorTreeId': navigator_tree_id,\n        }\n    validated_params = GetNavigatorItemTreeParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetNavigatorItemTree\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetNavigatorItemTreeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetNavigatorItemTreeParameters",
          "GetNavigatorItemTreeResult"
        ],
        "type_model_dependencies": [
          "OtherNavigatorTreeId",
          "PublisherSetId"
        ]
      },
      {
        "name": "API.GetNavigatorItemsType",
        "description": "Returns all navigator item types based on the navigator item identifiers given. An error is returned for each identifier that is not found.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_navigator_items_type(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetNavigatorItemsTypeResult:\n    \"\"\"\n    Returns all navigator item types based on the navigator item identifiers given. An error\n    is returned for each identifier that is not found.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetNavigatorItemsTypeParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetNavigatorItemsType\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetNavigatorItemsTypeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetNavigatorItemsTypeParameters",
          "GetNavigatorItemsTypeResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetPublisherSetNames",
        "description": "Returns the names of available publisher sets.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_publisher_set_names(\n    self\n) -> GetPublisherSetNamesResult:\n    \"\"\"\n    Returns the names of available publisher sets.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.GetPublisherSetNames\")\n    return GetPublisherSetNamesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPublisherSetNamesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.GetSectionNavigatorItems",
        "description": "Returns the details of the section navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_section_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetSectionNavigatorItemsResult:\n    \"\"\"\n    Returns the details of the section navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetSectionNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetSectionNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetSectionNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetSectionNavigatorItemsParameters",
          "GetSectionNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetStoryNavigatorItems",
        "description": "Returns the details of the story navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_story_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetStoryNavigatorItemsResult:\n    \"\"\"\n    Returns the details of the story navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetStoryNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetStoryNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetStoryNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetStoryNavigatorItemsParameters",
          "GetStoryNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.GetWorksheetNavigatorItems",
        "description": "Returns the details of the worksheet navigator items identified by their Ids.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_worksheet_navigator_items(\n    self,\n    navigator_item_ids: list[NavigatorItemIdWrapperItem]\n) -> GetWorksheetNavigatorItemsResult:\n    \"\"\"\n    Returns the details of the worksheet navigator items identified by their Ids.\n\n    Args:\n        navigator_item_ids (list[NavigatorItemIdWrapperItem]): A list of navigator item\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'navigatorItemIds': navigator_item_ids,\n        }\n    validated_params = GetWorksheetNavigatorItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetWorksheetNavigatorItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetWorksheetNavigatorItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetWorksheetNavigatorItemsParameters",
          "GetWorksheetNavigatorItemsResult"
        ],
        "type_model_dependencies": [
          "NavigatorItemIdWrapperItem"
        ]
      },
      {
        "name": "API.MoveNavigatorItem",
        "description": "Moves the given navigator item under the <i>parentNavigatorItemId</i> in the navigator tree. If <i>previousNavigatorItemId</i> is not given then inserts it at the first place under the new parent. If it is given then inserts it after this navigator item.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def move_navigator_item(\n    self,\n    navigator_item_id_to_move: NavigatorItemId,\n    parent_navigator_item_id: NavigatorItemId,\n    previous_navigator_item_id: NavigatorItemId | None = None\n) -> None:\n    \"\"\"\n    Moves the given navigator item under the <i>parentNavigatorItemId</i> in the navigator\n    tree. If <i>previousNavigatorItemId</i> is not given then inserts it at the first place\n    under the new parent. If it is given then inserts it after this navigator item.\n\n    Args:\n        navigator_item_id_to_move (NavigatorItemId)\n        parent_navigator_item_id (NavigatorItemId)\n        previous_navigator_item_id (NavigatorItemId | None)\n    \"\"\"\n    params_dict = {\n            'navigatorItemIdToMove': navigator_item_id_to_move,\n            'parentNavigatorItemId': parent_navigator_item_id,\n            'previousNavigatorItemId': previous_navigator_item_id,\n        }\n    validated_params = MoveNavigatorItemParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.MoveNavigatorItem\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "MoveNavigatorItemParameters"
        ],
        "type_model_dependencies": [
          "NavigatorItemId"
        ]
      },
      {
        "name": "API.RenameNavigatorItem",
        "description": "Renames an existing navigator item by specifying either the name or the ID, or both.",
        "group": "Navigator Tree Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def rename_navigator_item(\n    self,\n    root: RootModelRootType = PydanticUndefined\n) -> None:\n    \"\"\"\n    Renames an existing navigator item by specifying either the name or the ID, or both.\n\n    Args:\n        root (RootModelRootType)\n    \"\"\"\n    params_dict = {\n            'root': root,\n        }\n    validated_params = RenameNavigatorItemParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.RenameNavigatorItem\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return None",
        "command_model_dependencies": [
          "RenameNavigatorItemParameters"
        ],
        "type_model_dependencies": []
      }
    ],
    "AddOn Commands": [
      {
        "name": "API.ExecuteAddOnCommand",
        "description": "Executes a command registered in an Add-On.",
        "group": "AddOn Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def execute_add_on_command(\n    self,\n    add_on_command_id: AddOnCommandId,\n    extra_data: Any,\n    add_on_command_parameters: AddOnCommandParameters | None = None\n) -> ExecuteAddOnCommandResult:\n    \"\"\"\n    Executes a command registered in an Add-On.\n\n    Args:\n        add_on_command_id (AddOnCommandId)\n        extra_data (Any)\n        add_on_command_parameters (AddOnCommandParameters | None)\n    \"\"\"\n    params_dict = {\n            'addOnCommandId': add_on_command_id,\n            'addOnCommandParameters': add_on_command_parameters,\n            'extra_data': extra_data,\n        }\n    validated_params = ExecuteAddOnCommandParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.ExecuteAddOnCommand\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return ExecuteAddOnCommandResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "ExecuteAddOnCommandParameters",
          "ExecuteAddOnCommandResult"
        ],
        "type_model_dependencies": [
          "AddOnCommandId",
          "AddOnCommandParameters"
        ]
      },
      {
        "name": "API.IsAddOnCommandAvailable",
        "description": "Checks if the command is available or not.",
        "group": "AddOn Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def is_add_on_command_available(\n    self,\n    add_on_command_id: AddOnCommandId\n) -> IsAddOnCommandAvailableResult:\n    \"\"\"\n    Checks if the command is available or not.\n\n    Args:\n        add_on_command_id (AddOnCommandId)\n    \"\"\"\n    params_dict = {\n            'addOnCommandId': add_on_command_id,\n        }\n    validated_params = IsAddOnCommandAvailableParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.IsAddOnCommandAvailable\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return IsAddOnCommandAvailableResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "IsAddOnCommandAvailableParameters",
          "IsAddOnCommandAvailableResult"
        ],
        "type_model_dependencies": [
          "AddOnCommandId"
        ]
      }
    ],
    "Element Geometry Commands": [
      {
        "name": "API.Get2DBoundingBoxes",
        "description": "Get the 2D bounding box of elements identified by their GUIDs. The bounding box is calculated from the global origin on the floor plan view. The output is the array of the bounding boxes respective to the input GUIDs. Only works for elements detailed in <i>Element Information</i>.",
        "group": "Element Geometry Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_2d_bounding_boxes(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> Get2DBoundingBoxesResult:\n    \"\"\"\n    Get the 2D bounding box of elements identified by their GUIDs. The bounding box is\n    calculated from the global origin on the floor plan view. The output is the array of the\n    bounding boxes respective to the input GUIDs. Only works for elements detailed in\n    <i>Element Information</i>.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = Get2DBoundingBoxesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.Get2DBoundingBoxes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return Get2DBoundingBoxesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "Get2DBoundingBoxesParameters",
          "Get2DBoundingBoxesResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "API.Get3DBoundingBoxes",
        "description": "Get the 3D bounding box of elements identified by their GUIDs. The bounding box is calculated from the global origin in the 3D view. The output is the array of the bounding boxes respective to the input GUIDs. Only works for elements detailed in <i>Element Information</i>.",
        "group": "Element Geometry Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_3d_bounding_boxes(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> Get3DBoundingBoxesResult:\n    \"\"\"\n    Get the 3D bounding box of elements identified by their GUIDs. The bounding box is\n    calculated from the global origin in the 3D view. The output is the array of the\n    bounding boxes respective to the input GUIDs. Only works for elements detailed in\n    <i>Element Information</i>.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = Get3DBoundingBoxesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.Get3DBoundingBoxes\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return Get3DBoundingBoxesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "Get3DBoundingBoxesParameters",
          "Get3DBoundingBoxesResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      }
    ],
    "Classification Commands": [
      {
        "name": "API.GetAllClassificationSystems",
        "description": "Returns the list of available classification systems.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_all_classification_systems(\n    self\n) -> GetAllClassificationSystemsResult:\n    \"\"\"\n    Returns the list of available classification systems.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.GetAllClassificationSystems\")\n    return GetAllClassificationSystemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllClassificationSystemsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.GetAllClassificationsInSystem",
        "description": "Returns the tree of classifications in the given classification system.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_all_classifications_in_system(\n    self,\n    classification_system_id: ClassificationSystemId\n) -> GetAllClassificationsInSystemResult:\n    \"\"\"\n    Returns the tree of classifications in the given classification system.\n\n    Args:\n        classification_system_id (ClassificationSystemId)\n    \"\"\"\n    params_dict = {\n            'classificationSystemId': classification_system_id,\n        }\n    validated_params = GetAllClassificationsInSystemParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAllClassificationsInSystem\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAllClassificationsInSystemResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllClassificationsInSystemParameters",
          "GetAllClassificationsInSystemResult"
        ],
        "type_model_dependencies": [
          "ClassificationSystemId"
        ]
      },
      {
        "name": "API.GetClassificationItemAvailability",
        "description": "Returns the ids of property definitions available for a given classification item.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_classification_item_availability(\n    self,\n    classification_item_ids: list[ClassificationItemIdArrayItem]\n) -> GetClassificationItemAvailabilityResult:\n    \"\"\"\n    Returns the ids of property definitions available for a given classification item.\n\n    Args:\n        classification_item_ids (list[ClassificationItemIdArrayItem]): A list of\n            classification item identifiers.\n    \"\"\"\n    params_dict = {\n            'classificationItemIds': classification_item_ids,\n        }\n    validated_params = GetClassificationItemAvailabilityParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetClassificationItemAvailability\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetClassificationItemAvailabilityResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetClassificationItemAvailabilityParameters",
          "GetClassificationItemAvailabilityResult"
        ],
        "type_model_dependencies": [
          "ClassificationItemIdArrayItem"
        ]
      },
      {
        "name": "API.GetClassificationSystemIds",
        "description": "Returns the list of available classification systems.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_classification_system_ids(\n    self\n) -> GetClassificationSystemIdsResult:\n    \"\"\"\n    Returns the list of available classification systems.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.GetClassificationSystemIds\")\n    return GetClassificationSystemIdsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetClassificationSystemIdsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.GetClassificationSystems",
        "description": "Returns the details of classification systems identified by their GUIDs.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_classification_systems(\n    self,\n    classification_system_ids: list[ClassificationSystemIdArrayItem]\n) -> GetClassificationSystemsResult:\n    \"\"\"\n    Returns the details of classification systems identified by their GUIDs.\n\n    Args:\n        classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of\n            classification system identifiers.\n    \"\"\"\n    params_dict = {\n            'classificationSystemIds': classification_system_ids,\n        }\n    validated_params = GetClassificationSystemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetClassificationSystems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetClassificationSystemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetClassificationSystemsParameters",
          "GetClassificationSystemsResult"
        ],
        "type_model_dependencies": [
          "ClassificationSystemIdArrayItem"
        ]
      },
      {
        "name": "API.GetClassificationsOfElements",
        "description": "Returns the classification of the given elements in the given classification systems.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_classifications_of_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    classification_system_ids: list[ClassificationSystemIdArrayItem]\n) -> GetClassificationsOfElementsResult:\n    \"\"\"\n    Returns the classification of the given elements in the given classification systems.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        classification_system_ids (list[ClassificationSystemIdArrayItem]): A list of\n            classification system identifiers.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'classificationSystemIds': classification_system_ids,\n        }\n    validated_params = GetClassificationsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetClassificationsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetClassificationsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetClassificationsOfElementsParameters",
          "GetClassificationsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ClassificationSystemIdArrayItem",
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "API.GetDetailsOfClassificationItems",
        "description": "Returns the details of classification items.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_details_of_classification_items(\n    self,\n    classification_item_ids: list[ClassificationItemIdArrayItem]\n) -> GetDetailsOfClassificationItemsResult:\n    \"\"\"\n    Returns the details of classification items.\n\n    Args:\n        classification_item_ids (list[ClassificationItemIdArrayItem]): A list of\n            classification item identifiers.\n    \"\"\"\n    params_dict = {\n            'classificationItemIds': classification_item_ids,\n        }\n    validated_params = GetDetailsOfClassificationItemsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetDetailsOfClassificationItems\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetDetailsOfClassificationItemsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetDetailsOfClassificationItemsParameters",
          "GetDetailsOfClassificationItemsResult"
        ],
        "type_model_dependencies": [
          "ClassificationItemIdArrayItem"
        ]
      },
      {
        "name": "API.SetClassificationsOfElements",
        "description": "Sets the classifications of elements. In order to set the classification of an element to unclassified, omit the classificationItemId field.",
        "group": "Classification Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def set_classifications_of_elements(\n    self,\n    element_classifications: list[ElementClassification]\n) -> SetClassificationsOfElementsResult:\n    \"\"\"\n    Sets the classifications of elements. In order to set the classification of an element\n    to unclassified, omit the classificationItemId field.\n\n    Args:\n        element_classifications (list[ElementClassification]): A list of element\n            classification identifiers.\n    \"\"\"\n    params_dict = {\n            'elementClassifications': element_classifications,\n        }\n    validated_params = SetClassificationsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.SetClassificationsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetClassificationsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetClassificationsOfElementsParameters",
          "SetClassificationsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementClassification"
        ]
      }
    ],
    "Element Listing Commands": [
      {
        "name": "API.GetAllElements",
        "description": "Returns the identifier of every element in the current plan.",
        "group": "Element Listing Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_all_elements(\n    self\n) -> GetAllElementsResult:\n    \"\"\"\n    Returns the identifier of every element in the current plan.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.GetAllElements\")\n    return GetAllElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllElementsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.GetElementsByClassification",
        "description": "Returns the identifier of every element with the given classification identifier.",
        "group": "Element Listing Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_elements_by_classification(\n    self,\n    classification_item_id: ClassificationItemId\n) -> GetElementsByClassificationResult:\n    \"\"\"\n    Returns the identifier of every element with the given classification identifier.\n\n    Args:\n        classification_item_id (ClassificationItemId)\n    \"\"\"\n    params_dict = {\n            'classificationItemId': classification_item_id,\n        }\n    validated_params = GetElementsByClassificationParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetElementsByClassification\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetElementsByClassificationResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetElementsByClassificationParameters",
          "GetElementsByClassificationResult"
        ],
        "type_model_dependencies": [
          "ClassificationItemId"
        ]
      },
      {
        "name": "API.GetElementsByType",
        "description": "Returns the identifier of every element of the given type on the plan.",
        "group": "Element Listing Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_elements_by_type(\n    self,\n    element_type: ElementType\n) -> GetElementsByTypeResult:\n    \"\"\"\n    Returns the identifier of every element of the given type on the plan.\n\n    Args:\n        element_type (ElementType)\n    \"\"\"\n    params_dict = {\n            'elementType': element_type,\n        }\n    validated_params = GetElementsByTypeParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetElementsByType\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetElementsByTypeResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetElementsByTypeParameters",
          "GetElementsByTypeResult"
        ],
        "type_model_dependencies": [
          "ElementType"
        ]
      },
      {
        "name": "API.GetSelectedElements",
        "description": "Returns the identifiers of selected elements in the current plan.",
        "group": "Element Listing Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_selected_elements(\n    self,\n    only_editable: bool | None = None,\n    only_supported_types: bool | None = None\n) -> GetSelectedElementsResult:\n    \"\"\"\n    Returns the identifiers of selected elements in the current plan.\n\n    Args:\n        only_editable (bool | None): Optional parameter that defines whether the selection\n            list should include only the editable elements or all of them. The default value\n            is FALSE\n        only_supported_types (bool | None): Optional parameter. When it is set to true, only\n            elements with types that are supported by any other JSON API command will be\n            returned.\n    \"\"\"\n    params_dict = {\n            'onlyEditable': only_editable,\n            'onlySupportedTypes': only_supported_types,\n        }\n    validated_params = GetSelectedElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetSelectedElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetSelectedElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetSelectedElementsParameters",
          "GetSelectedElementsResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.GetTypesOfElements",
        "description": "Returns the types of the given elements.",
        "group": "Element Listing Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_types_of_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> GetTypesOfElementsResult:\n    \"\"\"\n    Returns the types of the given elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = GetTypesOfElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetTypesOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetTypesOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetTypesOfElementsParameters",
          "GetTypesOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      }
    ],
    "Property Commands": [
      {
        "name": "API.GetAllPropertyGroupIds",
        "description": "Returns the identifier of every property group in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property group (Built-in or User Defined).",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_all_property_group_ids(\n    self,\n    property_type: PropertyType | None = None\n) -> GetAllPropertyGroupIdsResult:\n    \"\"\"\n    Returns the identifier of every property group in the current plan. The optional\n    propertyType parameter can be used to filter the results based on the type of the\n    property group (Built-in or User Defined).\n\n    Args:\n        property_type (PropertyType | None)\n    \"\"\"\n    params_dict = {\n            'propertyType': property_type,\n        }\n    validated_params = GetAllPropertyGroupIdsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAllPropertyGroupIds\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAllPropertyGroupIdsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllPropertyGroupIdsParameters",
          "GetAllPropertyGroupIdsResult"
        ],
        "type_model_dependencies": [
          "PropertyType"
        ]
      },
      {
        "name": "API.GetAllPropertyIds",
        "description": "Returns the identifier of every property in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_all_property_ids(\n    self,\n    property_type: PropertyType | None = None\n) -> GetAllPropertyIdsResult:\n    \"\"\"\n    Returns the identifier of every property in the current plan. The optional propertyType\n    parameter can be used to filter the results based on the type of the property (Built-in\n    or User Defined).\n\n    Args:\n        property_type (PropertyType | None)\n    \"\"\"\n    params_dict = {\n            'propertyType': property_type,\n        }\n    validated_params = GetAllPropertyIdsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAllPropertyIds\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAllPropertyIdsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllPropertyIdsParameters",
          "GetAllPropertyIdsResult"
        ],
        "type_model_dependencies": [
          "PropertyType"
        ]
      },
      {
        "name": "API.GetAllPropertyIdsOfElements",
        "description": "Returns all property identifiers of the given elements. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_all_property_ids_of_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    property_type: PropertyType | None = None\n) -> GetAllPropertyIdsOfElementsResult:\n    \"\"\"\n    Returns all property identifiers of the given elements. The optional propertyType\n    parameter can be used to filter the results based on the type of the property (Built-in\n    or User Defined).\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        property_type (PropertyType | None)\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'propertyType': property_type,\n        }\n    validated_params = GetAllPropertyIdsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetAllPropertyIdsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetAllPropertyIdsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllPropertyIdsOfElementsParameters",
          "GetAllPropertyIdsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "PropertyType"
        ]
      },
      {
        "name": "API.GetAllPropertyNames",
        "description": "Returns the human-readable names of available Property definitions for debug and development purposes.",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_all_property_names(\n    self\n) -> GetAllPropertyNamesResult:\n    \"\"\"\n    Returns the human-readable names of available Property definitions for debug and\n    development purposes.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.GetAllPropertyNames\")\n    return GetAllPropertyNamesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetAllPropertyNamesResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.GetDetailsOfProperties",
        "description": "Returns the details of property definitions.",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_details_of_properties(\n    self,\n    properties: list[PropertyIdArrayItem]\n) -> GetDetailsOfPropertiesResult:\n    \"\"\"\n    Returns the details of property definitions.\n\n    Args:\n        properties (list[PropertyIdArrayItem]): A list of property identifiers.\n    \"\"\"\n    params_dict = {\n            'properties': properties,\n        }\n    validated_params = GetDetailsOfPropertiesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetDetailsOfProperties\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetDetailsOfPropertiesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetDetailsOfPropertiesParameters",
          "GetDetailsOfPropertiesResult"
        ],
        "type_model_dependencies": [
          "PropertyIdArrayItem"
        ]
      },
      {
        "name": "API.GetPropertyDefinitionAvailability",
        "description": "Returns the ids of classification items a given property definition is available for.",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_property_definition_availability(\n    self,\n    property_ids: list[PropertyIdArrayItem]\n) -> GetPropertyDefinitionAvailabilityResult:\n    \"\"\"\n    Returns the ids of classification items a given property definition is available for.\n\n    Args:\n        property_ids (list[PropertyIdArrayItem]): A list of property identifiers.\n    \"\"\"\n    params_dict = {\n            'propertyIds': property_ids,\n        }\n    validated_params = GetPropertyDefinitionAvailabilityParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetPropertyDefinitionAvailability\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPropertyDefinitionAvailabilityResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPropertyDefinitionAvailabilityParameters",
          "GetPropertyDefinitionAvailabilityResult"
        ],
        "type_model_dependencies": [
          "PropertyIdArrayItem"
        ]
      },
      {
        "name": "API.GetPropertyGroups",
        "description": "Returns the details of property groups.",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_property_groups(\n    self,\n    property_group_ids: list[PropertyGroupIdArrayItem]\n) -> GetPropertyGroupsResult:\n    \"\"\"\n    Returns the details of property groups.\n\n    Args:\n        property_group_ids (list[PropertyGroupIdArrayItem]): A list of property group\n            identifiers.\n    \"\"\"\n    params_dict = {\n            'propertyGroupIds': property_group_ids,\n        }\n    validated_params = GetPropertyGroupsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetPropertyGroups\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPropertyGroupsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPropertyGroupsParameters",
          "GetPropertyGroupsResult"
        ],
        "type_model_dependencies": [
          "PropertyGroupIdArrayItem"
        ]
      },
      {
        "name": "API.GetPropertyIds",
        "description": "Returns the identifiers of property definitions for the requested property names.",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_property_ids(\n    self,\n    properties: list[UserDefinedPropertyUserId | BuiltInPropertyUserId]\n) -> GetPropertyIdsResult:\n    \"\"\"\n    Returns the identifiers of property definitions for the requested property names.\n\n    Args:\n        properties (list[UserDefinedPropertyUserId | BuiltInPropertyUserId]): List of\n            property names whose ids are requested.\n    \"\"\"\n    params_dict = {\n            'properties': properties,\n        }\n    validated_params = GetPropertyIdsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetPropertyIds\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPropertyIdsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPropertyIdsParameters",
          "GetPropertyIdsResult"
        ],
        "type_model_dependencies": [
          "BuiltInPropertyUserId",
          "UserDefinedPropertyUserId"
        ]
      },
      {
        "name": "API.GetPropertyValuesOfElements",
        "description": "Returns the property values of the elements for the given property.",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_property_values_of_elements(\n    self,\n    elements: list[ElementIdArrayItem],\n    properties: list[PropertyIdArrayItem]\n) -> GetPropertyValuesOfElementsResult:\n    \"\"\"\n    Returns the property values of the elements for the given property.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n        properties (list[PropertyIdArrayItem]): A list of property identifiers.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n            'properties': properties,\n        }\n    validated_params = GetPropertyValuesOfElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetPropertyValuesOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPropertyValuesOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPropertyValuesOfElementsParameters",
          "GetPropertyValuesOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "PropertyIdArrayItem"
        ]
      },
      {
        "name": "API.SetPropertyValuesOfElements",
        "description": "Sets the property values of elements.",
        "group": "Property Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def set_property_values_of_elements(\n    self,\n    element_property_values: list[ElementPropertyValue]\n) -> SetPropertyValuesOfElementsResult:\n    \"\"\"\n    Sets the property values of elements.\n\n    Args:\n        element_property_values (list[ElementPropertyValue]): A list of element property\n            values.\n    \"\"\"\n    params_dict = {\n            'elementPropertyValues': element_property_values,\n        }\n    validated_params = SetPropertyValuesOfElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.SetPropertyValuesOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return SetPropertyValuesOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "SetPropertyValuesOfElementsParameters",
          "SetPropertyValuesOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementPropertyValue"
        ]
      }
    ],
    "Component Commands": [
      {
        "name": "API.GetComponentsOfElements",
        "description": "Returns the identifier of every component for a list of elements. The order of the returned list is the same as the given elements.",
        "group": "Component Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_components_of_elements(\n    self,\n    elements: list[ElementIdArrayItem]\n) -> GetComponentsOfElementsResult:\n    \"\"\"\n    Returns the identifier of every component for a list of elements. The order of the\n    returned list is the same as the given elements.\n\n    Args:\n        elements (list[ElementIdArrayItem]): A list of elements.\n    \"\"\"\n    params_dict = {\n            'elements': elements,\n        }\n    validated_params = GetComponentsOfElementsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetComponentsOfElements\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetComponentsOfElementsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetComponentsOfElementsParameters",
          "GetComponentsOfElementsResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem"
        ]
      },
      {
        "name": "API.GetPropertyValuesOfElementComponents",
        "description": "Returns the property values of the components for the given property.",
        "group": "Component Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_property_values_of_element_components(\n    self,\n    element_components: list[ElementComponentIdArrayItem],\n    properties: list[PropertyIdArrayItem]\n) -> GetPropertyValuesOfElementComponentsResult:\n    \"\"\"\n    Returns the property values of the components for the given property.\n\n    Args:\n        element_components (list[ElementComponentIdArrayItem]): List of components of\n            elements.\n        properties (list[PropertyIdArrayItem]): A list of property identifiers.\n    \"\"\"\n    params_dict = {\n            'elementComponents': element_components,\n            'properties': properties,\n        }\n    validated_params = GetPropertyValuesOfElementComponentsParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetPropertyValuesOfElementComponents\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetPropertyValuesOfElementComponentsResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetPropertyValuesOfElementComponentsParameters",
          "GetPropertyValuesOfElementComponentsResult"
        ],
        "type_model_dependencies": [
          "ElementComponentIdArrayItem",
          "PropertyIdArrayItem"
        ]
      }
    ],
    "Element Relation Commands": [
      {
        "name": "API.GetElementsRelatedToZones",
        "description": "Returns related elements of the given zones. The related elements will be grouped by type. If multiple zones was given, then the order of the returned list is that of the given zones.",
        "group": "Element Relation Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_elements_related_to_zones(\n    self,\n    zones: list[ElementIdArrayItem],\n    element_types: list[ElementType] | None = None\n) -> GetElementsRelatedToZonesResult:\n    \"\"\"\n    Returns related elements of the given zones. The related elements will be grouped by\n    type. If multiple zones was given, then the order of the returned list is that of the\n    given zones.\n\n    Args:\n        zones (list[ElementIdArrayItem]): A list of elements.\n        element_types (list[ElementType] | None): If this parameter is given, then only\n            related elements with the requested types will be listed.\n    \"\"\"\n    params_dict = {\n            'zones': zones,\n            'elementTypes': element_types,\n        }\n    validated_params = GetElementsRelatedToZonesParameters(**params_dict)\n    response_dict = self._core.post_command(\n        \"API.GetElementsRelatedToZones\",\n        validated_params.model_dump(by_alias=True, exclude_none=True)\n    )\n    return GetElementsRelatedToZonesResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetElementsRelatedToZonesParameters",
          "GetElementsRelatedToZonesResult"
        ],
        "type_model_dependencies": [
          "ElementIdArrayItem",
          "ElementType"
        ]
      }
    ],
    "Basic Commands": [
      {
        "name": "API.GetProductInfo",
        "description": "Accesses the version information from the running Archicad.",
        "group": "Basic Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def get_product_info(\n    self\n) -> GetProductInfoResult:\n    \"\"\"\n    Accesses the version information from the running Archicad.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.GetProductInfo\")\n    return GetProductInfoResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "GetProductInfoResult"
        ],
        "type_model_dependencies": []
      },
      {
        "name": "API.IsAlive",
        "description": "Checks if the Archicad connection is alive.",
        "group": "Basic Commands",
        "version": "N/A",
        "source": "official",
        "method_code": "def is_alive(\n    self\n) -> IsAliveResult:\n    \"\"\"\n    Checks if the Archicad connection is alive.\n    \"\"\"\n    response_dict = self._core.post_command(\"API.IsAlive\")\n    return IsAliveResult.model_validate(response_dict)",
        "command_model_dependencies": [
          "IsAliveResult"
        ],
        "type_model_dependencies": []
      }
    ]
  }
}