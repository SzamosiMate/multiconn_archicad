from __future__ import annotations
from typing import List, Literal, TypeAlias, Annotated, Any, Union, TypedDict
from uuid import UUID
from enum import Enum

from pydantic import BaseModel, ConfigDict, Field, RootModel

### This file is automatically generated and surgically cleaned. Do not edit directly. ###


class GetProductInfoResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: Annotated[int, Field(description="The version of the running Archicad.")]
    buildNumber: Annotated[
        int, Field(description="The build number of the running Archicad.")
    ]
    languageCode: Annotated[
        str, Field(description="The language code of the running Archicad.")
    ]


class GetPublisherSetNamesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    publisherSetNames: Annotated[
        List[str], Field(description="The names of available publisher sets.")
    ]


class GetSelectedElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    onlyEditable: Annotated[
        bool | None,
        Field(
            description="Optional parameter that defines whether the selection list should include only the editable elements or all of them. The default value is FALSE"
        ),
    ] = None
    onlySupportedTypes: Annotated[
        bool | None,
        Field(
            description="Optional parameter. When it is set to true, only elements with types that are supported by any other JSON API command will be returned."
        ),
    ] = None


class IsAddOnCommandAvailableResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    available: Annotated[
        bool, Field(description="Returns true if the command is available.")
    ]


class IsAliveResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    isAlive: Annotated[
        bool, Field(description="Returns true if the connection is alive.")
    ]


class AddOnCommandId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    commandNamespace: Annotated[
        str, Field(description="The namespace of the Add-On command.", min_length=1)
    ]
    commandName: Annotated[
        str, Field(description="The name of the Add-On command.", min_length=1)
    ]


class AddOnCommandIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    addOnCommandId: AddOnCommandId


AddOnCommandIds: TypeAlias = List[AddOnCommandIdArrayItem]


class AddOnCommandParameters(BaseModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class AddOnCommandResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class AttributeType(Enum):
    BuildingMaterial = "BuildingMaterial"
    Composite = "Composite"
    Fill = "Fill"
    Layer = "Layer"
    LayerCombination = "LayerCombination"
    Line = "Line"
    PenTable = "PenTable"
    Profile = "Profile"
    Surface = "Surface"
    ZoneCategory = "ZoneCategory"


AttributeFolderName: TypeAlias = str


class AttributeFolderCreationParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeType: AttributeType
    path: Annotated[
        List[AttributeFolderName],
        Field(description="A list of attribute folder names. May be empty."),
    ]


class AppearanceType(Enum):
    ScaleWithPlan = "ScaleWithPlan"
    ScaleIndependent = "ScaleIndependent"


class FillTypeId(Enum):
    Vector = "Vector"
    Symbol = "Symbol"
    Solid = "Solid"
    Empty = "Empty"
    LinearGradient = "LinearGradient"
    RadialGradient = "RadialGradient"
    Image = "Image"


class MaterialTypeId(Enum):
    General = "General"
    Simple = "Simple"
    Matte = "Matte"
    Metal = "Metal"
    Plastic = "Plastic"
    Glass = "Glass"
    Glowing = "Glowing"
    Constant = "Constant"


class ProfileModifier(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="The name of the modifier.")]
    value: Annotated[float, Field(description="The value of the modifier.")]


class ProfileModifierListItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profileModifier: ProfileModifier


class Texture(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="The name of the texture.")]


class LineType(Enum):
    SolidLine = "SolidLine"
    DashedLine = "DashedLine"
    SymbolLine = "SymbolLine"


class LineItemType(Enum):
    IllegalItemType = "IllegalItemType"
    SeparatorItemType = "SeparatorItemType"
    CenterDotItemType = "CenterDotItemType"
    CenterLineItemType = "CenterLineItemType"
    DotItemType = "DotItemType"
    RightAngleItemType = "RightAngleItemType"
    ParallelItemType = "ParallelItemType"
    LineItemType = "LineItemType"
    CircItemType = "CircItemType"
    ArcItemType = "ArcItemType"


class DashItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    dash: Annotated[float, Field(description="The length of the dash.")]
    gap: Annotated[float, Field(description="The length of the gap.")]


class Point2D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    x: Annotated[float, Field(description="X coordinate of 2D point")]
    y: Annotated[float, Field(description="Y coordinate of 2D point")]


class NavigatorItemType(Enum):
    UndefinedItem = "UndefinedItem"
    ProjectMapRootItem = "ProjectMapRootItem"
    StoryItem = "StoryItem"
    SectionItem = "SectionItem"
    ElevationItem = "ElevationItem"
    InteriorElevationItem = "InteriorElevationItem"
    WorksheetItem = "WorksheetItem"
    DetailItem = "DetailItem"
    DocumentFrom3DItem = "DocumentFrom3DItem"
    Perspective3DItem = "Perspective3DItem"
    Axonometry3DItem = "Axonometry3DItem"
    CameraSetItem = "CameraSetItem"
    CameraItem = "CameraItem"
    ScheduleItem = "ScheduleItem"
    ProjectIndexItem = "ProjectIndexItem"
    TextListItem = "TextListItem"
    GraphicListItem = "GraphicListItem"
    InfoItem = "InfoItem"
    HelpItem = "HelpItem"
    FolderItem = "FolderItem"
    LayoutBookRootItem = "LayoutBookRootItem"
    SubsetItem = "SubsetItem"
    LayoutItem = "LayoutItem"
    DrawingItem = "DrawingItem"
    MasterFolderItem = "MasterFolderItem"
    MasterLayoutItem = "MasterLayoutItem"


class NavigatorItemMapType(Enum):
    ProjectMap = "ProjectMap"
    ViewMap = "ViewMap"
    MyViewMap = "MyViewMap"
    LayoutBook = "LayoutBook"


class PublisherSetId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Annotated[
        Literal["PublisherSets"],
        Field(description="The type of the navigator item tree."),
    ]
    name: Annotated[str, Field(description="The name of the publisher set.")]


class OtherNavigatorTreeId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: NavigatorItemMapType


class UserDefinedPropertyUserId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["UserDefined"]
    localizedName: Annotated[
        List[str],
        Field(
            description="A two-element list of the localized name parts. The first element is the name of the group the property belongs to, and the second element is the actual name of the property.",
            max_length=2,
            min_length=2,
        ),
    ]


class BuiltInPropertyUserId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["BuiltIn"]
    nonLocalizedName: Annotated[
        str, Field(description="The non-localized name of the Built-In Property.")
    ]


class PropertyType(Enum):
    UserDefined = "UserDefined"
    BuiltIn = "BuiltIn"


class NormalNumberPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


class PropertyValueType(Enum):
    number = "number"
    integer = "integer"
    string = "string"
    boolean = "boolean"
    length = "length"
    area = "area"
    volume = "volume"
    angle = "angle"
    numberList = "numberList"
    integerList = "integerList"
    stringList = "stringList"
    booleanList = "booleanList"
    lengthList = "lengthList"
    areaList = "areaList"
    volumeList = "volumeList"
    angleList = "angleList"
    singleEnum = "singleEnum"
    multiEnum = "multiEnum"


class UserUndefinedPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: PropertyValueType
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: PropertyValueType
    status: Literal["notAvailable"]


class NotEvaluatedPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: PropertyValueType
    status: Literal["notEvaluated"]


class DisplayValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


class EnumValueIdWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValueId: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]


class PossibleEnumValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValueId: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]
    displayValue: Annotated[
        str, Field(description="Displayed value of the enumeration.")
    ]
    nonLocalizedValue: Annotated[
        str | None,
        Field(description="Nonlocalized value of the enumeration if there is one."),
    ] = None


class PossibleEnumValuesArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enumValue: PossibleEnumValue


class Error(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: Annotated[int, Field(description="The code of the error.")]
    message: Annotated[str, Field(description="The error message.")]


class ErrorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    error: Error


class SuccessfulExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[True]


class FailedExecutionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    success: Literal[False]
    error: Annotated[Error, Field(description="The details of an execution failure.")]


class ElementId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class ElementIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId


class ElementType(Enum):
    Wall = "Wall"
    Column = "Column"
    Beam = "Beam"
    Window = "Window"
    Door = "Door"
    Object = "Object"
    Lamp = "Lamp"
    Slab = "Slab"
    Roof = "Roof"
    Mesh = "Mesh"
    Zone = "Zone"
    CurtainWall = "CurtainWall"
    Shell = "Shell"
    Skylight = "Skylight"
    Morph = "Morph"
    Stair = "Stair"
    Railing = "Railing"
    Opening = "Opening"


class TypeOfElement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    elementType: ElementType


class TypeOfElementWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    typeOfElement: TypeOfElement


class ElementsWrapper(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class Image(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    content: Annotated[str, Field(description="The image content as a string .")]


class ImageWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    image: Image


class FolderParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="The name of the folder.")]


class BoundingBox2D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: Annotated[
        float, Field(description="The minimum X value of the bounding box.")
    ]
    yMin: Annotated[
        float, Field(description="The minimum Y value of the bounding box.")
    ]
    xMax: Annotated[
        float, Field(description="The maximum X value of the bounding box.")
    ]
    yMax: Annotated[
        float, Field(description="The maximum Y value of the bounding box.")
    ]


class BoundingBox2DWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBox2D: BoundingBox2D


class BoundingBox3D(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    xMin: Annotated[
        float, Field(description="The minimum X value of the bounding box.")
    ]
    yMin: Annotated[
        float, Field(description="The minimum Y value of the bounding box.")
    ]
    zMin: Annotated[
        float, Field(description="The minimum Z value of the bounding box.")
    ]
    xMax: Annotated[
        float, Field(description="The maximum X value of the bounding box.")
    ]
    yMax: Annotated[
        float, Field(description="The maximum Y value of the bounding box.")
    ]
    zMax: Annotated[
        float, Field(description="The maximum Z value of the bounding box.")
    ]


class BoundingBox3DWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBox3D: BoundingBox3D


class RGBColor(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    red: Annotated[
        float,
        Field(description="The red component of the color model.", ge=0.0, le=1.0),
    ]
    green: Annotated[
        float,
        Field(description="The green component of the color model.", ge=0.0, le=1.0),
    ]
    blue: Annotated[
        float,
        Field(description="The blue component of the color model.", ge=0.0, le=1.0),
    ]


class NumberingStyle(Enum):
    Undefined = "Undefined"
    abc = "abc"
    ABC = "ABC"
    field_1 = "1"
    field_01 = "01"
    field_001 = "001"
    field_0001 = "0001"
    noID = "noID"


class Subset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[
        str, Field(description="The name for the layout subset.", min_length=1)
    ]
    includeToIDSequence: Annotated[
        bool,
        Field(
            description="Defines whether this subset is included in automatic ID assignment or not."
        ),
    ]
    customNumbering: Annotated[
        bool,
        Field(
            description="Defines whether the IDs are generated automatically or a custom numbering is used."
        ),
    ]
    continueNumbering: Annotated[
        bool,
        Field(
            description="Defines whether to continue using the ID assignment of the upper levels or not. If 'true', layouts within this subset are going to be assigned IDs as if they were not within this subset, but part of the level above. In this case you only use the Subset as a logical grouping which has no effect on IDs."
        ),
    ]
    useUpperPrefix: Annotated[
        bool,
        Field(
            description="Defines whether to use the prefix and ID of the upper levels or not. If 'true', layouts in this subset will be assigned IDs based on the previous layout in the layout book structure."
        ),
    ]
    addOwnPrefix: Annotated[
        bool,
        Field(description="Defines whether to add own prefix to the subset or not."),
    ]
    customNumber: Annotated[str, Field(description="The custom subset ID.")]
    autoNumber: Annotated[str, Field(description="The automatic subset ID.")]
    numberingStyle: Annotated[
        NumberingStyle, Field(description="The style of the ID formatting.")
    ]
    startAt: Annotated[int, Field(description="The starting value of the numbering.")]
    ownPrefix: Annotated[str, Field(description="The custom prefix for the subset.")]


class LayoutParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    horizontalSize: Annotated[
        float, Field(description="The horizontal size of the layout in millimeters.")
    ]
    verticalSize: Annotated[
        float, Field(description="The vertical size of the layout in millimeters.")
    ]
    leftMargin: Annotated[
        float, Field(description="The layout margin from the left side of the paper.")
    ]
    topMargin: Annotated[
        float, Field(description="The layout margin from the top side of the paper.")
    ]
    rightMargin: Annotated[
        float, Field(description="The layout margin from the right side of the paper.")
    ]
    bottomMargin: Annotated[
        float, Field(description="The layout margin from the bottom side of the paper.")
    ]
    customLayoutNumber: Annotated[str, Field(description="The custom ID.")]
    customLayoutNumbering: Annotated[
        bool,
        Field(
            description="Defines whether a unique ID is used for the current layout or not."
        ),
    ]
    doNotIncludeInNumbering: Annotated[
        bool,
        Field(
            description="Defines whether this layout is included in automatic ID assignment or not."
        ),
    ]
    displayMasterLayoutBelow: Annotated[
        bool,
        Field(
            description="Defines whether to display the master layout above or below the layout."
        ),
    ]
    layoutPageNumber: Annotated[
        int,
        Field(
            description="The page number of layout when this layout contains multi-page drawings."
        ),
    ]
    actPageIndex: Annotated[
        int,
        Field(description="The actual index of layout inside the multi-page layout."),
    ]
    currentRevisionId: Annotated[
        str, Field(description="The ID of the current document revision of the layout.")
    ]
    currentFinalRevisionId: Annotated[
        str,
        Field(
            description="The ID with optional suffix of the current document revision of the layout."
        ),
    ]
    hasIssuedRevision: Annotated[
        bool,
        Field(
            description="Defines whether one or more issued document revisions have already been created for the layout or not."
        ),
    ]
    hasActualRevision: Annotated[
        bool,
        Field(
            description="Defines whether an open document revision exists for the layout or not."
        ),
    ]


class ComponentId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class ElementComponentId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    componentId: ComponentId


class ElementComponentIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementComponentId: ElementComponentId


class ElementComponentsWrapper(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementComponents: Annotated[
        List[ElementComponentIdArrayItem],
        Field(description="List of components of elements."),
    ]


class CreateAttributeFoldersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolders: List[AttributeFolderCreationParameters]


class CreateAttributeFoldersResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class DeleteAttributeFoldersResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class DeleteAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class DeleteNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class ExecuteAddOnCommandParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    addOnCommandId: AddOnCommandId
    addOnCommandParameters: AddOnCommandParameters | None = None


class ExecuteAddOnCommandResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    addOnCommandResponse: AddOnCommandResponse


class Get2DBoundingBoxesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class Get2DBoundingBoxesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBoxes2D: Annotated[
        List[BoundingBox2DWrapperItem | ErrorItem],
        Field(description="A list of 2D bounding boxes."),
    ]


class Get3DBoundingBoxesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class Get3DBoundingBoxesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBoxes3D: Annotated[
        List[BoundingBox3DWrapperItem | ErrorItem],
        Field(description="A list of 3D bounding boxes."),
    ]


class GetAllElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetAllPropertyGroupIdsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyType: PropertyType | None = None


class GetAllPropertyIdsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyType: PropertyType | None = None


class GetAllPropertyIdsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    propertyType: PropertyType | None = None


class GetAllPropertyNamesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[UserDefinedPropertyUserId | BuiltInPropertyUserId],
        Field(description="A list of PropertyUserId objects."),
    ]


class GetAttributeFolderStructureParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeType: AttributeType
    path: Annotated[
        List[AttributeFolderName] | None,
        Field(description="A list of attribute folder names. May be empty."),
    ] = None


class GetAttributesByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeType: AttributeType


class GetComponentsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetComponentsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    componentsOfElements: Annotated[
        List[ElementComponentsWrapper | ErrorItem],
        Field(description="Array of component list or error."),
    ]


class GetElementsByClassificationResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetElementsByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementType: ElementType


class GetElementsByTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetElementsRelatedToZonesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    zones: Annotated[List[ElementIdArrayItem], Field(description="A list of elements.")]
    elementTypes: Annotated[
        List[ElementType] | None,
        Field(
            description="If this parameter is given, then only related elements with the requested types will be listed."
        ),
    ] = None


class GetElementsRelatedToZonesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementsRelatedToZones: Annotated[
        List[ElementsWrapper | ErrorItem],
        Field(description="A list of ElementsOrError items."),
    ]


class GetLayoutSettingsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layoutParameters: LayoutParameters


class GetNavigatorItemTreeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorTreeId: Annotated[
        PublisherSetId | OtherNavigatorTreeId,
        Field(description="The identifier of a navigator item tree."),
    ]


class GetProfileAttributePreviewResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    previewImages: Annotated[
        List[ImageWrapperItem | ErrorItem],
        Field(description="The preview images of the profiles."),
    ]


class GetPropertyIdsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[UserDefinedPropertyUserId | BuiltInPropertyUserId],
        Field(description="List of property names whose ids are requested."),
    ]


class GetSelectedElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetTypesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetTypesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    typesOfElements: Annotated[
        List[TypeOfElementWrapperItem | ErrorItem],
        Field(description="A list of element types or errors."),
    ]


class IsAddOnCommandAvailableParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    addOnCommandId: AddOnCommandId


class RenameAttributeFoldersResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class SetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class SetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class AttributeFolderId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class AttributeFolderIdWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolderId: AttributeFolderId


class AttributeId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class AttributeIdWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId


class AttributeIndexAndGuid(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]
    index: Annotated[
        float, Field(description="The index of an attribute.", min_length=1)
    ]


class AttributeIndexAndGuidWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIndexAndGuid: AttributeIndexAndGuid


class AttributeFolder(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeType: AttributeType
    path: Annotated[
        List[AttributeFolderName],
        Field(description="A list of attribute folder names. May be empty."),
    ]
    attributeFolderId: AttributeFolderId
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]


class AttributeFolderWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolder: AttributeFolder


class AttributeFolderRenameParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolderId: AttributeFolderId
    newName: Annotated[
        str,
        Field(
            description="The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.",
            min_length=1,
        ),
    ]


class AttributeHeader(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]


class AttributeHeaderArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attribute: AttributeHeader


class LayerAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    intersectionGroupNr: Annotated[
        int, Field(description="The intersection group number")
    ]
    isLocked: Annotated[
        bool, Field(description="Defines whether the layer is locked or not.")
    ]
    isHidden: Annotated[
        bool, Field(description="Defines whether the layer is hidden or not.")
    ]
    isWireframe: Annotated[
        bool,
        Field(
            description="Defines whether the elements placed on this layer are visible as wireframes or a solid model."
        ),
    ]


class LayerAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layerAttribute: LayerAttribute


class FillAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    subType: FillTypeId
    pattern: Annotated[
        int,
        Field(
            description="The pattern of the fill attribute, stored in a 64 bit unsigned integer, and represented as an 8x8 matrix. Each byte in the value is a row, and the bits are the columns of the matrix."
        ),
    ]
    appearanceType: AppearanceType


class FillAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fillAttribute: FillAttribute


class SurfaceAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    materialType: MaterialTypeId
    ambientReflection: Annotated[
        int,
        Field(
            description="The ambient reflection of the surface attribute.", ge=0, le=100
        ),
    ]
    diffuseReflection: Annotated[
        int,
        Field(
            description="The diffuse reflection of the surface attribute.", ge=0, le=100
        ),
    ]
    specularReflection: Annotated[
        int,
        Field(
            description="The specular reflection of the surface attribute.",
            ge=0,
            le=100,
        ),
    ]
    transparencyAttenuation: Annotated[
        int,
        Field(
            description="The transparency attenuation of the surface attribute.",
            ge=0,
            le=400,
        ),
    ]
    emissionAttenuation: Annotated[
        int,
        Field(
            description="The emission attenuation of the surface attribute.",
            ge=0,
            le=65535,
        ),
    ]
    surfaceColor: Annotated[
        RGBColor, Field(description="The surface color of the surface attribute.")
    ]
    specularColor: Annotated[
        RGBColor, Field(description="The specular color of the surface attribute.")
    ]
    emissionColor: Annotated[
        RGBColor, Field(description="The emission color of the surface attribute.")
    ]
    fillId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The identifier of the surface attribute's fill component."),
    ]
    transparency: Annotated[
        int,
        Field(description="The transparency of the surface attribute.", ge=0, le=100),
    ]
    shine: Annotated[
        int,
        Field(description="The shininess of the surface attribute.", ge=0, le=10000),
    ]
    texture: Annotated[
        Texture | None, Field(description="The texture of the surface attribute.")
    ] = None


class SurfaceAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    surfaceAttribute: SurfaceAttribute


class ProfileAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    useWith: Annotated[
        List[ElementType],
        Field(
            description="The list of element types for which this profile is available."
        ),
    ]
    width: Annotated[
        float, Field(description="The default width (horizontal size) of the profile.")
    ]
    height: Annotated[
        float, Field(description="The default height (vertical size) of the profile.")
    ]
    minimumWidth: Annotated[
        float, Field(description="The minimum width (horizontal size) of the profile.")
    ]
    minimumHeight: Annotated[
        float, Field(description="The minimum height (vertical size) of the profile.")
    ]
    widthStretchable: Annotated[
        bool,
        Field(
            description="Defines whether the profile's width can be increased beyond its default value or not."
        ),
    ]
    heightStretchable: Annotated[
        bool,
        Field(
            description="Defines whether the profile's height can be increased beyond its default value or not."
        ),
    ]
    hasCoreSkin: Annotated[
        bool, Field(description="Defines whether the profile has a core skin or not.")
    ]
    profileModifiers: Annotated[
        List[ProfileModifierListItem], Field(description="A list of profile modifiers.")
    ]


class ProfileAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profileAttribute: ProfileAttribute


class CompositeLine(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    lineId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The attribute's identifier or an error."),
    ]
    linePenIndex: Annotated[
        int | None, Field(description="The index of the line pen.", ge=0, le=255)
    ] = None


class CompositeLineListItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    compositeLine: CompositeLine


class CompositeSkin(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buildingMaterialId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="The attribute's identifier or an error."),
    ]
    framePenIndex: Annotated[
        int | None, Field(description="The index of the frame pen.", ge=0, le=255)
    ] = None
    thickness: Annotated[
        float, Field(description="The thickness of the composite skin.")
    ]
    isCore: Annotated[
        bool,
        Field(
            description="Defines whether the composite skin is part of the core or not."
        ),
    ]
    isFinish: Annotated[
        bool,
        Field(
            description="Defines whether the composite skin is part of the finish or not."
        ),
    ]


class CompositeSkinListItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    compositeSkin: CompositeSkin


class CompositeAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    totalThickness: Annotated[
        float, Field(description="The total thickness of the composite.")
    ]
    compositeSkins: Annotated[
        List[CompositeSkinListItem],
        Field(description="The skins of the composite attribute."),
    ]
    compositeLines: Annotated[
        List[CompositeLineListItem],
        Field(
            description="The contour and separator lines of the composite attribute."
        ),
    ]
    useWith: Annotated[
        List[ElementType],
        Field(
            description="The list of element types for which this composite is available."
        ),
    ]


class CompositeAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    compositeAttribute: CompositeAttribute


class Pen(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    index: Annotated[int, Field(description="The index of the pen.", ge=0, le=255)]
    color: Annotated[RGBColor, Field(description="The color of the pen.")]
    weight: Annotated[
        float,
        Field(description="The thickness of the pen defined in millimeters.", ge=0.0),
    ]
    description: Annotated[str, Field(description="The description of the pen.")]


class PenArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pen: Pen


class LineItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    lineItemType: LineItemType
    centerOffset: Annotated[
        float,
        Field(
            description="The vertical distance from the origin of the symbol line. Used in separator, center dot, and centerline item types."
        ),
    ]
    length: Annotated[
        float,
        Field(
            description="The length of the item. Used in centerline, right angle, and parallel item types."
        ),
    ]
    begPosition: Annotated[
        Point2D,
        Field(
            description="The beginning position of the item. Used in dot, right angle, parallel, line, circle, and arc item types."
        ),
    ]
    endPosition: Annotated[
        Point2D,
        Field(description="The end position of the item. Used in line item type."),
    ]
    radius: Annotated[
        float,
        Field(description="The radius of the item. Used in circle and arc item types."),
    ]
    begAngle: Annotated[
        float,
        Field(
            description="The beginning angle of the item, measured from the vertical axis. Used in the arc item type."
        ),
    ]
    endAngle: Annotated[
        float,
        Field(
            description="The ending angle of the item, measured from the vertical axis. Used in the arc item type."
        ),
    ]


class LineAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    appearanceType: AppearanceType
    displayScale: Annotated[float, Field(description="The original scale of the line.")]
    period: Annotated[
        float, Field(description="The length of the dashed or symbol line's period.")
    ]
    height: Annotated[float, Field(description="The height of the symbol line.")]
    lineType: LineType
    lineItems: Annotated[
        List[DashItem | LineItem] | None,
        Field(description="A list of dash or line items."),
    ] = None


class LineAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    lineAttribute: LineAttribute


class ZoneCategoryAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    categoryCode: Annotated[str, Field(description="The category code of the zone.")]
    stampName: Annotated[str, Field(description="The stamp name of the zone category.")]
    stampMainGuid: Annotated[
        UUID,
        Field(
            description="The main part of the stamp library part's unique identifier.",
            pattern="^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
        ),
    ]
    stampRevisionGuid: Annotated[
        UUID,
        Field(
            description="The revision part of the stamp library part's unique identifier.",
            pattern="^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
        ),
    ]
    color: RGBColor


class ZoneCategoryAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    zoneCategoryAttribute: ZoneCategoryAttribute


class BuildingMaterialAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    id: Annotated[str, Field(description="The id of the building material.")]
    connectionPriority: Annotated[
        int, Field(description="The connection priority of the building material.")
    ]
    cutFillId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(
            description="The identifier of the building material attribute's fill component."
        ),
    ]
    cutFillPenIndex: Annotated[
        int,
        Field(
            description="The cut fill pen index of the building material.", ge=0, le=255
        ),
    ]
    cutSurfaceId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(
            description="The identifier of the building material attribute's surface component."
        ),
    ]


class BuildingMaterialAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buildingMaterialAttribute: BuildingMaterialAttribute


class LayerCombinationAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    layerAttributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(
            description="The list of identifiers belonging to the layer attributes referenced in this layer combination."
        ),
    ]


class LayerCombinationAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layerCombinationAttribute: LayerCombinationAttribute


class ClassificationSystemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class ClassificationSystemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId


class ClassificationItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class ClassificationItemIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId


class ClassificationId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId
    classificationItemId: Annotated[
        ClassificationItemId | None,
        Field(
            description="The element's classification in the given system. If no value is specified here, the element is Unclassified in this system."
        ),
    ] = None


class ClassificationIdWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationId: ClassificationId


class ElementClassification(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    classificationId: ClassificationId


class ElementClassificationWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationIds: Annotated[
        List[ClassificationIdWrapperItem | ErrorItem],
        Field(description="A list of element classification identifiers or errors."),
    ]


class ClassificationItemDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId
    id: Annotated[
        str,
        Field(
            description="The unique identifier of the classification item as specified by the user."
        ),
    ]
    name: Annotated[
        str, Field(description="The display name of the classification item.")
    ]
    description: Annotated[
        str, Field(description="The description of the classification item.")
    ]


class ClassificationItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItem: ClassificationItemDetails


class ClassificationSystem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId
    name: Annotated[
        str, Field(description="The display name of the classification system.")
    ]
    description: Annotated[
        str, Field(description="The description of the classification system.")
    ]
    source: Annotated[
        str,
        Field(
            description="The source of the classification system (e.g. URL to a classification system standard)."
        ),
    ]
    version: Annotated[
        str, Field(description="The version of the classification system.")
    ]
    date: Annotated[
        str,
        Field(
            description="The release date of the classification system's current version.",
            pattern="^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
        ),
    ]


class ClassificationSystemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystem: ClassificationSystem


class NavigatorItemId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class NavigatorItemIdWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId


class GeneralNavigatorItemData(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class NavigatorItemIdAndType(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemType: NavigatorItemType
    navigatorItemId: NavigatorItemId


class NavigatorItemIdAndTypeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIdAndType: NavigatorItemIdAndType


class DetailNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class DetailNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    detailNavigatorItem: DetailNavigatorItem


class Document3DNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class Document3DNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    document3DNavigatorItem: Document3DNavigatorItem


class ElevationNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class ElevationNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elevationNavigatorItem: ElevationNavigatorItem


class InteriorElevationNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class InteriorElevationNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    interiorElevationNavigatorItem: InteriorElevationNavigatorItem


class SectionNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class SectionNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    sectionNavigatorItem: SectionNavigatorItem


class StoryNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]
    floorLevel: Annotated[
        float, Field(description="The floor level of the story navigator item.")
    ]
    floorNumber: Annotated[
        float, Field(description="The floor number of the story navigator item.")
    ]


class StoryNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    storyNavigatorItem: StoryNavigatorItem


class WorksheetNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]


class WorksheetNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    worksheetNavigatorItem: WorksheetNavigatorItem


class BuiltInContainerNavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]
    contentIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(
            description="The identifiers of the navigator items inside the container navigator item."
        ),
    ]


class BuiltInContainerNavigatorItemWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    builtInContainerNavigatorItem: BuiltInContainerNavigatorItem


class PropertyId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class PropertyIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId


class PropertyGroupId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    guid: Annotated[
        UUID,
        Field(
            description="A Globally Unique Identifier (or Universally Unique Identifier) in its string representation as defined in RFC 4122.",
            ),
    ]


class PropertyGroupIdArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupId: PropertyGroupId


class PropertyGroup(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupId: PropertyGroupId
    name: Annotated[str, Field(description="The property group name.")]


class PropertyGroupWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroup: PropertyGroup


class NormalSingleEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: Annotated[
        DisplayValueEnumId | NonLocalizedValueEnumId,
        Field(description="The identifier of a property enumeration value."),
    ]


class NormalMultiEnumPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: Annotated[
        List[EnumValueIdWrapperItem], Field(description="A list of enumeration identifiers.")
    ]


class PropertyValueWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValue: Annotated[
        NotAvailablePropertyValue
        | NotEvaluatedPropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue,
        Field(
            description="A normal, userUndefined, notAvailable or notEvaluated property value."
        ),
    ]


class PropertyValuesWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValues: Annotated[
        List[PropertyValueWrapperItem | ErrorItem],
        Field(description="A list of property values."),
    ]


class ElementPropertyValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: Annotated[
        NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue,
        Field(description="A normal or a userUndefined property value."),
    ]


class PropertyIdsOfElement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementId: ElementId
    propertyIds: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class PropertyIdsOfElementWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIdsOfElement: PropertyIdsOfElement


class CloneProjectMapItemToViewMapParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectMapNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(
            description="The ID of the navigator item to be cloned. Only navigator items from the project map can be cloned."
        ),
    ]
    parentNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(
            description="The ID of the navigator item below which the new view will be inserted. Only navigator items from the view map are allowed."
        ),
    ]


class CloneProjectMapItemToViewMapResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    createdNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(description="The ID of the new navigator item in view map."),
    ]


class CreateLayoutParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layoutName: Annotated[
        str, Field(description="The name of the layout.", min_length=1)
    ]
    layoutParameters: LayoutParameters
    masterNavigatorItemId: NavigatorItemId
    parentNavigatorItemId: NavigatorItemId


class CreateLayoutResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    createdNavigatorItemId: Annotated[
        NavigatorItemId,
        Field(
            description="The ID of the new layout navigator item in the layout book."
        ),
    ]


class CreateLayoutSubsetParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    subsetParameters: Subset
    parentNavigatorItemId: NavigatorItemId


class CreateLayoutSubsetResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    createdSubsetId: Annotated[
        NavigatorItemId,
        Field(
            description="The ID of the new subset navigator item in the layout book."
        ),
    ]


class CreateViewMapFolderParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    folderParameters: Annotated[
        FolderParameters, Field(description="This is the name of the new folder.")
    ]
    parentNavigatorItemId: Annotated[
        NavigatorItemId | None,
        Field(
            description="The newly created folder will be placed under this parent item. If this parameter is not given the folder will be created as the first item in the View Map list."
        ),
    ] = None
    previousNavigatorItemId: Annotated[
        NavigatorItemId | None,
        Field(
            description="The newly created folder will be placed after this sibling item. If this parameter is not given the folder will be created as the first item under the parent."
        ),
    ] = None


class CreateViewMapFolderResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    createdFolderNavigatorItemId: NavigatorItemId


class DeleteAttributeFoldersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]


class DeleteAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class DeleteNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetActivePenTablesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modelViewPenTableId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="Model view pen table identifier or an error."),
    ]
    layoutBookPenTableId: Annotated[
        AttributeIdWrapperItem | ErrorItem,
        Field(description="Layout book pen table identifier or an error."),
    ]


class GetAllClassificationsInSystemParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemId: ClassificationSystemId


class GetAllClassificationSystemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystems: Annotated[
        List[ClassificationSystem],
        Field(description="A list of classification systems."),
    ]


class GetAllPropertyGroupIdsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="A list of property group identifiers."),
    ]


class GetAllPropertyIdsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class GetAllPropertyIdsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIdsOfElements: Annotated[
        List[PropertyIdsOfElementWrapperItem | ErrorItem],
        Field(description="A list of property identifiers of elements or errors."),
    ]


class GetAttributeFoldersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]


class GetAttributeFoldersResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolders: Annotated[
        List[AttributeFolderWrapperItem | ErrorItem],
        Field(description="A list of attribute folders."),
    ]


class GetAttributesByTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetAttributesIndicesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetAttributesIndicesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIndicesAndGuids: Annotated[
        List[AttributeIndexAndGuidWrapperItem | ErrorItem],
        Field(description="A list of complete attribute identifiers."),
    ]


class GetBuildingMaterialAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetBuildingMaterialAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[BuildingMaterialAttributeWrapperItem | ErrorItem],
        Field(
            description="A list of building material attributes and potential errors."
        ),
    ]


class GetBuiltInContainerNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetBuiltInContainerNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[BuiltInContainerNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of built-in container navigator items."),
    ]


class GetClassificationItemAvailabilityParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemIds: Annotated[
        List[ClassificationItemIdArrayItem],
        Field(description="A list of classification item identifiers."),
    ]


class GetClassificationsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class GetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementClassifications: Annotated[
        List[ElementClassificationWrapperItem | ErrorItem],
        Field(
            description="The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects."
        ),
    ]


class GetClassificationSystemIdsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class GetClassificationSystemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class GetClassificationSystemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationSystems: Annotated[
        List[ClassificationSystemWrapperItem | ErrorItem],
        Field(description="A list of classification systems or errors."),
    ]


class GetCompositeAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetCompositeAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[CompositeAttributeWrapperItem | ErrorItem],
        Field(description="A list of the composite attributes and potential errors."),
    ]


class GetDetailNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetDetailNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[DetailNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of detail navigator items."),
    ]


class GetDetailsOfClassificationItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemIds: Annotated[
        List[ClassificationItemIdArrayItem],
        Field(description="A list of classification item identifiers."),
    ]


class GetDetailsOfPropertiesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class GetDocument3DNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetDocument3DNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[Document3DNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of 3D document navigator items."),
    ]


class GetElementsByClassificationParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId


class GetElevationNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetElevationNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[ElevationNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of elevation navigator items."),
    ]


class GetFillAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetFillAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[FillAttributeWrapperItem | ErrorItem],
        Field(description="A list of fill attributes and potential errors."),
    ]


class GetInteriorElevationNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetInteriorElevationNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[InteriorElevationNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of interior elevation navigator items."),
    ]


class GetLayerAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetLayerAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[LayerAttributeWrapperItem | ErrorItem],
        Field(description="A list of layer attributes and potential errors."),
    ]


class GetLayerCombinationAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetLayoutSettingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layoutNavigatorItemId: NavigatorItemId


class GetLineAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetLineAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[LineAttributeWrapperItem | ErrorItem],
        Field(description="A list of line attributes and potential errors."),
    ]


class GetNavigatorItemsTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetNavigatorItemsTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIdAndTypeList: Annotated[
        List[NavigatorItemIdAndTypeWrapperItem | ErrorItem],
        Field(
            description="A list of objects that consist of a navigator item identifier and a type."
        ),
    ]


class GetPenTableAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetProfileAttributePreviewParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]
    imageWidth: Annotated[int, Field(description="The width of the preview image.")]
    imageHeight: Annotated[int, Field(description="The height of the preview image.")]
    backgroundColor: Annotated[
        RGBColor | None, Field(description="The background color of the preview image.")
    ] = None


class GetProfileAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetProfileAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[ProfileAttributeWrapperItem | ErrorItem],
        Field(description="A list of the profile attributes and potential errors."),
    ]


class GetPropertyDefinitionAvailabilityParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class GetPropertyGroupsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="A list of property group identifiers."),
    ]


class GetPropertyGroupsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroups: Annotated[
        List[PropertyGroupWrapperItem | ErrorItem],
        Field(description="A list of property groups or errors."),
    ]


class GetPropertyIdsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[PropertyIdArrayItem | ErrorItem],
        Field(
            description="List of the ids of the requested properties. Order of the ids are the same as in the input. Existing properties are represented by propertyId objects, non-existing properties are represented by error objects."
        ),
    ]


class GetPropertyValuesOfElementComponentsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementComponents: Annotated[
        List[ElementComponentIdArrayItem],
        Field(description="List of components of elements."),
    ]
    properties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class GetPropertyValuesOfElementComponentsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForElementComponents: Annotated[
        List[PropertyValuesWrapperItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given components. The order of the inner lists are that of the given properties."
        ),
    ]


class GetPropertyValuesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    properties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class GetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForElements: Annotated[
        List[PropertyValuesWrapperItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."
        ),
    ]


class GetSectionNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetSectionNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[SectionNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of section navigator items."),
    ]


class GetStoryNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetStoryNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[StoryNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of story navigator items."),
    ]


class GetSurfaceAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetSurfaceAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[SurfaceAttributeWrapperItem | ErrorItem],
        Field(description="A list of surface attributes and potential errors."),
    ]


class GetWorksheetNavigatorItemsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdWrapperItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetWorksheetNavigatorItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItems: Annotated[
        List[WorksheetNavigatorItemWrapperItem | ErrorItem],
        Field(description="A list of worksheet navigator items."),
    ]


class GetZoneCategoryAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]


class GetZoneCategoryAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[ZoneCategoryAttributeWrapperItem | ErrorItem],
        Field(description="A list of zone category attributes and potential errors."),
    ]


class MoveAttributesAndFoldersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolderIds: Annotated[
        List[AttributeFolderIdWrapperItem],
        Field(description="A list of attribute folder identifiers."),
    ]
    attributeIds: Annotated[
        List[AttributeIdWrapperItem],
        Field(description="A list of attribute identifiers."),
    ]
    targetFolderId: AttributeFolderId


class MoveNavigatorItemParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIdToMove: NavigatorItemId
    parentNavigatorItemId: NavigatorItemId
    previousNavigatorItemId: NavigatorItemId | None = None


class RenameAttributeFoldersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolderParametersList: List[AttributeFolderRenameParameters]


class RenameNavigatorItemByName(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    newName: Annotated[str, Field(description="New name of the navigator item.")]


class RenameNavigatorItemById(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    newId: Annotated[str, Field(description="New ID of the navigator item.")]


class RenameNavigatorItemByNameAndId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    newName: Annotated[str, Field(description="New name of the navigator item.")]
    newId: Annotated[str, Field(description="New ID of the navigator item.")]


RenameNavigatorItemParameters: TypeAlias = RenameNavigatorItemByName | RenameNavigatorItemById | RenameNavigatorItemByNameAndId


class SetClassificationsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementClassifications: Annotated[
        List[ElementClassification],
        Field(description="A list of element classification identifiers."),
    ]


class SetLayoutSettingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layoutParameters: LayoutParameters
    layoutNavigatorItemId: NavigatorItemId


class SetPropertyValuesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementPropertyValues: Annotated[
        List[ElementPropertyValue],
        Field(description="A list of element property values."),
    ]


class PenTableAttribute(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeId: AttributeId
    name: Annotated[str, Field(description="The name of an attribute.", min_length=1)]
    pens: Annotated[
        List[PenArrayItem], Field(description="A collection of pens in a pen table.")
    ]


class PenTableAttributeWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    penTableAttribute: PenTableAttribute


class ClassificationItemAvailability(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId
    availableProperties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class ClassificationItemAvailabilityWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemAvailability: ClassificationItemAvailability


class PropertyDefinitionAvailability(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId
    availableClassifications: Annotated[
        List[ClassificationItemIdArrayItem],
        Field(description="A list of classification item identifiers."),
    ]


class PropertyDefinitionAvailabilityWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinitionAvailability: PropertyDefinitionAvailability


class PropertyBasicDefaultValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    basicDefaultValue: Annotated[
        NotAvailablePropertyValue
        | NotEvaluatedPropertyValue
        | NormalNumberPropertyValue
        | NormalIntegerPropertyValue
        | NormalStringPropertyValue
        | NormalBooleanPropertyValue
        | NormalLengthPropertyValue
        | NormalAreaPropertyValue
        | NormalVolumePropertyValue
        | NormalAnglePropertyValue
        | NormalNumberListPropertyValue
        | NormalIntegerListPropertyValue
        | NormalStringListPropertyValue
        | NormalBooleanListPropertyValue
        | NormalLengthListPropertyValue
        | NormalAreaListPropertyValue
        | NormalVolumeListPropertyValue
        | NormalAngleListPropertyValue
        | NormalSingleEnumPropertyValue
        | NormalMultiEnumPropertyValue
        | UserUndefinedPropertyValue,
        Field(
            description="A normal, userUndefined, notAvailable or notEvaluated property value."
        ),
    ]


class PropertyDefinition(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyId: PropertyId | None = None
    group: PropertyGroup
    name: Annotated[str, Field(description="The localized name of the property.")]
    description: Annotated[str, Field(description="The description of the property.")]
    isEditable: Annotated[
        bool, Field(description="Defines whether the property is editable or not.")
    ]
    type: Annotated[str, Field(description="Defines the type of the property's value.")]
    possibleEnumValues: Annotated[
        List[PossibleEnumValuesArrayItem] | None,
        Field(
            description="The possible enum values of the property when the property type is enumeration."
        ),
    ] = None
    defaultValue: Annotated[
        PropertyBasicDefaultValue | None,
        Field(description="Default value of the property."),
    ] = None


class PropertyDefinitionWrapperItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinition: PropertyDefinition


class GetClassificationItemAvailabilityResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemAvailabilityList: Annotated[
        List[ClassificationItemAvailabilityWrapperItem | ErrorItem],
        Field(description="A list of classification item avalabilities."),
    ]


class GetDetailsOfClassificationItemsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItems: Annotated[
        List[ClassificationItemWrapperItem | ErrorItem],
        Field(description="A list of classification items or errors."),
    ]


class GetDetailsOfPropertiesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinitions: Annotated[
        List[PropertyDefinitionWrapperItem | ErrorItem],
        Field(description="A list of property definitions or errors."),
    ]


class GetLayerCombinationAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[LayerCombinationAttributeWrapperItem | ErrorItem],
        Field(
            description="A list of layer combination attributes and potential errors."
        ),
    ]


class GetPenTableAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[
        List[PenTableAttributeWrapperItem | ErrorItem],
        Field(description="A list of pen table attributes and potential errors."),
    ]


class GetPropertyDefinitionAvailabilityResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinitionAvailabilityList: Annotated[
        List[PropertyDefinitionAvailabilityWrapperItem | ErrorItem],
        Field(description="A list of classification item avalabilities."),
    ]


class GetAllClassificationsInSystemResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItems: Annotated[
        List[ClassificationItemArrayItem],
        Field(description="A list of classification items."),
    ]


class GetAttributeFolderStructureResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolder: AttributeFolderStructure


class GetNavigatorItemTreeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorTree: NavigatorTree


class AttributeFolderStructureArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolder: AttributeFolderStructure


class AttributeFolderStructure(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeFolderId: AttributeFolderId
    name: Annotated[
        str,
        Field(
            description="The name of an attribute folder. Legal names are not empty, and do not begin or end with whitespace.",
            min_length=1,
        ),
    ]
    attributes: Annotated[
        List[AttributeHeaderArrayItem] | None,
        Field(
            description="The names and identifiers of the attributes contained in this folder."
        ),
    ] = None
    subfolders: Annotated[
        List[AttributeFolderStructureArrayItem] | None,
        Field(description="The subfolders of this attribute folder."),
    ] = None


AttributeFolderStructureOrError: TypeAlias = AttributeFolderStructure | ErrorItem


class ClassificationItemArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItem: ClassificationItemInTree


class ClassificationItemInTree(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    classificationItemId: ClassificationItemId
    id: Annotated[
        str,
        Field(
            description="The unique identifier of the classification item as specified by the user."
        ),
    ]
    name: Annotated[
        str, Field(description="The display name of the classification item.")
    ]
    description: Annotated[
        str, Field(description="The description of the classification item.")
    ]
    children: Annotated[
        List[ClassificationItemArrayItem] | None,
        Field(description="A list of classification items."),
    ] = None


class NavigatorItemArrayItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItem: NavigatorItem


class NavigatorItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemId: NavigatorItemId
    prefix: Annotated[
        str, Field(description="The prefix of the navigator item's name.")
    ]
    name: Annotated[str, Field(description="The name of the navigator item.")]
    type: Annotated[
        NavigatorItemType, Field(description="The type of the navigator item.")
    ]
    sourceNavigatorItemId: Annotated[
        NavigatorItemId | None,
        Field(
            description="The source of the navigator item. For example, a navigator item in the ViewMap can be the source of a DrawingItem."
        ),
    ] = None
    children: Annotated[
        List[NavigatorItemArrayItem] | None,
        Field(description="The children of the navigator item if it has any."),
    ] = None


class NavigatorTree(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    rootItem: NavigatorItem
